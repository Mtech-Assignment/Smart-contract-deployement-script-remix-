{
	"id": "0afefb63dffc5c48415cba9f1f4217e9",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/CSDP.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract CSDP is ERC20, ERC20Permit, Ownable, ReentrancyGuard {\r\n    uint256 public tokenPrice;\r\n\r\n    // to restrict the total supply of CSDP\r\n    uint256 private totalTokenSupply;\r\n\r\n    constructor()\r\n        ERC20(\"CSDP\", \"CSDP\") \r\n        ERC20Permit(\"CSDP\")\r\n        Ownable(msg.sender) // Specify the Ownable constructor\r\n    {\r\n        totalTokenSupply = 100000000 * 10 ** uint(decimals()); // 100 million total supply\r\n        tokenPrice = 1;\r\n        totalTokenSupply -= 100000 * 10 ** uint(decimals());\r\n        _mint(msg.sender, 100000 * 10 ** uint(decimals())); // 1 lakh tokens to the owner\r\n    }\r\n\r\n    // This function will be called whenever Ether is sent to the contract\r\n    function sendToken() external payable nonReentrant returns (uint256) {\r\n        require(msg.value > 0, \"You must send Ether to get tokens\");\r\n        \r\n        uint256 amountToMint = msg.value / tokenPrice * 1000; // currently 1 wei = 10^-15 CSDP (might change in future)\r\n        require(totalTokenSupply > 0, \"No more tokens can be minted\"); // with this overflow is taken care of \r\n        \r\n        totalTokenSupply -= amountToMint;\r\n        _mint(msg.sender, amountToMint); // Mint tokens to the sender\r\n        return balanceOf(msg.sender);\r\n    }\r\n\r\n    function withdraw() public nonReentrant onlyOwner {\r\n        payable(owner()).transfer(address(this).balance); // Withdraw Ether from the contract\r\n    }\r\n\r\n    function setTokenPrice(uint256 newPrice) public onlyOwner {\r\n        tokenPrice = newPrice; // Update the token price\r\n    }\r\n     \r\n    function transfer(address to, uint256 value) override public nonReentrant returns (bool) {\r\n        uint256 burnAmount = value * 2 / 100000; // 0.002% \r\n        _burn(msg.sender, burnAmount); // burn 0.002% of the token on every txn\r\n        return super.transfer(to, value - burnAmount);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        assembly (\"memory-safe\") {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 320,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e0968705bad99747a8e5288aa008678c2be2f471f919dce3925a3cc4f1dee09\",\"dweb:/ipfs/QmbAFnCQfo4tw6ssfQSjhA5LzwHWNNryXN8bX7ty8jiqqn\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 405,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 407,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 409,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC-20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC-20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e0968705bad99747a8e5288aa008678c2be2f471f919dce3925a3cc4f1dee09\",\"dweb:/ipfs/QmbAFnCQfo4tw6ssfQSjhA5LzwHWNNryXN8bX7ty8jiqqn\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ee931d4e832385765967efe6366dcc6d00d6a2d794f9c66ee38283c03882de9c\",\"dweb:/ipfs/QmR6SkuJGYxpQeLz38rBdghqaWqEPfzUsL9kBoXgEXKtbD\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3\",\"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65e38fb76b6add407d4557753ae83dd1268e8261195dbe5c19a580d5ba6e4e9a\",\"dweb:/ipfs/QmTkGSJtaQrqjcyWM4AgemeEmKgtDydKPPVRajsUJRQSrK\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e41287d40b0c46982f1083d40d32de2761f009c5c51627fe79a7feb0ab1cf5c\",\"dweb:/ipfs/Qme7dbh6HX3ZvUJdbQAcVqXkmyXyfcLiUZRhhon3cU6K8p\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 405,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 407,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 409,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2262,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2264,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1227,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3\",\"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1227,
								"contract": "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4281  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4281  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f4d4a1410ed3bc5d1e367ba798ce98f5563384e77af2541465226d13d4aa3c8e64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f4d4a1410ed3bc5d1e367ba798ce98f5563384e77af2541465226d13d4aa3c8e64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL 0xD4 LOG1 COINBASE 0xE 0xD3 0xBC TSTORE 0x1E CALLDATASIZE PUSH28 0xA798CE98F5563384E77AF2541465226D13D4AA3C8E64736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1255:3026:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1255:3026:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f4d4a1410ed3bc5d1e367ba798ce98f5563384e77af2541465226d13d4aa3c8e64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL 0xD4 LOG1 COINBASE 0xE 0xD3 0xBC TSTORE 0x1E CALLDATASIZE PUSH28 0xA798CE98F5563384E77AF2541465226D13D4AA3C8E64736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1255:3026:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4281,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f4d4a1410ed3bc5d1e367ba798ce98f5563384e77af2541465226d13d4aa3c8e64736f6c634300081a0033",
									".code": [
										{
											"begin": 1255,
											"end": 4281,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4281,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65e38fb76b6add407d4557753ae83dd1268e8261195dbe5c19a580d5ba6e4e9a\",\"dweb:/ipfs/QmTkGSJtaQrqjcyWM4AgemeEmKgtDydKPPVRajsUJRQSrK\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1407:4181  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1407:4181  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122042851c92114da71f299d79fe664afa2e562fd3083c15ae52111e85361434430d64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122042851c92114da71f299d79fe664afa2e562fd3083c15ae52111e85361434430d64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP DUP6 SHR SWAP3 GT 0x4D 0xA7 0x1F 0x29 SWAP14 PUSH26 0xFE664AFA2E562FD3083C15AE52111E85361434430D64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1407:2774:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1407:2774:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122042851c92114da71f299d79fe664afa2e562fd3083c15ae52111e85361434430d64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP DUP6 SHR SWAP3 GT 0x4D 0xA7 0x1F 0x29 SWAP14 PUSH26 0xFE664AFA2E562FD3083C15AE52111E85361434430D64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1407:2774:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getInt256Slot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1407,
									"end": 4181,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122042851c92114da71f299d79fe664afa2e562fd3083c15ae52111e85361434430d64736f6c634300081a0033",
									".code": [
										{
											"begin": 1407,
											"end": 4181,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1407,
											"end": 4181,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOBHASH 0xDB PUSH28 0xE255564B18B33C0F84A547E54BCA47EB358F2C24348440DB5A4E9FE0 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOBHASH 0xDB PUSH28 0xE255564B18B33C0F84A547E54BCA47EB358F2C24348440DB5A4E9FE0 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7814  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7814  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203ad05e16d650d0775bce6b983627c6cec182a672b71bb9e6ebaad133d7cca31a64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203ad05e16d650d0775bce6b983627c6cec182a672b71bb9e6ebaad133d7cca31a64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xD0 MCOPY AND 0xD6 POP 0xD0 PUSH24 0x5BCE6B983627C6CEC182A672B71BB9E6EBAAD133D7CCA31A PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "344:7470:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;344:7470:14;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203ad05e16d650d0775bce6b983627c6cec182a672b71bb9e6ebaad133d7cca31a64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xD0 MCOPY AND 0xD6 POP 0xD0 PUSH24 0x5BCE6B983627C6CEC182A672B71BB9E6EBAAD133D7CCA31A PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "344:7470:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203ad05e16d650d0775bce6b983627c6cec182a672b71bb9e6ebaad133d7cca31a64736f6c634300081a0033",
									".code": [
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65e38fb76b6add407d4557753ae83dd1268e8261195dbe5c19a580d5ba6e4e9a\",\"dweb:/ipfs/QmTkGSJtaQrqjcyWM4AgemeEmKgtDydKPPVRajsUJRQSrK\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e41287d40b0c46982f1083d40d32de2761f009c5c51627fe79a7feb0ab1cf5c\",\"dweb:/ipfs/Qme7dbh6HX3ZvUJdbQAcVqXkmyXyfcLiUZRhhon3cU6K8p\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2262,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2264,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3702  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3702  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200060f7058787af496a8a4b5dcb188c74a3f7b99020ea0ff0f06648765c13238164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200060f7058787af496a8a4b5dcb188c74a3f7b99020ea0ff0f06648765c13238164736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP PUSH1 0xF7 SDIV DUP8 DUP8 0xAF BLOBHASH PUSH11 0x8A4B5DCB188C74A3F7B990 KECCAK256 0xEA 0xF CREATE CREATE PUSH7 0x48765C13238164 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "521:3181:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3181:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200060f7058787af496a8a4b5dcb188c74a3f7b99020ea0ff0f06648765c13238164736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP PUSH1 0xF7 SDIV DUP8 DUP8 0xAF BLOBHASH PUSH11 0x8A4B5DCB188C74A3F7B990 KECCAK256 0xEA 0xF CREATE CREATE PUSH7 0x48765C13238164 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "521:3181:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3702,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200060f7058787af496a8a4b5dcb188c74a3f7b99020ea0ff0f06648765c13238164736f6c634300081a0033",
									".code": [
										{
											"begin": 521,
											"end": 3702,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3702,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY REVERT 0xD4 PUSH21 0x49EEA188394CF3FAFE88E8CEF6E2C9FE1BFFAA2FF6 PUSH11 0x356BEFAF47BD64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:17;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY REVERT 0xD4 PUSH21 0x49EEA188394CF3FAFE88E8CEF6E2C9FE1BFFAA2FF6 PUSH11 0x356BEFAF47BD64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH22 0x3A7D5298A939BCC1FF6F209522E4BA5BA2334894BA3F SWAP5 0xDF LOG1 0xC5 0x2C DIV 0x27 0xCC PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:18;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH22 0x3A7D5298A939BCC1FF6F209522E4BA5BA2334894BA3F SWAP5 0xDF LOG1 0xC5 0x2C DIV 0x27 0xCC PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/CSDP.sol": {
				"CSDP": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sendToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newPrice",
									"type": "uint256"
								}
							],
							"name": "setTokenPrice",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/CSDP.sol\":255:2107  contract CSDP is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x0160)\n    /* \"contracts/CSDP.sol\":444:866  constructor()... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/CSDP.sol\":536:546  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1577:1629  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe4, 0x04353445)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1616:1620  name */\n  dup1\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3328:3759  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xf8, 0x31)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1601:1714  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe4, 0x04353445)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe4, 0x04353445)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1675:1680  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1667:1672  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1667:1680  _name = name_ */\n  swap1\n  dup2\n  tag_9\n  swap2\n  swap1\n  tag_10\n  jump\t// in\ntag_9:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1690:1697  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1690:1707  _symbol = symbol_ */\n  tag_11\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1700:1707  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1690:1697  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1690:1707  _symbol = symbol_ */\n  tag_10\n  jump\t// in\ntag_11:\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_13\n  swap2\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3405  name */\n  dup4\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x05\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3431  name.toShortStringWithFallback */\n  tag_14\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  jump\t// in\ntag_13:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_15\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3474  version */\n  dup2\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3501:3517  _versionFallback */\n  0x06\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3500  version.toShortStringWithFallback */\n  tag_14\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  jump\t// in\ntag_15:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  dup2\n  mload\n  0x20\n  dup1\n  dup5\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  dup2\n  mload\n  swap1\n  dup3\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\n  tag_16\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n  mload(0xe0)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n  mload(0x0100)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x40\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x20\n  dup3\n  add\n    /* \"#utility.yul\":4983:5008   */\n  mstore\n    /* \"#utility.yul\":5024:5042   */\n  swap1\n  dup2\n  add\n    /* \"#utility.yul\":5017:5051   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":5067:5085   */\n  0x60\n  dup3\n  add\n    /* \"#utility.yul\":5060:5094   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n  chainid\n    /* \"#utility.yul\":5110:5128   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":5103:5137   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"#utility.yul\":5153:5172   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":5146:5207   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n  0x00\n  swap1\n    /* \"#utility.yul\":4955:4974   */\n  0xc0\n  add\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\ntag_16:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3747:3751  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xc0\n  mstore\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_20\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2801:2852   */\n  mstore\n    /* \"#utility.yul\":2774:2792   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\ntag_21:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_20:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_23\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_24\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_23:\n  pop\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1828  _status */\n  0x09\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  sstore\n    /* \"contracts/CSDP.sol\":630:652  10 ** uint(decimals()) */\n  tag_29\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2780:2782  18 */\n  0x12\n    /* \"contracts/CSDP.sol\":630:632  10 */\n  0x0a\n    /* \"contracts/CSDP.sol\":630:652  10 ** uint(decimals()) */\n  tag_30\n  jump\t// in\ntag_29:\n    /* \"contracts/CSDP.sol\":618:652  100000000 * 10 ** uint(decimals()) */\n  tag_31\n  swap1\n    /* \"contracts/CSDP.sol\":618:627  100000000 */\n  0x05f5e100\n    /* \"contracts/CSDP.sol\":618:652  100000000 * 10 ** uint(decimals()) */\n  tag_32\n  jump\t// in\ntag_31:\n    /* \"contracts/CSDP.sol\":599:615  totalTokenSupply */\n  0x0b\n    /* \"contracts/CSDP.sol\":599:652  totalTokenSupply = 100000000 * 10 ** uint(decimals()) */\n  sstore\n    /* \"contracts/CSDP.sol\":704:705  1 */\n  0x01\n    /* \"contracts/CSDP.sol\":691:701  tokenPrice */\n  0x0a\n    /* \"contracts/CSDP.sol\":691:705  tokenPrice = 1 */\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2780:2782  18 */\n  0x12\n    /* \"contracts/CSDP.sol\":745:767  10 ** uint(decimals()) */\n  tag_34\n  swap1\n    /* \"contracts/CSDP.sol\":751:767  uint(decimals()) */\n  0xff\n  and\n    /* \"contracts/CSDP.sol\":745:747  10 */\n  0x0a\n    /* \"contracts/CSDP.sol\":745:767  10 ** uint(decimals()) */\n  tag_30\n  jump\t// in\ntag_34:\n    /* \"contracts/CSDP.sol\":736:767  100000 * 10 ** uint(decimals()) */\n  tag_35\n  swap1\n    /* \"contracts/CSDP.sol\":736:742  100000 */\n  0x0186a0\n    /* \"contracts/CSDP.sol\":736:767  100000 * 10 ** uint(decimals()) */\n  tag_32\n  jump\t// in\ntag_35:\n    /* \"contracts/CSDP.sol\":716:732  totalTokenSupply */\n  0x0b\n  0x00\n    /* \"contracts/CSDP.sol\":716:767  totalTokenSupply -= 100000 * 10 ** uint(decimals()) */\n  dup3\n  dup3\n  sload\n  tag_36\n  swap2\n  swap1\n  tag_37\n  jump\t// in\ntag_36:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"contracts/CSDP.sol\":778:828  _mint(msg.sender, 100000 * 10 ** uint(decimals())) */\n  tag_38\n  swap1\n  pop\n    /* \"contracts/CSDP.sol\":784:794  msg.sender */\n  caller\n    /* \"contracts/CSDP.sol\":805:827  10 ** uint(decimals()) */\n  tag_40\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2780:2782  18 */\n  0x12\n    /* \"contracts/CSDP.sol\":805:807  10 */\n  0x0a\n    /* \"contracts/CSDP.sol\":805:827  10 ** uint(decimals()) */\n  tag_30\n  jump\t// in\ntag_40:\n    /* \"contracts/CSDP.sol\":796:827  100000 * 10 ** uint(decimals()) */\n  tag_41\n  swap1\n    /* \"contracts/CSDP.sol\":796:802  100000 */\n  0x0186a0\n    /* \"contracts/CSDP.sol\":796:827  100000 * 10 ** uint(decimals()) */\n  tag_32\n  jump\t// in\ntag_41:\n    /* \"contracts/CSDP.sol\":778:783  _mint */\n  tag_42\n    /* \"contracts/CSDP.sol\":778:828  _mint(msg.sender, 100000 * 10 ** uint(decimals())) */\n  jump\t// in\ntag_38:\n    /* \"contracts/CSDP.sol\":255:2107  contract CSDP is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  jump(tag_89)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2887:3227  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_14:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2983:2994  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3032:3034  32 */\n  0x20\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3016:3021  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3010:3029  bytes(value).length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3010:3034  bytes(value).length < 32 */\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3006:3221  if (bytes(value).length < 32) {... */\n  iszero\n  tag_45\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3057:3077  toShortString(value) */\n  tag_46\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3071:3076  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3057:3070  toShortString */\n  tag_47\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3057:3077  toShortString(value) */\n  jump\t// in\ntag_46:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3050:3077  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_48)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3006:3221  if (bytes(value).length < 32) {... */\ntag_45:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3134:3139  store */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3108:3154  StorageSlot.getStringSlot(store).value = value */\n  tag_51\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3149:3154  value */\n  dup5\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3134:3139  store */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3108:3154  StorageSlot.getStringSlot(store).value = value */\n  tag_10\n  jump\t// in\ntag_51:\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3006:3221  if (bytes(value).length < 32) {... */\ntag_48:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2887:3227  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_24:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x08\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7458:7666  function _mint(address account, uint256 value) internal {... */\ntag_42:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7528:7549  account == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7524:7615  if (account == address(0)) {... */\n  tag_58\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7572:7604  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0xec442f05)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7601:7602  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7572:7604  ERC20InvalidReceiver(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2801:2852   */\n  mstore\n    /* \"#utility.yul\":2774:2792   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7572:7604  ERC20InvalidReceiver(address(0)) */\n  tag_21\n    /* \"#utility.yul\":2655:2858   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7524:7615  if (account == address(0)) {... */\ntag_58:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7624:7659  _update(address(0), account, value) */\n  tag_60\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7640:7641  0 */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7644:7651  account */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7653:7658  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7624:7631  _update */\n  tag_61\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7624:7659  _update(address(0), account, value) */\n  jump\t// in\ntag_60:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7458:7666  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_47:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1773:1784  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1813  bytes memory bstr */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1822:1825  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1826  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1844  bstr */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1851  bstr.length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  iszero\n  tag_63\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1893:1896  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  mload(0x40)\n  shl(0xe0, 0x305a27a9)\n  dup2\n  mstore\n  0x04\n  add\n  tag_21\n  swap2\n  swap1\n  tag_65\n  jump\t// in\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_63:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1985  bstr.length */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_66\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1978  bstr */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_67\n  jump\t// in\ntag_66:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n  swap4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6008:7115  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_61:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6097:6115  from == address(0) */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6093:6633  if (from == address(0)) {... */\n  tag_70\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6249:6254  value */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6233:6245  _totalSupply */\n  0x02\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6233:6254  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_71\n  swap2\n  swap1\n  tag_72\n  jump\t// in\ntag_71:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6093:6633  if (from == address(0)) {... */\n  tag_73\n  swap1\n  pop\n  jump\ntag_70:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6307:6322  _balances[from] */\n  dup4\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6285:6304  uint256 fromBalance */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6307:6322  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6340:6359  fromBalance < value */\n  dup2\n  dup2\n  lt\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6336:6451  if (fromBalance < value) {... */\n  iszero\n  tag_74\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6386:6436  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  shl(0xe2, 0x391434e3)\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":6293:6325   */\n  dup6\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6386:6436  ERC20InsufficientBalance(from, fromBalance, value) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":6275:6326   */\n  mstore\n    /* \"#utility.yul\":6342:6360   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":6335:6369   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":6385:6403   */\n  0x44\n  dup2\n  add\n    /* \"#utility.yul\":6378:6412   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":6248:6266   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6386:6436  ERC20InsufficientBalance(from, fromBalance, value) */\n  tag_21\n    /* \"#utility.yul\":6073:6418   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6336:6451  if (fromBalance < value) {... */\ntag_74:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6586  _balances[from] */\n  dup5\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6580  _balances */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6586  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6589:6608  fromBalance - value */\n  swap1\n  dup3\n  swap1\n  sub\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6608  _balances[from] = fromBalance - value */\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6093:6633  if (from == address(0)) {... */\ntag_73:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6647:6663  to == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6643:7068  if (to == address(0)) {... */\n  tag_77\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6810:6822  _totalSupply */\n  0x02\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6810:6831  _totalSupply -= value */\n  dup1\n  sload\n  dup3\n  swap1\n  sub\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6643:7068  if (to == address(0)) {... */\n  jump(tag_78)\ntag_77:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7034  _balances[to] */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7030  _balances */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7034  _balances[to] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7043  _balances[to] += value */\n  dup1\n  sload\n  dup3\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6643:7068  if (to == address(0)) {... */\ntag_78:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7098:7100  to */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7092:7096  from */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7102:7107  value */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n  mload(0x40)\n  tag_79\n  swap2\n    /* \"#utility.yul\":6569:6594   */\n  dup2\n  mstore\n    /* \"#utility.yul\":6557:6559   */\n  0x20\n    /* \"#utility.yul\":6542:6560   */\n  add\n  swap1\n    /* \"#utility.yul\":6423:6600   */\n  jump\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\ntag_79:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6008:7115  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_81:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:526   */\ntag_82:\n    /* \"#utility.yul\":225:226   */\n  0x01\n    /* \"#utility.yul\":221:233   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":268:280   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":289:350   */\n  tag_92\n  jumpi\n    /* \"#utility.yul\":343:347   */\n  0x7f\n    /* \"#utility.yul\":335:341   */\n  dup3\n    /* \"#utility.yul\":331:348   */\n  and\n    /* \"#utility.yul\":321:348   */\n  swap2\n  pop\n    /* \"#utility.yul\":289:350   */\ntag_92:\n    /* \"#utility.yul\":396:398   */\n  0x20\n    /* \"#utility.yul\":388:394   */\n  dup3\n    /* \"#utility.yul\":385:399   */\n  lt\n    /* \"#utility.yul\":365:383   */\n  dup2\n    /* \"#utility.yul\":362:400   */\n  sub\n    /* \"#utility.yul\":359:520   */\n  tag_93\n  jumpi\n    /* \"#utility.yul\":442:452   */\n  0x4e487b71\n    /* \"#utility.yul\":437:440   */\n  0xe0\n    /* \"#utility.yul\":433:453   */\n  shl\n    /* \"#utility.yul\":430:431   */\n  0x00\n    /* \"#utility.yul\":423:454   */\n  mstore\n    /* \"#utility.yul\":477:481   */\n  0x22\n    /* \"#utility.yul\":474:475   */\n  0x04\n    /* \"#utility.yul\":467:482   */\n  mstore\n    /* \"#utility.yul\":505:509   */\n  0x24\n    /* \"#utility.yul\":502:503   */\n  0x00\n    /* \"#utility.yul\":495:510   */\n  revert\n    /* \"#utility.yul\":359:520   */\ntag_93:\n  pop\n    /* \"#utility.yul\":146:526   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":657:1175   */\ntag_84:\n    /* \"#utility.yul\":759:761   */\n  0x1f\n    /* \"#utility.yul\":754:757   */\n  dup3\n    /* \"#utility.yul\":751:762   */\n  gt\n    /* \"#utility.yul\":748:1169   */\n  iszero\n  tag_96\n  jumpi\n    /* \"#utility.yul\":795:800   */\n  dup1\n    /* \"#utility.yul\":792:793   */\n  0x00\n    /* \"#utility.yul\":785:801   */\n  mstore\n    /* \"#utility.yul\":839:843   */\n  0x20\n    /* \"#utility.yul\":836:837   */\n  0x00\n    /* \"#utility.yul\":826:844   */\n  keccak256\n    /* \"#utility.yul\":909:911   */\n  0x1f\n    /* \"#utility.yul\":897:907   */\n  dup5\n    /* \"#utility.yul\":893:912   */\n  add\n    /* \"#utility.yul\":890:891   */\n  0x05\n    /* \"#utility.yul\":886:913   */\n  shr\n    /* \"#utility.yul\":880:884   */\n  dup2\n    /* \"#utility.yul\":876:914   */\n  add\n    /* \"#utility.yul\":945:949   */\n  0x20\n    /* \"#utility.yul\":933:943   */\n  dup6\n    /* \"#utility.yul\":930:950   */\n  lt\n    /* \"#utility.yul\":927:974   */\n  iszero\n  tag_97\n  jumpi\n  pop\n    /* \"#utility.yul\":968:972   */\n  dup1\n    /* \"#utility.yul\":927:974   */\ntag_97:\n    /* \"#utility.yul\":1023:1025   */\n  0x1f\n    /* \"#utility.yul\":1018:1021   */\n  dup5\n    /* \"#utility.yul\":1014:1026   */\n  add\n    /* \"#utility.yul\":1011:1012   */\n  0x05\n    /* \"#utility.yul\":1007:1027   */\n  shr\n    /* \"#utility.yul\":1001:1005   */\n  dup3\n    /* \"#utility.yul\":997:1028   */\n  add\n    /* \"#utility.yul\":987:1028   */\n  swap2\n  pop\n    /* \"#utility.yul\":1078:1159   */\ntag_98:\n    /* \"#utility.yul\":1096:1098   */\n  dup2\n    /* \"#utility.yul\":1089:1094   */\n  dup2\n    /* \"#utility.yul\":1086:1099   */\n  lt\n    /* \"#utility.yul\":1078:1159   */\n  iszero\n  tag_100\n  jumpi\n    /* \"#utility.yul\":1155:1156   */\n  0x00\n    /* \"#utility.yul\":1141:1157   */\n  dup2\n  sstore\n    /* \"#utility.yul\":1122:1123   */\n  0x01\n    /* \"#utility.yul\":1111:1124   */\n  add\n    /* \"#utility.yul\":1078:1159   */\n  jump(tag_98)\ntag_100:\n    /* \"#utility.yul\":1082:1085   */\n  pop\n  pop\n    /* \"#utility.yul\":748:1169   */\ntag_96:\n    /* \"#utility.yul\":657:1175   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1351:2650   */\ntag_10:\n    /* \"#utility.yul\":1471:1481   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1493:1523   */\n  dup2\n  gt\n    /* \"#utility.yul\":1490:1546   */\n  iszero\n  tag_104\n  jumpi\n    /* \"#utility.yul\":1526:1544   */\n  tag_104\n  tag_81\n  jump\t// in\ntag_104:\n    /* \"#utility.yul\":1555:1652   */\n  tag_105\n    /* \"#utility.yul\":1645:1651   */\n  dup2\n    /* \"#utility.yul\":1605:1643   */\n  tag_106\n    /* \"#utility.yul\":1637:1641   */\n  dup5\n    /* \"#utility.yul\":1631:1642   */\n  sload\n    /* \"#utility.yul\":1605:1643   */\n  tag_82\n  jump\t// in\ntag_106:\n    /* \"#utility.yul\":1599:1603   */\n  dup5\n    /* \"#utility.yul\":1555:1652   */\n  tag_84\n  jump\t// in\ntag_105:\n    /* \"#utility.yul\":1701:1705   */\n  0x20\n    /* \"#utility.yul\":1732:1734   */\n  0x1f\n    /* \"#utility.yul\":1721:1735   */\n  dup3\n  gt\n    /* \"#utility.yul\":1749:1750   */\n  0x01\n    /* \"#utility.yul\":1744:2393   */\n  dup2\n  eq\n  tag_108\n  jumpi\n    /* \"#utility.yul\":2437:2438   */\n  0x00\n    /* \"#utility.yul\":2454:2460   */\n  dup4\n    /* \"#utility.yul\":2451:2540   */\n  iszero\n  tag_109\n  jumpi\n  pop\n    /* \"#utility.yul\":2506:2525   */\n  dup5\n  dup3\n  add\n    /* \"#utility.yul\":2500:2526   */\n  mload\n    /* \"#utility.yul\":2451:2540   */\ntag_109:\n  not(0x00)\n    /* \"#utility.yul\":1308:1309   */\n  0x03\n    /* \"#utility.yul\":1304:1315   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1300:1324   */\n  shr\n    /* \"#utility.yul\":1296:1325   */\n  not\n    /* \"#utility.yul\":1286:1326   */\n  and\n    /* \"#utility.yul\":1332:1333   */\n  0x01\n    /* \"#utility.yul\":1328:1339   */\n  dup5\n  swap1\n  shl\n    /* \"#utility.yul\":1283:1340   */\n  or\n    /* \"#utility.yul\":2553:2634   */\n  dup5\n  sstore\n    /* \"#utility.yul\":1714:2644   */\n  jump(tag_100)\n    /* \"#utility.yul\":1744:2393   */\ntag_108:\n    /* \"#utility.yul\":604:605   */\n  0x00\n    /* \"#utility.yul\":597:611   */\n  dup5\n  dup2\n  mstore\n    /* \"#utility.yul\":641:645   */\n  0x20\n    /* \"#utility.yul\":628:646   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":1780:1800   */\n  dup6\n  and\n  swap2\n    /* \"#utility.yul\":1898:2120   */\ntag_112:\n    /* \"#utility.yul\":1912:1919   */\n  dup3\n    /* \"#utility.yul\":1909:1910   */\n  dup2\n    /* \"#utility.yul\":1906:1920   */\n  lt\n    /* \"#utility.yul\":1898:2120   */\n  iszero\n  tag_114\n  jumpi\n    /* \"#utility.yul\":1994:2013   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":1988:2014   */\n  mload\n    /* \"#utility.yul\":1973:2015   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2101:2105   */\n  0x20\n    /* \"#utility.yul\":2086:2106   */\n  swap5\n  dup6\n  add\n  swap5\n    /* \"#utility.yul\":2054:2055   */\n  0x01\n    /* \"#utility.yul\":2042:2056   */\n  swap1\n  swap3\n  add\n  swap2\n    /* \"#utility.yul\":1928:1940   */\n  add\n    /* \"#utility.yul\":1898:2120   */\n  jump(tag_112)\ntag_114:\n    /* \"#utility.yul\":1902:1905   */\n  pop\n    /* \"#utility.yul\":2148:2154   */\n  dup5\n    /* \"#utility.yul\":2139:2146   */\n  dup3\n    /* \"#utility.yul\":2136:2155   */\n  lt\n    /* \"#utility.yul\":2133:2334   */\n  iszero\n  tag_115\n  jumpi\n    /* \"#utility.yul\":2209:2228   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":2203:2229   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2292:2293   */\n  0x03\n    /* \"#utility.yul\":2288:2302   */\n  dup8\n  swap1\n  shl\n    /* \"#utility.yul\":2304:2307   */\n  0xf8\n    /* \"#utility.yul\":2284:2308   */\n  and\n    /* \"#utility.yul\":2280:2317   */\n  shr\n    /* \"#utility.yul\":2276:2318   */\n  not\n    /* \"#utility.yul\":2261:2319   */\n  and\n    /* \"#utility.yul\":2246:2320   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2133:2334   */\ntag_115:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2380:2381   */\n  0x01\n    /* \"#utility.yul\":2364:2378   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":2360:2382   */\n  add\n    /* \"#utility.yul\":2347:2383   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":1351:2650   */\n  jump\t// out\n    /* \"#utility.yul\":2863:2990   */\ntag_86:\n    /* \"#utility.yul\":2924:2934   */\n  0x4e487b71\n    /* \"#utility.yul\":2919:2922   */\n  0xe0\n    /* \"#utility.yul\":2915:2935   */\n  shl\n    /* \"#utility.yul\":2912:2913   */\n  0x00\n    /* \"#utility.yul\":2905:2936   */\n  mstore\n    /* \"#utility.yul\":2955:2959   */\n  0x11\n    /* \"#utility.yul\":2952:2953   */\n  0x04\n    /* \"#utility.yul\":2945:2960   */\n  mstore\n    /* \"#utility.yul\":2979:2983   */\n  0x24\n    /* \"#utility.yul\":2976:2977   */\n  0x00\n    /* \"#utility.yul\":2969:2984   */\n  revert\n    /* \"#utility.yul\":2995:3370   */\ntag_87:\n    /* \"#utility.yul\":3083:3084   */\n  0x01\n    /* \"#utility.yul\":3101:3106   */\n  dup2\n    /* \"#utility.yul\":3115:3364   */\ntag_119:\n    /* \"#utility.yul\":3136:3137   */\n  0x01\n    /* \"#utility.yul\":3126:3134   */\n  dup5\n    /* \"#utility.yul\":3123:3138   */\n  gt\n    /* \"#utility.yul\":3115:3364   */\n  iszero\n  tag_121\n  jumpi\n    /* \"#utility.yul\":3186:3190   */\n  dup1\n    /* \"#utility.yul\":3181:3184   */\n  dup6\n    /* \"#utility.yul\":3177:3191   */\n  div\n    /* \"#utility.yul\":3171:3175   */\n  dup2\n    /* \"#utility.yul\":3168:3192   */\n  gt\n    /* \"#utility.yul\":3165:3215   */\n  iszero\n  tag_123\n  jumpi\n    /* \"#utility.yul\":3195:3213   */\n  tag_123\n  tag_86\n  jump\t// in\ntag_123:\n    /* \"#utility.yul\":3245:3246   */\n  0x01\n    /* \"#utility.yul\":3235:3243   */\n  dup5\n    /* \"#utility.yul\":3231:3247   */\n  and\n    /* \"#utility.yul\":3228:3277   */\n  iszero\n  tag_124\n  jumpi\n    /* \"#utility.yul\":3259:3275   */\n  swap1\n  dup2\n  mul\n  swap1\n    /* \"#utility.yul\":3228:3277   */\ntag_124:\n    /* \"#utility.yul\":3342:3343   */\n  0x01\n    /* \"#utility.yul\":3338:3354   */\n  swap4\n  swap1\n  swap4\n  shr\n  swap3\n    /* \"#utility.yul\":3298:3313   */\n  dup1\n  mul\n    /* \"#utility.yul\":3115:3364   */\n  jump(tag_119)\ntag_121:\n    /* \"#utility.yul\":2995:3370   */\n  swap4\n  pop\n  swap4\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3375:4277   */\ntag_88:\n    /* \"#utility.yul\":3424:3429   */\n  0x00\n    /* \"#utility.yul\":3454:3462   */\n  dup3\n    /* \"#utility.yul\":3444:3524   */\n  tag_126\n  jumpi\n  pop\n    /* \"#utility.yul\":3495:3496   */\n  0x01\n    /* \"#utility.yul\":3509:3514   */\n  jump(tag_48)\n    /* \"#utility.yul\":3444:3524   */\ntag_126:\n    /* \"#utility.yul\":3543:3547   */\n  dup2\n    /* \"#utility.yul\":3533:3609   */\n  tag_127\n  jumpi\n  pop\n    /* \"#utility.yul\":3580:3581   */\n  0x00\n    /* \"#utility.yul\":3594:3599   */\n  jump(tag_48)\n    /* \"#utility.yul\":3533:3609   */\ntag_127:\n    /* \"#utility.yul\":3625:3629   */\n  dup2\n    /* \"#utility.yul\":3643:3644   */\n  0x01\n    /* \"#utility.yul\":3638:3697   */\n  dup2\n  eq\n  tag_129\n  jumpi\n    /* \"#utility.yul\":3711:3712   */\n  0x02\n    /* \"#utility.yul\":3706:3880   */\n  dup2\n  eq\n  tag_130\n  jumpi\n    /* \"#utility.yul\":3618:3880   */\n  jump(tag_128)\n    /* \"#utility.yul\":3638:3697   */\ntag_129:\n    /* \"#utility.yul\":3668:3669   */\n  0x01\n    /* \"#utility.yul\":3659:3669   */\n  swap2\n  pop\n    /* \"#utility.yul\":3682:3687   */\n  pop\n  jump(tag_48)\n    /* \"#utility.yul\":3706:3880   */\ntag_130:\n    /* \"#utility.yul\":3743:3746   */\n  0xff\n    /* \"#utility.yul\":3733:3741   */\n  dup5\n    /* \"#utility.yul\":3730:3747   */\n  gt\n    /* \"#utility.yul\":3727:3770   */\n  iszero\n  tag_132\n  jumpi\n    /* \"#utility.yul\":3750:3768   */\n  tag_132\n  tag_86\n  jump\t// in\ntag_132:\n  pop\n  pop\n    /* \"#utility.yul\":3806:3807   */\n  0x01\n    /* \"#utility.yul\":3792:3808   */\n  dup3\n  shl\n    /* \"#utility.yul\":3865:3870   */\n  jump(tag_48)\n    /* \"#utility.yul\":3618:3880   */\ntag_128:\n  pop\n    /* \"#utility.yul\":3964:3966   */\n  0x20\n    /* \"#utility.yul\":3954:3962   */\n  dup4\n    /* \"#utility.yul\":3951:3967   */\n  lt\n    /* \"#utility.yul\":3945:3948   */\n  0x0133\n    /* \"#utility.yul\":3939:3943   */\n  dup4\n    /* \"#utility.yul\":3936:3949   */\n  lt\n    /* \"#utility.yul\":3932:3968   */\n  and\n    /* \"#utility.yul\":3926:3928   */\n  0x4e\n    /* \"#utility.yul\":3916:3924   */\n  dup5\n    /* \"#utility.yul\":3913:3929   */\n  lt\n    /* \"#utility.yul\":3908:3910   */\n  0x0b\n    /* \"#utility.yul\":3902:3906   */\n  dup5\n    /* \"#utility.yul\":3899:3911   */\n  lt\n    /* \"#utility.yul\":3895:3930   */\n  and\n    /* \"#utility.yul\":3892:3969   */\n  or\n    /* \"#utility.yul\":3889:4092   */\n  iszero\n  tag_133\n  jumpi\n  pop\n    /* \"#utility.yul\":4001:4020   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":4077:4082   */\n  jump(tag_48)\n    /* \"#utility.yul\":3889:4092   */\ntag_133:\n    /* \"#utility.yul\":4124:4166   */\n  tag_134\n  not(0x00)\n    /* \"#utility.yul\":4149:4157   */\n  dup5\n    /* \"#utility.yul\":4143:4147   */\n  dup5\n    /* \"#utility.yul\":4124:4166   */\n  tag_87\n  jump\t// in\ntag_134:\n    /* \"#utility.yul\":4202:4208   */\n  dup1\n    /* \"#utility.yul\":4198:4199   */\n  0x00\n    /* \"#utility.yul\":4194:4200   */\n  not\n    /* \"#utility.yul\":4190:4209   */\n  div\n    /* \"#utility.yul\":4181:4188   */\n  dup3\n    /* \"#utility.yul\":4178:4210   */\n  gt\n    /* \"#utility.yul\":4175:4233   */\n  iszero\n  tag_136\n  jumpi\n    /* \"#utility.yul\":4213:4231   */\n  tag_136\n  tag_86\n  jump\t// in\ntag_136:\n    /* \"#utility.yul\":4251:4271   */\n  mul\n  swap4\n    /* \"#utility.yul\":3375:4277   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4282:4413   */\ntag_30:\n    /* \"#utility.yul\":4342:4347   */\n  0x00\n    /* \"#utility.yul\":4371:4407   */\n  tag_138\n    /* \"#utility.yul\":4398:4406   */\n  dup4\n    /* \"#utility.yul\":4392:4396   */\n  dup4\n    /* \"#utility.yul\":4371:4407   */\n  tag_88\n  jump\t// in\ntag_138:\n    /* \"#utility.yul\":4362:4407   */\n  swap4\n    /* \"#utility.yul\":4282:4413   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4418:4586   */\ntag_32:\n    /* \"#utility.yul\":4491:4500   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":4522:4531   */\n  dup2\n  iszero\n    /* \"#utility.yul\":4539:4554   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":4533:4555   */\n  dup5\n  eq\n    /* \"#utility.yul\":4519:4556   */\n  or\n    /* \"#utility.yul\":4509:4580   */\n  tag_48\n  jumpi\n    /* \"#utility.yul\":4560:4578   */\n  tag_48\n  tag_86\n  jump\t// in\n    /* \"#utility.yul\":4591:4719   */\ntag_37:\n    /* \"#utility.yul\":4658:4667   */\n  dup2\n  dup2\n  sub\n    /* \"#utility.yul\":4679:4690   */\n  dup2\n  dup2\n  gt\n    /* \"#utility.yul\":4676:4713   */\n  iszero\n  tag_48\n  jumpi\n    /* \"#utility.yul\":4693:4711   */\n  tag_48\n  tag_86\n  jump\t// in\n    /* \"#utility.yul\":5218:5636   */\ntag_65:\n    /* \"#utility.yul\":5367:5369   */\n  0x20\n    /* \"#utility.yul\":5356:5365   */\n  dup2\n    /* \"#utility.yul\":5349:5370   */\n  mstore\n    /* \"#utility.yul\":5330:5334   */\n  0x00\n    /* \"#utility.yul\":5399:5405   */\n  dup3\n    /* \"#utility.yul\":5393:5406   */\n  mload\n    /* \"#utility.yul\":5442:5448   */\n  dup1\n    /* \"#utility.yul\":5437:5439   */\n  0x20\n    /* \"#utility.yul\":5426:5435   */\n  dup5\n    /* \"#utility.yul\":5422:5440   */\n  add\n    /* \"#utility.yul\":5415:5449   */\n  mstore\n    /* \"#utility.yul\":5501:5507   */\n  dup1\n    /* \"#utility.yul\":5496:5498   */\n  0x20\n    /* \"#utility.yul\":5488:5494   */\n  dup6\n    /* \"#utility.yul\":5484:5499   */\n  add\n    /* \"#utility.yul\":5479:5481   */\n  0x40\n    /* \"#utility.yul\":5468:5477   */\n  dup6\n    /* \"#utility.yul\":5464:5482   */\n  add\n    /* \"#utility.yul\":5458:5508   */\n  mcopy\n    /* \"#utility.yul\":5557:5558   */\n  0x00\n    /* \"#utility.yul\":5552:5554   */\n  0x40\n    /* \"#utility.yul\":5543:5549   */\n  dup3\n    /* \"#utility.yul\":5532:5541   */\n  dup6\n    /* \"#utility.yul\":5528:5550   */\n  add\n    /* \"#utility.yul\":5524:5555   */\n  add\n    /* \"#utility.yul\":5517:5559   */\n  mstore\n    /* \"#utility.yul\":5627:5629   */\n  0x40\n    /* \"#utility.yul\":5620:5622   */\n  0x1f\n    /* \"#utility.yul\":5616:5623   */\n  not\n    /* \"#utility.yul\":5611:5613   */\n  0x1f\n    /* \"#utility.yul\":5603:5609   */\n  dup4\n    /* \"#utility.yul\":5599:5614   */\n  add\n    /* \"#utility.yul\":5595:5624   */\n  and\n    /* \"#utility.yul\":5584:5593   */\n  dup5\n    /* \"#utility.yul\":5580:5625   */\n  add\n    /* \"#utility.yul\":5576:5630   */\n  add\n    /* \"#utility.yul\":5568:5630   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":5218:5636   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5641:5938   */\ntag_67:\n    /* \"#utility.yul\":5759:5771   */\n  dup1\n  mload\n    /* \"#utility.yul\":5806:5810   */\n  0x20\n    /* \"#utility.yul\":5795:5811   */\n  dup1\n  dup4\n  add\n    /* \"#utility.yul\":5789:5812   */\n  mload\n  swap2\n    /* \"#utility.yul\":5759:5771   */\n  swap1\n    /* \"#utility.yul\":5824:5840   */\n  dup2\n  lt\n    /* \"#utility.yul\":5821:5932   */\n  iszero\n  tag_93\n  jumpi\n  not(0x00)\n    /* \"#utility.yul\":5898:5902   */\n  0x20\n    /* \"#utility.yul\":5894:5911   */\n  swap2\n  swap1\n  swap2\n  sub\n    /* \"#utility.yul\":5891:5892   */\n  0x03\n    /* \"#utility.yul\":5887:5912   */\n  shl\n    /* \"#utility.yul\":5883:5921   */\n  shl\n    /* \"#utility.yul\":5872:5922   */\n  and\n  swap2\n    /* \"#utility.yul\":5641:5938   */\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5943:6068   */\ntag_72:\n    /* \"#utility.yul\":6008:6017   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":6029:6039   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":6026:6062   */\n  iszero\n  tag_48\n  jumpi\n    /* \"#utility.yul\":6042:6060   */\n  tag_48\n  tag_86\n  jump\t// in\n    /* \"#utility.yul\":6423:6600   */\ntag_89:\n    /* \"contracts/CSDP.sol\":255:2107  contract CSDP is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xc029172d5cd7a4e945622d71e4d05cf85f0a1833f12eb0c55071cfced147417a\")\n  0x00\n  assignImmutable(\"0x29020f4f1a795a436f0f2bcf8515507a2763761ef5cef6a2514c12dd744d75b5\")\n  0x00\n  assignImmutable(\"0xab1d64b8ef755eff5932da88d3edeff579bcc60916bb91a53f15681d1de87c95\")\n  0x00\n  assignImmutable(\"0x2adf63c10752c0614458babdb0eb9c9a806122a008082e082449ac421023724f\")\n  0x00\n  assignImmutable(\"0xfc173d141b0b56ee0bf7dfecceca400d3c9686a8d708c0b3a6e19eb948e936a0\")\n  0x00\n  assignImmutable(\"0xa832f8a9983ce15820d2422e8730f190e63bbfe2f697ca100debebf99ab72bf8\")\n  0x00\n  assignImmutable(\"0x4573f5f1b837a8533275bdfe67b312d14235840d1b2ae2083669faa5812d511e\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/CSDP.sol\":255:2107  contract CSDP is ERC20, ERC20Permit, Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x7ecebe00\n      gt\n      tag_22\n      jumpi\n      dup1\n      0xa9059cbb\n      gt\n      tag_23\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xb8972db5\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0x7ecebe00\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x7ff9b596\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x3644e515\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x3ccfd60b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x6a61e5fc\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x06fdde03\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_6\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1779:1868  function name() public view virtual returns (string memory) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3998:4184  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_30\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      pop\n      tag_31\n      tag_32\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      mload(0x40)\n        /* \"#utility.yul\":1181:1195   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1174:1196   */\n      iszero\n        /* \"#utility.yul\":1156:1197   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1144:1146   */\n      0x20\n        /* \"#utility.yul\":1129:1147   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3998:4184  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_28\n        /* \"#utility.yul\":1016:1203   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2849:2946  function totalSupply() public view virtual returns (uint256) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2927:2939  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2849:2946  function totalSupply() public view virtual returns (uint256) {... */\n    tag_38:\n      mload(0x40)\n        /* \"#utility.yul\":1354:1379   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2849:2946  function totalSupply() public view virtual returns (uint256) {... */\n      tag_28\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4776:5020  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      tag_31\n      tag_44\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2707:2789  function decimals() public view virtual returns (uint8) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      pop\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2780:2782  18 */\n      0x12\n        /* \"#utility.yul\":1911:1947   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1899:1901   */\n      0x20\n        /* \"#utility.yul\":1884:1902   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2707:2789  function decimals() public view virtual returns (uint8) {... */\n      tag_28\n        /* \"#utility.yul\":1769:1953   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2659:2771  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_38\n      tag_55\n      jump\t// in\n        /* \"contracts/CSDP.sol\":1511:1664  function withdraw() public nonReentrant onlyOwner {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      stop\n        /* \"contracts/CSDP.sol\":1672:1796  function setTokenPrice(uint256 newPrice) public onlyOwner {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      pop\n      tag_59\n      tag_63\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3004:3120  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      tag_38\n      tag_68\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_68:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3095:3113  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3069:3076  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3095:3113  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3004:3120  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_59\n      tag_74\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2409:2552  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_38\n      tag_77\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n        /* \"contracts/CSDP.sol\":324:349  uint256 public tokenPrice */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      tag_38\n      sload(0x0a)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      pop\n      tag_85\n      tag_86\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      tag_28\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload(0x08)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3951:4002   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3939:3941   */\n      0x20\n        /* \"#utility.yul\":3924:3942   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      tag_28\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1981:2074  function symbol() public view virtual returns (string memory) {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      pop\n      tag_26\n      tag_96\n      jump\t// in\n        /* \"contracts/CSDP.sol\":1809:2104  function transfer(address to, uint256 value) override public nonReentrant returns (bool) {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_98\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_98:\n      pop\n      tag_31\n      tag_100\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_100:\n      tag_101\n      jump\t// in\n        /* \"contracts/CSDP.sol\":950:1503  function sendToken() external payable nonReentrant returns (uint256) {... */\n    tag_18:\n      tag_38\n      tag_104\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1683:2355  function permit(... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_106\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_106:\n      pop\n      tag_59\n      tag_108\n      calldatasize\n      0x04\n      tag_109\n      jump\t// in\n    tag_108:\n      tag_110\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3551:3691  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      tag_38\n      tag_113\n      calldatasize\n      0x04\n      tag_114\n      jump\t// in\n    tag_113:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3631:3638  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3668  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3684  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3551:3691  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_117\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_117:\n      pop\n      tag_59\n      tag_119\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_119:\n      tag_120\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1779:1868  function name() public view virtual returns (string memory) {... */\n    tag_27:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1824:1837  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1856:1861  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1849:1861  return _name */\n      dup1\n      sload\n      tag_122\n      swap1\n      tag_123\n      jump\t// in\n    tag_122:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_124\n      swap1\n      tag_123\n      jump\t// in\n    tag_124:\n      dup1\n      iszero\n      tag_125\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_126\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_125)\n    tag_126:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_127:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_127\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_125:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1779:1868  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3998:4184  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4071:4075  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4125:4156  _approve(owner, spender, value) */\n      tag_131\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4141:4148  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4150:4155  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4125:4133  _approve */\n      tag_132\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4125:4156  _approve(owner, spender, value) */\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4173:4177  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4166:4177  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3998:4184  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_128:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4776:5020  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4863:4867  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4919:4956  _spendAllowance(from, spender, value) */\n      tag_136\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4935:4939  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4950:4955  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4919:4934  _spendAllowance */\n      tag_137\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4919:4956  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_136:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4966:4992  _transfer(from, to, value) */\n      tag_138\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4976:4980  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4982:4984  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4986:4991  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4966:4975  _transfer */\n      tag_139\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4966:4992  _transfer(from, to, value) */\n      jump\t// in\n    tag_138:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5009:5013  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4776:5020  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2659:2771  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_55:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2718:2725  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2744:2764  _domainSeparatorV4() */\n      tag_142\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2744:2762  _domainSeparatorV4 */\n      tag_143\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2744:2764  _domainSeparatorV4() */\n      jump\t// in\n    tag_142:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2737:2764  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2659:2771  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/CSDP.sol\":1511:1664  function withdraw() public nonReentrant onlyOwner {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_145\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_146\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_145:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_148\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_149\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_148:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload(0x08)\n        /* \"contracts/CSDP.sol\":1572:1620  payable(owner()).transfer(address(this).balance) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/CSDP.sol\":1598:1619  address(this).balance */\n      selfbalance\n        /* \"contracts/CSDP.sol\":1572:1620  payable(owner()).transfer(address(this).balance) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"contracts/CSDP.sol\":1598:1619  address(this).balance */\n      dup6\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      dup9\n        /* \"contracts/CSDP.sol\":1572:1620  payable(owner()).transfer(address(this).balance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_153:\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_154\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2816  _status */\n      0x09\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n    tag_154:\n        /* \"contracts/CSDP.sol\":1511:1664  function withdraw() public nonReentrant onlyOwner {... */\n      jump\t// out\n        /* \"contracts/CSDP.sol\":1672:1796  function setTokenPrice(uint256 newPrice) public onlyOwner {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_149\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_157:\n        /* \"contracts/CSDP.sol\":1741:1751  tokenPrice */\n      0x0a\n        /* \"contracts/CSDP.sol\":1741:1762  tokenPrice = newPrice */\n      sstore\n        /* \"contracts/CSDP.sol\":1672:1796  function setTokenPrice(uint256 newPrice) public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_149\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_154\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_164\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2409:2552  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_78:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2500:2507  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:631  _nonces */\n      0x07\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2526:2545  super.nonces(owner) */\n      tag_128\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_86:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5242:5255  bytes1 fields */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5269:5287  string memory name */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5301:5322  string memory version */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5336:5351  uint256 chainId */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5365:5390  address verifyingContract */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5404:5416  bytes32 salt */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5430:5457  uint256[] memory extensions */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      tag_169\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5544  _EIP712Name */\n      tag_170\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      jump\t// in\n    tag_169:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      tag_171\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5574  _EIP712Version */\n      tag_172\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      jump\t// in\n    tag_171:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      shl(0xf8, 0x0f)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap12\n      swap4\n      swap11\n      pop\n      swap2\n      swap9\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      chainid\n      swap8\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n      swap7\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1981:2074  function symbol() public view virtual returns (string memory) {... */\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2028:2041  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2060:2067  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2053:2067  return _symbol */\n      dup1\n      sload\n      tag_122\n      swap1\n      tag_123\n      jump\t// in\n        /* \"contracts/CSDP.sol\":1809:2104  function transfer(address to, uint256 value) override public nonReentrant returns (bool) {... */\n    tag_101:\n        /* \"contracts/CSDP.sol\":1892:1896  bool */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_185\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_146\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_185:\n        /* \"contracts/CSDP.sol\":1909:1927  uint256 burnAmount */\n      0x00\n        /* \"contracts/CSDP.sol\":1942:1948  100000 */\n      0x0186a0\n        /* \"contracts/CSDP.sol\":1930:1939  value * 2 */\n      tag_187\n        /* \"contracts/CSDP.sol\":1930:1935  value */\n      dup5\n        /* \"contracts/CSDP.sol\":1938:1939  2 */\n      0x02\n        /* \"contracts/CSDP.sol\":1930:1939  value * 2 */\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"contracts/CSDP.sol\":1930:1948  value * 2 / 100000 */\n      tag_189\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_189:\n        /* \"contracts/CSDP.sol\":1909:1948  uint256 burnAmount = value * 2 / 100000 */\n      swap1\n      pop\n        /* \"contracts/CSDP.sol\":1970:1999  _burn(msg.sender, burnAmount) */\n      tag_191\n        /* \"contracts/CSDP.sol\":1976:1986  msg.sender */\n      caller\n        /* \"contracts/CSDP.sol\":1988:1998  burnAmount */\n      dup3\n        /* \"contracts/CSDP.sol\":1970:1975  _burn */\n      tag_192\n        /* \"contracts/CSDP.sol\":1970:1999  _burn(msg.sender, burnAmount) */\n      jump\t// in\n    tag_191:\n        /* \"contracts/CSDP.sol\":2058:2096  super.transfer(to, value - burnAmount) */\n      tag_193\n        /* \"contracts/CSDP.sol\":2073:2075  to */\n      dup5\n        /* \"contracts/CSDP.sol\":2077:2095  value - burnAmount */\n      tag_194\n        /* \"contracts/CSDP.sol\":2085:2095  burnAmount */\n      dup4\n        /* \"contracts/CSDP.sol\":2077:2082  value */\n      dup7\n        /* \"contracts/CSDP.sol\":2077:2095  value - burnAmount */\n      tag_195\n      jump\t// in\n    tag_194:\n        /* \"contracts/CSDP.sol\":2058:2072  super.transfer */\n      tag_196\n        /* \"contracts/CSDP.sol\":2058:2096  super.transfer(to, value - burnAmount) */\n      jump\t// in\n    tag_193:\n        /* \"contracts/CSDP.sol\":2051:2096  return super.transfer(to, value - burnAmount) */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2303:2323  _nonReentrantAfter() */\n      tag_128\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2816  _status */\n      0x09\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2629:2838  function _nonReentrantAfter() private {... */\n      jump\n        /* \"contracts/CSDP.sol\":950:1503  function sendToken() external payable nonReentrant returns (uint256) {... */\n    tag_104:\n        /* \"contracts/CSDP.sol\":1010:1017  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      tag_199\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2280  _nonReentrantBefore */\n      tag_146\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2261:2282  _nonReentrantBefore() */\n      jump\t// in\n    tag_199:\n        /* \"contracts/CSDP.sol\":1050:1051  0 */\n      0x00\n        /* \"contracts/CSDP.sol\":1038:1047  msg.value */\n      callvalue\n        /* \"contracts/CSDP.sol\":1038:1051  msg.value > 0 */\n      gt\n        /* \"contracts/CSDP.sol\":1030:1089  require(msg.value > 0, \"You must send Ether to get tokens\") */\n      tag_201\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6565:6567   */\n      0x20\n        /* \"contracts/CSDP.sol\":1030:1089  require(msg.value > 0, \"You must send Ether to get tokens\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6547:6568   */\n      mstore\n        /* \"#utility.yul\":6604:6606   */\n      0x21\n        /* \"#utility.yul\":6584:6602   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6577:6607   */\n      mstore\n        /* \"#utility.yul\":6643:6677   */\n      0x596f75206d7573742073656e6420457468657220746f2067657420746f6b656e\n        /* \"#utility.yul\":6623:6641   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6616:6678   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":6694:6712   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6687:6718   */\n      mstore\n        /* \"#utility.yul\":6735:6754   */\n      0x84\n      add\n        /* \"contracts/CSDP.sol\":1030:1089  require(msg.value > 0, \"You must send Ether to get tokens\") */\n    tag_202:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_201:\n        /* \"contracts/CSDP.sol\":1110:1130  uint256 amountToMint */\n      0x00\n        /* \"contracts/CSDP.sol\":1145:1155  tokenPrice */\n      sload(0x0a)\n        /* \"contracts/CSDP.sol\":1133:1142  msg.value */\n      callvalue\n        /* \"contracts/CSDP.sol\":1133:1155  msg.value / tokenPrice */\n      tag_204\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_204:\n        /* \"contracts/CSDP.sol\":1133:1162  msg.value / tokenPrice * 1000 */\n      tag_205\n      swap1\n        /* \"contracts/CSDP.sol\":1158:1162  1000 */\n      0x03e8\n        /* \"contracts/CSDP.sol\":1133:1162  msg.value / tokenPrice * 1000 */\n      tag_188\n      jump\t// in\n    tag_205:\n        /* \"contracts/CSDP.sol\":1110:1162  uint256 amountToMint = msg.value / tokenPrice * 1000 */\n      swap1\n      pop\n        /* \"contracts/CSDP.sol\":1258:1259  0 */\n      0x00\n        /* \"contracts/CSDP.sol\":1239:1255  totalTokenSupply */\n      sload(0x0b)\n        /* \"contracts/CSDP.sol\":1239:1259  totalTokenSupply > 0 */\n      gt\n        /* \"contracts/CSDP.sol\":1231:1292  require(totalTokenSupply > 0, \"No more tokens can be minted\") */\n      tag_206\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6967:6969   */\n      0x20\n        /* \"contracts/CSDP.sol\":1231:1292  require(totalTokenSupply > 0, \"No more tokens can be minted\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6949:6970   */\n      mstore\n        /* \"#utility.yul\":7006:7008   */\n      0x1c\n        /* \"#utility.yul\":6986:7004   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6979:7009   */\n      mstore\n        /* \"#utility.yul\":7045:7075   */\n      0x4e6f206d6f726520746f6b656e732063616e206265206d696e74656400000000\n        /* \"#utility.yul\":7025:7043   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7018:7076   */\n      mstore\n        /* \"#utility.yul\":7093:7111   */\n      0x64\n      add\n        /* \"contracts/CSDP.sol\":1231:1292  require(totalTokenSupply > 0, \"No more tokens can be minted\") */\n      tag_202\n        /* \"#utility.yul\":6765:7117   */\n      jump\n        /* \"contracts/CSDP.sol\":1231:1292  require(totalTokenSupply > 0, \"No more tokens can be minted\") */\n    tag_206:\n        /* \"contracts/CSDP.sol\":1373:1385  amountToMint */\n      dup1\n        /* \"contracts/CSDP.sol\":1353:1369  totalTokenSupply */\n      0x0b\n      0x00\n        /* \"contracts/CSDP.sol\":1353:1385  totalTokenSupply -= amountToMint */\n      dup3\n      dup3\n      sload\n      tag_209\n      swap2\n      swap1\n      tag_195\n      jump\t// in\n    tag_209:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contracts/CSDP.sol\":1396:1427  _mint(msg.sender, amountToMint) */\n      tag_210\n      swap1\n      pop\n        /* \"contracts/CSDP.sol\":1402:1412  msg.sender */\n      caller\n        /* \"contracts/CSDP.sol\":1414:1426  amountToMint */\n      dup3\n        /* \"contracts/CSDP.sol\":1396:1401  _mint */\n      tag_211\n        /* \"contracts/CSDP.sol\":1396:1427  _mint(msg.sender, amountToMint) */\n      jump\t// in\n    tag_210:\n      pop\n      pop\n        /* \"contracts/CSDP.sol\":1484:1494  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3069:3076  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3095:3113  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2816  _status */\n      0x09\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/CSDP.sol\":950:1503  function sendToken() external payable nonReentrant returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1683:2355  function permit(... */\n    tag_110:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1904:1912  deadline */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1886:1901  block.timestamp */\n      timestamp\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1886:1912  block.timestamp > deadline */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1882:1979  if (block.timestamp > deadline) {... */\n      iszero\n      tag_215\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1935:1968  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      shl(0xe1, 0x313c8981)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1935:1968  ERC2612ExpiredSignature(deadline) */\n      tag_202\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1882:1979  if (block.timestamp > deadline) {... */\n    tag_215:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1989:2007  bytes32 structHash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1024:1119  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2048:2053  owner */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2055:2062  spender */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2064:2069  value */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2071:2087  _useNonce(owner) */\n      tag_217\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2081:2086  owner */\n      dup13\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      and\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":819:826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x07\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1137  _nonces[owner]++ */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":759:1154  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2071:2087  _useNonce(owner) */\n    tag_217:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2020:2098  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":7409:7434   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7470:7502   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":7450:7468   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":7443:7503   */\n      mstore\n        /* \"#utility.yul\":7539:7571   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":7519:7537   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":7512:7572   */\n      mstore\n        /* \"#utility.yul\":7588:7606   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":7581:7615   */\n      mstore\n        /* \"#utility.yul\":7631:7650   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":7624:7659   */\n      mstore\n        /* \"#utility.yul\":7675:7694   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":7668:7703   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":7381:7400   */\n      0xe0\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2020:2098  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2010:2099  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1989:2099  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2110:2122  bytes32 hash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2125:2153  _hashTypedDataV4(structHash) */\n      tag_221\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2142:2152  structHash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2125:2141  _hashTypedDataV4 */\n      tag_222\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2125:2153  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2110:2153  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2164:2178  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2181:2209  ECDSA.recover(hash, v, r, s) */\n      tag_223\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2195:2199  hash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2201:2202  v */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2204:2205  r */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2207:2208  s */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2181:2194  ECDSA.recover */\n      tag_224\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2181:2209  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2164:2209  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2233:2238  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2223:2238  signer != owner */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2223:2229  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2223:2238  signer != owner */\n      and\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2219:2307  if (signer != owner) {... */\n      tag_225\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2261:2296  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      shl(0xe1, 0x25c00723)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7906:7938   */\n      dup1\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2261:2296  ERC2612InvalidSigner(signer, owner) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":7888:7939   */\n      mstore\n        /* \"#utility.yul\":7975:8007   */\n      dup12\n      and\n        /* \"#utility.yul\":7955:7973   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7948:8008   */\n      mstore\n        /* \"#utility.yul\":7861:7879   */\n      0x44\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2261:2296  ERC2612InvalidSigner(signer, owner) */\n      tag_202\n        /* \"#utility.yul\":7714:8014   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2219:2307  if (signer != owner) {... */\n    tag_225:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2317:2348  _approve(owner, spender, value) */\n      tag_228\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2326:2331  owner */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2333:2340  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2342:2347  value */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2317:2325  _approve */\n      tag_132\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2317:2348  _approve(owner, spender, value) */\n      jump\t// in\n    tag_228:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1872:2355  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1683:2355  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_120:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_231\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_149\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_231:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_233\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_233:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_235\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_164\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8726:8854  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_132:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8810:8847  _approve(owner, spender, value, true) */\n      tag_238\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8819:8824  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8826:8833  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8835:8840  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8842:8846  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8810:8818  _approve */\n      tag_239\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8810:8847  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_238:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8726:8854  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10415:10892  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_137:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10514:10538  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3668  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3675  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3657:3684  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10580:10617  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10576:10886  if (currentAllowance != type(uint256).max) {... */\n      tag_246\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10656:10661  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10637:10653  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10637:10661  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10633:10763  if (currentAllowance < value) {... */\n      iszero\n      tag_243\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10688:10748  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8239:8271   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10688:10748  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8221:8272   */\n      mstore\n        /* \"#utility.yul\":8288:8306   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":8281:8315   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":8331:8349   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":8324:8358   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":8194:8212   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10688:10748  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_202\n        /* \"#utility.yul\":8019:8364   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10633:10763  if (currentAllowance < value) {... */\n    tag_243:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10804:10861  _approve(owner, spender, currentAllowance - value, false) */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10813:10818  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10820:10827  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10848:10853  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10829:10845  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10829:10853  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10855:10860  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10804:10812  _approve */\n      tag_239\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10804:10861  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_246:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10892  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10415:10892  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5393:5693  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5476:5494  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5472:5558  if (from == address(0)) {... */\n      tag_248\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5517:5547  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5544:5545  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5517:5547  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5517:5547  ERC20InvalidSender(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5472:5558  if (from == address(0)) {... */\n    tag_248:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5571:5587  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5567:5653  if (to == address(0)) {... */\n      tag_250\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5610:5642  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5639:5640  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5610:5642  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5610:5642  ERC20InvalidReceiver(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5567:5653  if (to == address(0)) {... */\n    tag_250:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5686  _update(from, to, value) */\n      tag_238\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5670:5674  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5676:5678  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5680:5685  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5669  _update */\n      tag_253\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5686  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_143:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3898:3905  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0xfc173d141b0b56ee0bf7dfecceca400d3c9686a8d708c0b3a6e19eb948e936a0\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_255\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      immutable(\"0xa832f8a9983ce15820d2422e8730f190e63bbfe2f697ca100debebf99ab72bf8\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_255:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_256\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0x4573f5f1b837a8533275bdfe67b312d14235840d1b2ae2083669faa5812d511e\")\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_256:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4067:4090  _buildDomainSeparator() */\n      tag_142\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":9118:9143   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0x2adf63c10752c0614458babdb0eb9c9a806122a008082e082449ac421023724f\")\n        /* \"#utility.yul\":9159:9177   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":9152:9186   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0xab1d64b8ef755eff5932da88d3edeff579bcc60916bb91a53f15681d1de87c95\")\n        /* \"#utility.yul\":9202:9220   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":9195:9229   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"#utility.yul\":9245:9263   */\n      0x80\n      dup3\n      add\n        /* \"#utility.yul\":9238:9272   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n      address\n        /* \"#utility.yul\":9288:9307   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":9281:9342   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":9090:9109   */\n      0xc0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_146:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      sload(0x09)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      sub\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_261\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8571:8573   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8553:8574   */\n      mstore\n        /* \"#utility.yul\":8610:8612   */\n      0x1f\n        /* \"#utility.yul\":8590:8608   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8583:8613   */\n      mstore\n        /* \"#utility.yul\":8649:8682   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":8629:8647   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8622:8683   */\n      mstore\n        /* \"#utility.yul\":8700:8718   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_202\n        /* \"#utility.yul\":8369:8724   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2460:2523  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_261:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2605  _status */\n      0x09\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2598:2616  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_149:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_154\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_164:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x08\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6021:6147  function _EIP712Name() internal view returns (string memory) {... */\n    tag_170:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6067:6080  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_142\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0x29020f4f1a795a436f0f2bcf8515507a2763761ef5cef6a2514c12dd744d75b5\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6126:6139  _nameFallback */\n      0x05\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6125  _name.toStringWithFallback */\n      tag_275\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6473:6608  function _EIP712Version() internal view returns (string memory) {... */\n    tag_172:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6522:6535  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_142\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0xc029172d5cd7a4e945622d71e4d05cf85f0a1833f12eb0c55071cfced147417a\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x06\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6583  _version.toStringWithFallback */\n      tag_275\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7984:8190  function _burn(address account, uint256 value) internal {... */\n    tag_192:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8075  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8050:8139  if (account == address(0)) {... */\n      tag_279\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8098:8128  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8125:8126  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8098:8128  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8098:8128  ERC20InvalidSender(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8050:8139  if (account == address(0)) {... */\n    tag_279:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8148:8183  _update(account, address(0), value) */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8156:8163  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8173:8174  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8177:8182  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8148:8155  _update */\n      tag_253\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8148:8183  _update(account, address(0), value) */\n      jump\t// in\n    tag_281:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7984:8190  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3315:3493  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_196:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3388  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3438:3465  _transfer(owner, to, value) */\n      tag_131\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3455:3457  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3459:3464  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3438:3447  _transfer */\n      tag_139\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3438:3465  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7458:7666  function _mint(address account, uint256 value) internal {... */\n    tag_211:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7528:7549  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7524:7615  if (account == address(0)) {... */\n      tag_286\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7572:7604  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7601:7602  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7572:7604  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7572:7604  ERC20InvalidReceiver(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7524:7615  if (account == address(0)) {... */\n    tag_286:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7624:7659  _update(address(0), account, value) */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7640:7641  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7644:7651  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7653:7658  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7624:7631  _update */\n      tag_253\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7624:7659  _update(address(0), account, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4994:5001  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5020:5086  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_128\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_292\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5071  _domainSeparatorV4 */\n      tag_143\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      jump\t// in\n    tag_292:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5075:5085  structHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3501:3505  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3495:3506  mload(0x40) */\n      mload\n      shl(0xf0, 0x1901)\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3519:3542  mstore(ptr, hex\"19_01\") */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3571:3575  0x02 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3562:3576  add(ptr, 0x02) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3555:3594  mstore(add(ptr, 0x02), domainSeparator) */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3623:3627  0x22 */\n      0x22\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3614:3628  add(ptr, 0x22) */\n      dup3\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3607:3641  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3679:3683  0x42 */\n      0x42\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3664:3684  keccak256(ptr, 0x42) */\n      swap1\n      keccak256\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3326:3700  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6887:7147  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_224:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6972:6979  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6992:7009  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7011:7029  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7031:7047  bytes32 errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7051:7076  tryRecover(hash, v, r, s) */\n      tag_295\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7062:7066  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7068:7069  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7071:7072  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7074:7075  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7051:7061  tryRecover */\n      tag_296\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7051:7076  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_295:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6991:7076  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7086:7114  _throwError(error, errorArg) */\n      tag_297\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7098:7103  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7105:7113  errorArg */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7086:7097  _throwError */\n      tag_298\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7086:7114  _throwError(error, errorArg) */\n      jump\t// in\n    tag_297:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7131:7140  recovered */\n      swap1\n      swap7\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6887:7147  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9701:10133  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_239:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9813:9832  owner == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9809:9898  if (owner == address(0)) {... */\n      tag_300\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9855:9887  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9884:9885  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9855:9887  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9855:9887  ERC20InvalidApprover(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9809:9898  if (owner == address(0)) {... */\n    tag_300:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9911:9932  spender == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9907:9997  if (spender == address(0)) {... */\n      tag_302\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9955:9986  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9983:9984  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9955:9986  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9955:9986  ERC20InvalidSpender(address(0)) */\n      tag_202\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9907:9997  if (spender == address(0)) {... */\n    tag_302:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10006:10024  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10006:10017  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10006:10024  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10006:10033  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10006:10041  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10051:10127  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_246\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10101:10108  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10085:10116  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10094:10099  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10085:10116  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10110:10115  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10085:10116  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_305\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10085:10116  Approval(owner, spender, value) */\n    tag_305:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9701:10133  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6008:7115  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_253:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6097:6115  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6093:6633  if (from == address(0)) {... */\n      tag_307\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6249:6254  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6233:6245  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6233:6254  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_308\n      swap2\n      swap1\n      tag_309\n      jump\t// in\n    tag_308:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6093:6633  if (from == address(0)) {... */\n      tag_310\n      swap1\n      pop\n      jump\n    tag_307:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6307:6322  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6285:6304  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6307:6322  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6340:6359  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6336:6451  if (fromBalance < value) {... */\n      iszero\n      tag_311\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6386:6436  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8239:8271   */\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6386:6436  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8221:8272   */\n      mstore\n        /* \"#utility.yul\":8288:8306   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":8281:8315   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":8331:8349   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":8324:8358   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":8194:8212   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6386:6436  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_202\n        /* \"#utility.yul\":8019:8364   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6336:6451  if (fromBalance < value) {... */\n    tag_311:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6586  _balances[from] */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6580  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6586  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6589:6608  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6571:6608  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6093:6633  if (from == address(0)) {... */\n    tag_310:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6647:6663  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6643:7068  if (to == address(0)) {... */\n      tag_313\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6810:6822  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6810:6831  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6643:7068  if (to == address(0)) {... */\n      jump(tag_314)\n    tag_313:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7034  _balances[to] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7030  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7034  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7021:7043  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6643:7068  if (to == address(0)) {... */\n    tag_314:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7098:7100  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7092:7096  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7102:7107  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n      mload(0x40)\n      tag_315\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7083:7108  Transfer(from, to, value) */\n    tag_315:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6008:7115  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3358:3625  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_275:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3452:3465  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3481:3527  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup4\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3477:3619  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_320\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3550:3565  toString(value) */\n      tag_321\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3559:3564  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3550:3558  toString */\n      tag_322\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3550:3565  toString(value) */\n      jump\t// in\n    tag_321:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3543:3565  return toString(value) */\n      swap1\n      pop\n      jump(tag_128)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3477:3619  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_320:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3603:3608  store */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3596:3608  return store */\n      dup1\n      sload\n      tag_324\n      swap1\n      tag_123\n      jump\t// in\n    tag_324:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_325\n      swap1\n      tag_123\n      jump\t// in\n    tag_325:\n      dup1\n      iszero\n      tag_326\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_327\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_326)\n    tag_327:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_328:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_328\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_326:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      jump(tag_128)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5203:6754  function tryRecover(... */\n    tag_296:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5329:5346  address recovered */\n      0x00\n      dup1\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6283:6349  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6270:6349  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6266:6430  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_331\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6381:6382  0 */\n      0x00\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6385:6415  RecoverError.InvalidSignatureS */\n      0x03\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6417:6418  s */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6365:6419  return (address(0), RecoverError.InvalidSignatureS, s) */\n      jump(tag_330)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6266:6430  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_331:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6541:6565  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6524:6538  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6541:6565  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":9580:9605   */\n      dup11\n      swap1\n      mstore\n        /* \"#utility.yul\":9653:9657   */\n      0xff\n        /* \"#utility.yul\":9641:9658   */\n      dup10\n      and\n        /* \"#utility.yul\":9621:9639   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":9614:9659   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":9675:9693   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":9668:9702   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":9718:9736   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":9711:9745   */\n      dup7\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6541:6565  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":9552:9571   */\n      0xa0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6541:6565  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_335\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_335:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6579:6599  signer == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6575:6688  if (signer == address(0)) {... */\n      tag_336\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6631:6632  0 */\n      0x00\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6635:6664  RecoverError.InvalidSignature */\n      0x01\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6631:6632  0 */\n      dup3\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6615:6677  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      jump(tag_330)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6575:6688  if (signer == address(0)) {... */\n    tag_336:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6706:6712  signer */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6714:6734  RecoverError.NoError */\n      0x00\n      swap2\n      pop\n      dup2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5203:6754  function tryRecover(... */\n    tag_330:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7280:7812  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_298:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7375:7395  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7366:7371  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7366:7395  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_342\n      jumpi\n      tag_342\n      tag_340\n      jump\t// in\n    tag_342:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7362:7806  if (error == RecoverError.NoError) {... */\n      tag_343\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7280:7812  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7362:7806  if (error == RecoverError.NoError) {... */\n    tag_343:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7471:7500  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7462:7467  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7462:7500  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_348\n      jumpi\n      tag_348\n      tag_340\n      jump\t// in\n    tag_348:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7458:7806  if (error == RecoverError.InvalidSignature) {... */\n      tag_349\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7523:7546  ECDSAInvalidSignature() */\n      mload(0x40)\n      shl(0xe0, 0xf645eedf)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7458:7806  if (error == RecoverError.InvalidSignature) {... */\n    tag_349:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7576:7611  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7567:7572  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7567:7611  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_354\n      jumpi\n      tag_354\n      tag_340\n      jump\t// in\n    tag_354:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7563:7806  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_355\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7634:7680  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      shl(0xe0, 0xfce698f7)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7634:7680  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      tag_202\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7563:7806  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_355:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7710:7740  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7701:7706  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7701:7740  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_361\n      jumpi\n      tag_361\n      tag_340\n      jump\t// in\n    tag_361:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7697:7806  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_281\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7763:7795  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      shl(0xe2, 0x35e2f383)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7763:7795  ECDSAInvalidSignatureS(errorArg) */\n      tag_202\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2456  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_322:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2137:2150  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2173  uint256 len */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      tag_365\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2187:2191  sstr */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2186  byteLength */\n      tag_366\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      jump\t// in\n    tag_365:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      dup1\n      dup3\n      mstore\n      dup2\n      dup4\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2192  uint256 len = byteLength(sstr) */\n      swap2\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2280:2297  string memory str */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      swap1\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2363:2379  mstore(str, len) */\n      swap2\n      dup3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2408:2412  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2399:2413  add(str, 0x20) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2392:2420  mstore(add(str, 0x20), sstr) */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2363:2379  mstore(str, len) */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2456  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2528:2773  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_366:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2589:2596  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2661:2665  0xFF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2625:2665  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2688:2690  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2679:2690  result > 31 */\n      dup2\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2675:2744  if (result > 31) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2713:2733  InvalidShortString() */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:303   */\n    tag_372:\n        /* \"#utility.yul\":56:59   */\n      0x00\n        /* \"#utility.yul\":94:99   */\n      dup2\n        /* \"#utility.yul\":88:100   */\n      mload\n        /* \"#utility.yul\":121:127   */\n      dup1\n        /* \"#utility.yul\":116:119   */\n      dup5\n        /* \"#utility.yul\":109:128   */\n      mstore\n        /* \"#utility.yul\":177:183   */\n      dup1\n        /* \"#utility.yul\":170:174   */\n      0x20\n        /* \"#utility.yul\":163:168   */\n      dup5\n        /* \"#utility.yul\":159:175   */\n      add\n        /* \"#utility.yul\":152:156   */\n      0x20\n        /* \"#utility.yul\":147:150   */\n      dup7\n        /* \"#utility.yul\":143:157   */\n      add\n        /* \"#utility.yul\":137:184   */\n      mcopy\n        /* \"#utility.yul\":229:230   */\n      0x00\n        /* \"#utility.yul\":222:226   */\n      0x20\n        /* \"#utility.yul\":213:219   */\n      dup3\n        /* \"#utility.yul\":208:211   */\n      dup7\n        /* \"#utility.yul\":204:220   */\n      add\n        /* \"#utility.yul\":200:227   */\n      add\n        /* \"#utility.yul\":193:231   */\n      mstore\n        /* \"#utility.yul\":292:296   */\n      0x20\n        /* \"#utility.yul\":285:287   */\n      0x1f\n        /* \"#utility.yul\":281:288   */\n      not\n        /* \"#utility.yul\":276:278   */\n      0x1f\n        /* \"#utility.yul\":268:274   */\n      dup4\n        /* \"#utility.yul\":264:279   */\n      add\n        /* \"#utility.yul\":260:289   */\n      and\n        /* \"#utility.yul\":255:258   */\n      dup6\n        /* \"#utility.yul\":251:290   */\n      add\n        /* \"#utility.yul\":247:297   */\n      add\n        /* \"#utility.yul\":240:297   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:303   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":308:528   */\n    tag_29:\n        /* \"#utility.yul\":457:459   */\n      0x20\n        /* \"#utility.yul\":446:455   */\n      dup2\n        /* \"#utility.yul\":439:460   */\n      mstore\n        /* \"#utility.yul\":420:424   */\n      0x00\n        /* \"#utility.yul\":477:522   */\n      tag_378\n        /* \"#utility.yul\":518:520   */\n      0x20\n        /* \"#utility.yul\":507:516   */\n      dup4\n        /* \"#utility.yul\":503:521   */\n      add\n        /* \"#utility.yul\":495:501   */\n      dup5\n        /* \"#utility.yul\":477:522   */\n      tag_372\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":469:522   */\n      swap4\n        /* \"#utility.yul\":308:528   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":533:706   */\n    tag_373:\n        /* \"#utility.yul\":601:621   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":650:681   */\n      dup2\n      and\n        /* \"#utility.yul\":640:682   */\n      dup2\n      eq\n        /* \"#utility.yul\":630:700   */\n      tag_380\n      jumpi\n        /* \"#utility.yul\":696:697   */\n      0x00\n        /* \"#utility.yul\":693:694   */\n      dup1\n        /* \"#utility.yul\":686:698   */\n      revert\n        /* \"#utility.yul\":630:700   */\n    tag_380:\n        /* \"#utility.yul\":533:706   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":711:1011   */\n    tag_33:\n        /* \"#utility.yul\":779:785   */\n      0x00\n        /* \"#utility.yul\":787:793   */\n      dup1\n        /* \"#utility.yul\":840:842   */\n      0x40\n        /* \"#utility.yul\":828:837   */\n      dup4\n        /* \"#utility.yul\":819:826   */\n      dup6\n        /* \"#utility.yul\":815:838   */\n      sub\n        /* \"#utility.yul\":811:843   */\n      slt\n        /* \"#utility.yul\":808:860   */\n      iszero\n      tag_382\n      jumpi\n        /* \"#utility.yul\":856:857   */\n      0x00\n        /* \"#utility.yul\":853:854   */\n      dup1\n        /* \"#utility.yul\":846:858   */\n      revert\n        /* \"#utility.yul\":808:860   */\n    tag_382:\n        /* \"#utility.yul\":879:908   */\n      tag_383\n        /* \"#utility.yul\":898:907   */\n      dup4\n        /* \"#utility.yul\":879:908   */\n      tag_373\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":869:908   */\n      swap5\n        /* \"#utility.yul\":977:979   */\n      0x20\n        /* \"#utility.yul\":962:980   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":949:981   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":711:1011   */\n      jump\t// out\n        /* \"#utility.yul\":1390:1764   */\n    tag_45:\n        /* \"#utility.yul\":1467:1473   */\n      0x00\n        /* \"#utility.yul\":1475:1481   */\n      dup1\n        /* \"#utility.yul\":1483:1489   */\n      0x00\n        /* \"#utility.yul\":1536:1538   */\n      0x60\n        /* \"#utility.yul\":1524:1533   */\n      dup5\n        /* \"#utility.yul\":1515:1522   */\n      dup7\n        /* \"#utility.yul\":1511:1534   */\n      sub\n        /* \"#utility.yul\":1507:1539   */\n      slt\n        /* \"#utility.yul\":1504:1556   */\n      iszero\n      tag_387\n      jumpi\n        /* \"#utility.yul\":1552:1553   */\n      0x00\n        /* \"#utility.yul\":1549:1550   */\n      dup1\n        /* \"#utility.yul\":1542:1554   */\n      revert\n        /* \"#utility.yul\":1504:1556   */\n    tag_387:\n        /* \"#utility.yul\":1575:1604   */\n      tag_388\n        /* \"#utility.yul\":1594:1603   */\n      dup5\n        /* \"#utility.yul\":1575:1604   */\n      tag_373\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":1565:1604   */\n      swap3\n      pop\n        /* \"#utility.yul\":1623:1661   */\n      tag_389\n        /* \"#utility.yul\":1657:1659   */\n      0x20\n        /* \"#utility.yul\":1646:1655   */\n      dup6\n        /* \"#utility.yul\":1642:1660   */\n      add\n        /* \"#utility.yul\":1623:1661   */\n      tag_373\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":1390:1764   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1613:1661   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1730:1732   */\n      0x40\n        /* \"#utility.yul\":1715:1733   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1702:1734   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1390:1764   */\n      jump\t// out\n        /* \"#utility.yul\":2140:2366   */\n    tag_64:\n        /* \"#utility.yul\":2199:2205   */\n      0x00\n        /* \"#utility.yul\":2252:2254   */\n      0x20\n        /* \"#utility.yul\":2240:2249   */\n      dup3\n        /* \"#utility.yul\":2231:2238   */\n      dup5\n        /* \"#utility.yul\":2227:2250   */\n      sub\n        /* \"#utility.yul\":2223:2255   */\n      slt\n        /* \"#utility.yul\":2220:2272   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":2268:2269   */\n      0x00\n        /* \"#utility.yul\":2265:2266   */\n      dup1\n        /* \"#utility.yul\":2258:2270   */\n      revert\n        /* \"#utility.yul\":2220:2272   */\n    tag_393:\n      pop\n        /* \"#utility.yul\":2313:2336   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2140:2366   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2371:2557   */\n    tag_69:\n        /* \"#utility.yul\":2430:2436   */\n      0x00\n        /* \"#utility.yul\":2483:2485   */\n      0x20\n        /* \"#utility.yul\":2471:2480   */\n      dup3\n        /* \"#utility.yul\":2462:2469   */\n      dup5\n        /* \"#utility.yul\":2458:2481   */\n      sub\n        /* \"#utility.yul\":2454:2486   */\n      slt\n        /* \"#utility.yul\":2451:2503   */\n      iszero\n      tag_395\n      jumpi\n        /* \"#utility.yul\":2499:2500   */\n      0x00\n        /* \"#utility.yul\":2496:2497   */\n      dup1\n        /* \"#utility.yul\":2489:2501   */\n      revert\n        /* \"#utility.yul\":2451:2503   */\n    tag_395:\n        /* \"#utility.yul\":2522:2551   */\n      tag_378\n        /* \"#utility.yul\":2541:2550   */\n      dup3\n        /* \"#utility.yul\":2522:2551   */\n      tag_373\n      jump\t// in\n        /* \"#utility.yul\":2562:3800   */\n    tag_88:\n        /* \"#utility.yul\":2968:2971   */\n      0xff\n        /* \"#utility.yul\":2963:2966   */\n      0xf8\n        /* \"#utility.yul\":2959:2972   */\n      shl\n        /* \"#utility.yul\":2951:2957   */\n      dup9\n        /* \"#utility.yul\":2947:2973   */\n      and\n        /* \"#utility.yul\":2936:2945   */\n      dup2\n        /* \"#utility.yul\":2929:2974   */\n      mstore\n        /* \"#utility.yul\":3010:3013   */\n      0xe0\n        /* \"#utility.yul\":3005:3007   */\n      0x20\n        /* \"#utility.yul\":2994:3003   */\n      dup3\n        /* \"#utility.yul\":2990:3008   */\n      add\n        /* \"#utility.yul\":2983:3014   */\n      mstore\n        /* \"#utility.yul\":2910:2914   */\n      0x00\n        /* \"#utility.yul\":3037:3083   */\n      tag_398\n        /* \"#utility.yul\":3078:3081   */\n      0xe0\n        /* \"#utility.yul\":3067:3076   */\n      dup4\n        /* \"#utility.yul\":3063:3082   */\n      add\n        /* \"#utility.yul\":3055:3061   */\n      dup10\n        /* \"#utility.yul\":3037:3083   */\n      tag_372\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":3131:3140   */\n      dup3\n        /* \"#utility.yul\":3123:3129   */\n      dup2\n        /* \"#utility.yul\":3119:3141   */\n      sub\n        /* \"#utility.yul\":3114:3116   */\n      0x40\n        /* \"#utility.yul\":3103:3112   */\n      dup5\n        /* \"#utility.yul\":3099:3117   */\n      add\n        /* \"#utility.yul\":3092:3142   */\n      mstore\n        /* \"#utility.yul\":3165:3198   */\n      tag_399\n        /* \"#utility.yul\":3191:3197   */\n      dup2\n        /* \"#utility.yul\":3183:3189   */\n      dup10\n        /* \"#utility.yul\":3165:3198   */\n      tag_372\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":3229:3231   */\n      0x60\n        /* \"#utility.yul\":3214:3232   */\n      dup5\n      add\n        /* \"#utility.yul\":3207:3241   */\n      dup9\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3278:3310   */\n      dup8\n      and\n        /* \"#utility.yul\":3272:3275   */\n      0x80\n        /* \"#utility.yul\":3257:3276   */\n      dup6\n      add\n        /* \"#utility.yul\":3250:3311   */\n      mstore\n        /* \"#utility.yul\":3298:3301   */\n      0xa0\n        /* \"#utility.yul\":3327:3346   */\n      dup5\n      add\n        /* \"#utility.yul\":3320:3355   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":3392:3414   */\n      dup4\n      dup2\n      sub\n        /* \"#utility.yul\":3386:3389   */\n      0xc0\n        /* \"#utility.yul\":3371:3390   */\n      dup6\n      add\n        /* \"#utility.yul\":3364:3415   */\n      mstore\n        /* \"#utility.yul\":3464:3477   */\n      dup5\n      mload\n        /* \"#utility.yul\":3486:3508   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3536:3538   */\n      0x20\n        /* \"#utility.yul\":3562:3577   */\n      dup1\n      dup8\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":3524:3539   */\n      swap1\n      swap2\n      add\n      swap1\n      0x00\n        /* \"#utility.yul\":3605:3774   */\n    tag_400:\n        /* \"#utility.yul\":3619:3625   */\n      dup2\n        /* \"#utility.yul\":3616:3617   */\n      dup2\n        /* \"#utility.yul\":3613:3626   */\n      lt\n        /* \"#utility.yul\":3605:3774   */\n      iszero\n      tag_402\n      jumpi\n        /* \"#utility.yul\":3680:3693   */\n      dup4\n      mload\n        /* \"#utility.yul\":3668:3694   */\n      dup4\n      mstore\n        /* \"#utility.yul\":3723:3725   */\n      0x20\n        /* \"#utility.yul\":3749:3764   */\n      swap4\n      dup5\n      add\n      swap4\n        /* \"#utility.yul\":3714:3726   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":3641:3642   */\n      0x01\n        /* \"#utility.yul\":3634:3643   */\n      add\n        /* \"#utility.yul\":3605:3774   */\n      jump(tag_400)\n    tag_402:\n      pop\n        /* \"#utility.yul\":3791:3794   */\n      swap1\n      swap12\n        /* \"#utility.yul\":2562:3800   */\n      swap11\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4013:4916   */\n    tag_109:\n        /* \"#utility.yul\":4124:4130   */\n      0x00\n        /* \"#utility.yul\":4132:4138   */\n      dup1\n        /* \"#utility.yul\":4140:4146   */\n      0x00\n        /* \"#utility.yul\":4148:4154   */\n      dup1\n        /* \"#utility.yul\":4156:4162   */\n      0x00\n        /* \"#utility.yul\":4164:4170   */\n      dup1\n        /* \"#utility.yul\":4172:4178   */\n      0x00\n        /* \"#utility.yul\":4225:4228   */\n      0xe0\n        /* \"#utility.yul\":4213:4222   */\n      dup9\n        /* \"#utility.yul\":4204:4211   */\n      dup11\n        /* \"#utility.yul\":4200:4223   */\n      sub\n        /* \"#utility.yul\":4196:4229   */\n      slt\n        /* \"#utility.yul\":4193:4246   */\n      iszero\n      tag_405\n      jumpi\n        /* \"#utility.yul\":4242:4243   */\n      0x00\n        /* \"#utility.yul\":4239:4240   */\n      dup1\n        /* \"#utility.yul\":4232:4244   */\n      revert\n        /* \"#utility.yul\":4193:4246   */\n    tag_405:\n        /* \"#utility.yul\":4265:4294   */\n      tag_406\n        /* \"#utility.yul\":4284:4293   */\n      dup9\n        /* \"#utility.yul\":4265:4294   */\n      tag_373\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":4255:4294   */\n      swap7\n      pop\n        /* \"#utility.yul\":4313:4351   */\n      tag_407\n        /* \"#utility.yul\":4347:4349   */\n      0x20\n        /* \"#utility.yul\":4336:4345   */\n      dup10\n        /* \"#utility.yul\":4332:4350   */\n      add\n        /* \"#utility.yul\":4313:4351   */\n      tag_373\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":4303:4351   */\n      swap6\n      pop\n        /* \"#utility.yul\":4420:4422   */\n      0x40\n        /* \"#utility.yul\":4405:4423   */\n      dup9\n      add\n        /* \"#utility.yul\":4392:4424   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4521:4523   */\n      0x60\n        /* \"#utility.yul\":4506:4524   */\n      dup9\n      add\n        /* \"#utility.yul\":4493:4525   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":4603:4606   */\n      0x80\n        /* \"#utility.yul\":4588:4607   */\n      dup9\n      add\n        /* \"#utility.yul\":4575:4608   */\n      calldataload\n        /* \"#utility.yul\":4652:4656   */\n      0xff\n        /* \"#utility.yul\":4639:4657   */\n      dup2\n      and\n        /* \"#utility.yul\":4627:4658   */\n      dup2\n      eq\n        /* \"#utility.yul\":4617:4676   */\n      tag_408\n      jumpi\n        /* \"#utility.yul\":4672:4673   */\n      0x00\n        /* \"#utility.yul\":4669:4670   */\n      dup1\n        /* \"#utility.yul\":4662:4674   */\n      revert\n        /* \"#utility.yul\":4617:4676   */\n    tag_408:\n        /* \"#utility.yul\":4013:4916   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":4695:4702   */\n      swap5\n        /* \"#utility.yul\":4775:4778   */\n      0xa0\n        /* \"#utility.yul\":4760:4779   */\n      dup5\n      add\n        /* \"#utility.yul\":4747:4780   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4879:4882   */\n      0xc0\n        /* \"#utility.yul\":4864:4883   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":4851:4884   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":4013:4916   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4921:5181   */\n    tag_114:\n        /* \"#utility.yul\":4989:4995   */\n      0x00\n        /* \"#utility.yul\":4997:5003   */\n      dup1\n        /* \"#utility.yul\":5050:5052   */\n      0x40\n        /* \"#utility.yul\":5038:5047   */\n      dup4\n        /* \"#utility.yul\":5029:5036   */\n      dup6\n        /* \"#utility.yul\":5025:5048   */\n      sub\n        /* \"#utility.yul\":5021:5053   */\n      slt\n        /* \"#utility.yul\":5018:5070   */\n      iszero\n      tag_410\n      jumpi\n        /* \"#utility.yul\":5066:5067   */\n      0x00\n        /* \"#utility.yul\":5063:5064   */\n      dup1\n        /* \"#utility.yul\":5056:5068   */\n      revert\n        /* \"#utility.yul\":5018:5070   */\n    tag_410:\n        /* \"#utility.yul\":5089:5118   */\n      tag_411\n        /* \"#utility.yul\":5108:5117   */\n      dup4\n        /* \"#utility.yul\":5089:5118   */\n      tag_373\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":5079:5118   */\n      swap2\n      pop\n        /* \"#utility.yul\":5137:5175   */\n      tag_412\n        /* \"#utility.yul\":5171:5173   */\n      0x20\n        /* \"#utility.yul\":5160:5169   */\n      dup5\n        /* \"#utility.yul\":5156:5174   */\n      add\n        /* \"#utility.yul\":5137:5175   */\n      tag_373\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":5127:5175   */\n      swap1\n      pop\n        /* \"#utility.yul\":4921:5181   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5186:5566   */\n    tag_123:\n        /* \"#utility.yul\":5265:5266   */\n      0x01\n        /* \"#utility.yul\":5261:5273   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5308:5320   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5329:5390   */\n      tag_414\n      jumpi\n        /* \"#utility.yul\":5383:5387   */\n      0x7f\n        /* \"#utility.yul\":5375:5381   */\n      dup3\n        /* \"#utility.yul\":5371:5388   */\n      and\n        /* \"#utility.yul\":5361:5388   */\n      swap2\n      pop\n        /* \"#utility.yul\":5329:5390   */\n    tag_414:\n        /* \"#utility.yul\":5436:5438   */\n      0x20\n        /* \"#utility.yul\":5428:5434   */\n      dup3\n        /* \"#utility.yul\":5425:5439   */\n      lt\n        /* \"#utility.yul\":5405:5423   */\n      dup2\n        /* \"#utility.yul\":5402:5440   */\n      sub\n        /* \"#utility.yul\":5399:5560   */\n      tag_415\n      jumpi\n        /* \"#utility.yul\":5482:5492   */\n      0x4e487b71\n        /* \"#utility.yul\":5477:5480   */\n      0xe0\n        /* \"#utility.yul\":5473:5493   */\n      shl\n        /* \"#utility.yul\":5470:5471   */\n      0x00\n        /* \"#utility.yul\":5463:5494   */\n      mstore\n        /* \"#utility.yul\":5517:5521   */\n      0x22\n        /* \"#utility.yul\":5514:5515   */\n      0x04\n        /* \"#utility.yul\":5507:5522   */\n      mstore\n        /* \"#utility.yul\":5545:5549   */\n      0x24\n        /* \"#utility.yul\":5542:5543   */\n      0x00\n        /* \"#utility.yul\":5535:5550   */\n      revert\n        /* \"#utility.yul\":5399:5560   */\n    tag_415:\n      pop\n        /* \"#utility.yul\":5186:5566   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5703:5830   */\n    tag_374:\n        /* \"#utility.yul\":5764:5774   */\n      0x4e487b71\n        /* \"#utility.yul\":5759:5762   */\n      0xe0\n        /* \"#utility.yul\":5755:5775   */\n      shl\n        /* \"#utility.yul\":5752:5753   */\n      0x00\n        /* \"#utility.yul\":5745:5776   */\n      mstore\n        /* \"#utility.yul\":5795:5799   */\n      0x11\n        /* \"#utility.yul\":5792:5793   */\n      0x04\n        /* \"#utility.yul\":5785:5800   */\n      mstore\n        /* \"#utility.yul\":5819:5823   */\n      0x24\n        /* \"#utility.yul\":5816:5817   */\n      0x00\n        /* \"#utility.yul\":5809:5824   */\n      revert\n        /* \"#utility.yul\":5835:6003   */\n    tag_188:\n        /* \"#utility.yul\":5908:5917   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":5939:5948   */\n      dup2\n      iszero\n        /* \"#utility.yul\":5956:5971   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":5950:5972   */\n      dup5\n      eq\n        /* \"#utility.yul\":5936:5973   */\n      or\n        /* \"#utility.yul\":5926:5997   */\n      tag_128\n      jumpi\n        /* \"#utility.yul\":5977:5995   */\n      tag_128\n      tag_374\n      jump\t// in\n        /* \"#utility.yul\":6008:6225   */\n    tag_190:\n        /* \"#utility.yul\":6048:6049   */\n      0x00\n        /* \"#utility.yul\":6074:6075   */\n      dup3\n        /* \"#utility.yul\":6064:6196   */\n      tag_422\n      jumpi\n        /* \"#utility.yul\":6118:6128   */\n      0x4e487b71\n        /* \"#utility.yul\":6113:6116   */\n      0xe0\n        /* \"#utility.yul\":6109:6129   */\n      shl\n        /* \"#utility.yul\":6106:6107   */\n      0x00\n        /* \"#utility.yul\":6099:6130   */\n      mstore\n        /* \"#utility.yul\":6153:6157   */\n      0x12\n        /* \"#utility.yul\":6150:6151   */\n      0x04\n        /* \"#utility.yul\":6143:6158   */\n      mstore\n        /* \"#utility.yul\":6181:6185   */\n      0x24\n        /* \"#utility.yul\":6178:6179   */\n      0x00\n        /* \"#utility.yul\":6171:6186   */\n      revert\n        /* \"#utility.yul\":6064:6196   */\n    tag_422:\n      pop\n        /* \"#utility.yul\":6210:6219   */\n      div\n      swap1\n        /* \"#utility.yul\":6008:6225   */\n      jump\t// out\n        /* \"#utility.yul\":6230:6358   */\n    tag_195:\n        /* \"#utility.yul\":6297:6306   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":6318:6329   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":6315:6352   */\n      iszero\n      tag_128\n      jumpi\n        /* \"#utility.yul\":6332:6350   */\n      tag_128\n      tag_374\n      jump\t// in\n        /* \"#utility.yul\":8729:8854   */\n    tag_309:\n        /* \"#utility.yul\":8794:8803   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":8815:8825   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":8812:8848   */\n      iszero\n      tag_128\n      jumpi\n        /* \"#utility.yul\":8828:8846   */\n      tag_128\n      tag_374\n      jump\t// in\n        /* \"#utility.yul\":9756:9883   */\n    tag_340:\n        /* \"#utility.yul\":9817:9827   */\n      0x4e487b71\n        /* \"#utility.yul\":9812:9815   */\n      0xe0\n        /* \"#utility.yul\":9808:9828   */\n      shl\n        /* \"#utility.yul\":9805:9806   */\n      0x00\n        /* \"#utility.yul\":9798:9829   */\n      mstore\n        /* \"#utility.yul\":9848:9852   */\n      0x21\n        /* \"#utility.yul\":9845:9846   */\n      0x04\n        /* \"#utility.yul\":9838:9853   */\n      mstore\n        /* \"#utility.yul\":9872:9876   */\n      0x24\n        /* \"#utility.yul\":9869:9870   */\n      0x00\n        /* \"#utility.yul\":9862:9877   */\n      revert\n\n    auxdata: 0xa2646970667358221220678aee7add9ecb4350a1169000e7aebf707f333b394c738f5c660ca74e77e7e964736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1016": {
									"entryPoint": null,
									"id": 1016,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_2322": {
									"entryPoint": null,
									"id": 2322,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_328": {
									"entryPoint": null,
									"id": 328,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_3759": {
									"entryPoint": null,
									"id": 3759,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_426": {
									"entryPoint": null,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2369": {
									"entryPoint": null,
									"id": 2369,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_729": {
									"entryPoint": 657,
									"id": 729,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 576,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_696": {
									"entryPoint": 774,
									"id": 696,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@decimals_453": {
									"entryPoint": null,
									"id": 453,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getStringSlot_1599": {
									"entryPoint": null,
									"id": 1599,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_1439": {
									"entryPoint": 526,
									"id": 1439,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_1341": {
									"entryPoint": 713,
									"id": 1341,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1713,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1801,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 1426,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint256": {
									"entryPoint": 1653,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 1493,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1671,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1694,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 1144,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 1766,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1220,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 1088,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1406,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1068,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6602:20",
										"nodeType": "YulBlock",
										"src": "0:6602:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "46:95:20",
													"nodeType": "YulBlock",
													"src": "46:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "63:1:20",
																		"nodeType": "YulLiteral",
																		"src": "63:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "70:3:20",
																				"nodeType": "YulLiteral",
																				"src": "70:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "75:10:20",
																				"nodeType": "YulLiteral",
																				"src": "75:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "66:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:20"
																		},
																		"nativeSrc": "66:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "56:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:20"
																},
																"nativeSrc": "56:31:20",
																"nodeType": "YulFunctionCall",
																"src": "56:31:20"
															},
															"nativeSrc": "56:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "56:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "103:1:20",
																		"nodeType": "YulLiteral",
																		"src": "103:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "106:4:20",
																		"nodeType": "YulLiteral",
																		"src": "106:4:20",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "96:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:20"
																},
																"nativeSrc": "96:15:20",
																"nodeType": "YulFunctionCall",
																"src": "96:15:20"
															},
															"nativeSrc": "96:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "96:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "127:1:20",
																		"nodeType": "YulLiteral",
																		"src": "127:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "130:4:20",
																		"nodeType": "YulLiteral",
																		"src": "130:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "120:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:20"
																},
																"nativeSrc": "120:15:20",
																"nodeType": "YulFunctionCall",
																"src": "120:15:20"
															},
															"nativeSrc": "120:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "120:15:20"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "14:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:20"
											},
											{
												"body": {
													"nativeSrc": "201:325:20",
													"nodeType": "YulBlock",
													"src": "201:325:20",
													"statements": [
														{
															"nativeSrc": "211:22:20",
															"nodeType": "YulAssignment",
															"src": "211:22:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "225:1:20",
																		"nodeType": "YulLiteral",
																		"src": "225:1:20",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "228:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "228:4:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "221:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "221:3:20"
																},
																"nativeSrc": "221:12:20",
																"nodeType": "YulFunctionCall",
																"src": "221:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "211:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:20"
																}
															]
														},
														{
															"nativeSrc": "242:38:20",
															"nodeType": "YulVariableDeclaration",
															"src": "242:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "272:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "272:4:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "278:1:20",
																		"nodeType": "YulLiteral",
																		"src": "278:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "268:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "268:3:20"
																},
																"nativeSrc": "268:12:20",
																"nodeType": "YulFunctionCall",
																"src": "268:12:20"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "246:18:20",
																	"nodeType": "YulTypedName",
																	"src": "246:18:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "319:31:20",
																"nodeType": "YulBlock",
																"src": "319:31:20",
																"statements": [
																	{
																		"nativeSrc": "321:27:20",
																		"nodeType": "YulAssignment",
																		"src": "321:27:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "335:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "335:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "343:4:20",
																					"nodeType": "YulLiteral",
																					"src": "343:4:20",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "331:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "331:3:20"
																			},
																			"nativeSrc": "331:17:20",
																			"nodeType": "YulFunctionCall",
																			"src": "331:17:20"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "321:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "321:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "299:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "299:18:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "292:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "292:6:20"
																},
																"nativeSrc": "292:26:20",
																"nodeType": "YulFunctionCall",
																"src": "292:26:20"
															},
															"nativeSrc": "289:61:20",
															"nodeType": "YulIf",
															"src": "289:61:20"
														},
														{
															"body": {
																"nativeSrc": "409:111:20",
																"nodeType": "YulBlock",
																"src": "409:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "430:1:20",
																					"nodeType": "YulLiteral",
																					"src": "430:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "437:3:20",
																							"nodeType": "YulLiteral",
																							"src": "437:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "442:10:20",
																							"nodeType": "YulLiteral",
																							"src": "442:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "433:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "433:3:20"
																					},
																					"nativeSrc": "433:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "433:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "423:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "423:6:20"
																			},
																			"nativeSrc": "423:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "423:31:20"
																		},
																		"nativeSrc": "423:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "423:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "474:1:20",
																					"nodeType": "YulLiteral",
																					"src": "474:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "477:4:20",
																					"nodeType": "YulLiteral",
																					"src": "477:4:20",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "467:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "467:6:20"
																			},
																			"nativeSrc": "467:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "467:15:20"
																		},
																		"nativeSrc": "467:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "467:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "502:1:20",
																					"nodeType": "YulLiteral",
																					"src": "502:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "505:4:20",
																					"nodeType": "YulLiteral",
																					"src": "505:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "495:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "495:6:20"
																			},
																			"nativeSrc": "495:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "495:15:20"
																		},
																		"nativeSrc": "495:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "495:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "365:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "365:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "388:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "388:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "396:2:20",
																				"nodeType": "YulLiteral",
																				"src": "396:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "385:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "385:2:20"
																		},
																		"nativeSrc": "385:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "385:14:20"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "362:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "362:2:20"
																},
																"nativeSrc": "362:38:20",
																"nodeType": "YulFunctionCall",
																"src": "362:38:20"
															},
															"nativeSrc": "359:161:20",
															"nodeType": "YulIf",
															"src": "359:161:20"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "146:380:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "181:4:20",
														"nodeType": "YulTypedName",
														"src": "181:4:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "190:6:20",
														"nodeType": "YulTypedName",
														"src": "190:6:20",
														"type": ""
													}
												],
												"src": "146:380:20"
											},
											{
												"body": {
													"nativeSrc": "587:65:20",
													"nodeType": "YulBlock",
													"src": "587:65:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "604:1:20",
																		"nodeType": "YulLiteral",
																		"src": "604:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "607:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "607:3:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "597:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:20"
																},
																"nativeSrc": "597:14:20",
																"nodeType": "YulFunctionCall",
																"src": "597:14:20"
															},
															"nativeSrc": "597:14:20",
															"nodeType": "YulExpressionStatement",
															"src": "597:14:20"
														},
														{
															"nativeSrc": "620:26:20",
															"nodeType": "YulAssignment",
															"src": "620:26:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "638:1:20",
																		"nodeType": "YulLiteral",
																		"src": "638:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "641:4:20",
																		"nodeType": "YulLiteral",
																		"src": "641:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "628:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "628:9:20"
																},
																"nativeSrc": "628:18:20",
																"nodeType": "YulFunctionCall",
																"src": "628:18:20"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "620:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "620:4:20"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "531:121:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "570:3:20",
														"nodeType": "YulTypedName",
														"src": "570:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "578:4:20",
														"nodeType": "YulTypedName",
														"src": "578:4:20",
														"type": ""
													}
												],
												"src": "531:121:20"
											},
											{
												"body": {
													"nativeSrc": "738:437:20",
													"nodeType": "YulBlock",
													"src": "738:437:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "771:398:20",
																"nodeType": "YulBlock",
																"src": "771:398:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "792:1:20",
																					"nodeType": "YulLiteral",
																					"src": "792:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "795:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "795:5:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "785:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "785:6:20"
																			},
																			"nativeSrc": "785:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "785:16:20"
																		},
																		"nativeSrc": "785:16:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "785:16:20"
																	},
																	{
																		"nativeSrc": "814:30:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "814:30:20",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "836:1:20",
																					"nodeType": "YulLiteral",
																					"src": "836:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "839:4:20",
																					"nodeType": "YulLiteral",
																					"src": "839:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "826:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "826:9:20"
																			},
																			"nativeSrc": "826:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "826:18:20"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "818:4:20",
																				"nodeType": "YulTypedName",
																				"src": "818:4:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "857:57:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "857:57:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "880:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "880:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "890:1:20",
																							"nodeType": "YulLiteral",
																							"src": "890:1:20",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "897:10:20",
																									"nodeType": "YulIdentifier",
																									"src": "897:10:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "909:2:20",
																									"nodeType": "YulLiteral",
																									"src": "909:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "893:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "893:3:20"
																							},
																							"nativeSrc": "893:19:20",
																							"nodeType": "YulFunctionCall",
																							"src": "893:19:20"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "886:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "886:3:20"
																					},
																					"nativeSrc": "886:27:20",
																					"nodeType": "YulFunctionCall",
																					"src": "886:27:20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "876:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "876:3:20"
																			},
																			"nativeSrc": "876:38:20",
																			"nodeType": "YulFunctionCall",
																			"src": "876:38:20"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "861:11:20",
																				"nodeType": "YulTypedName",
																				"src": "861:11:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "951:23:20",
																			"nodeType": "YulBlock",
																			"src": "951:23:20",
																			"statements": [
																				{
																					"nativeSrc": "953:19:20",
																					"nodeType": "YulAssignment",
																					"src": "953:19:20",
																					"value": {
																						"name": "data",
																						"nativeSrc": "968:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "968:4:20"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "953:11:20",
																							"nodeType": "YulIdentifier",
																							"src": "953:11:20"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "933:10:20",
																					"nodeType": "YulIdentifier",
																					"src": "933:10:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "945:4:20",
																					"nodeType": "YulLiteral",
																					"src": "945:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "930:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "930:2:20"
																			},
																			"nativeSrc": "930:20:20",
																			"nodeType": "YulFunctionCall",
																			"src": "930:20:20"
																		},
																		"nativeSrc": "927:47:20",
																		"nodeType": "YulIf",
																		"src": "927:47:20"
																	},
																	{
																		"nativeSrc": "987:41:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "987:41:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "1001:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "1001:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1011:1:20",
																							"nodeType": "YulLiteral",
																							"src": "1011:1:20",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "1018:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1018:3:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "1023:2:20",
																									"nodeType": "YulLiteral",
																									"src": "1023:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1014:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "1014:3:20"
																							},
																							"nativeSrc": "1014:12:20",
																							"nodeType": "YulFunctionCall",
																							"src": "1014:12:20"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "1007:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "1007:3:20"
																					},
																					"nativeSrc": "1007:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1007:20:20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "997:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "997:3:20"
																			},
																			"nativeSrc": "997:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "997:31:20"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "991:2:20",
																				"nodeType": "YulTypedName",
																				"src": "991:2:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1041:24:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1041:24:20",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "1054:11:20",
																			"nodeType": "YulIdentifier",
																			"src": "1054:11:20"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "1045:5:20",
																				"nodeType": "YulTypedName",
																				"src": "1045:5:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "1139:20:20",
																			"nodeType": "YulBlock",
																			"src": "1139:20:20",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1148:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "1148:5:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1155:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1155:1:20",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "1141:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "1141:6:20"
																						},
																						"nativeSrc": "1141:16:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1141:16:20"
																					},
																					"nativeSrc": "1141:16:20",
																					"nodeType": "YulExpressionStatement",
																					"src": "1141:16:20"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "1089:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "1089:5:20"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "1096:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "1096:2:20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "1086:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "1086:2:20"
																			},
																			"nativeSrc": "1086:13:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1086:13:20"
																		},
																		"nativeSrc": "1078:81:20",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "1100:26:20",
																			"nodeType": "YulBlock",
																			"src": "1100:26:20",
																			"statements": [
																				{
																					"nativeSrc": "1102:22:20",
																					"nodeType": "YulAssignment",
																					"src": "1102:22:20",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1115:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "1115:5:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1122:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1122:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "1111:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1111:3:20"
																						},
																						"nativeSrc": "1111:13:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1111:13:20"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "1102:5:20",
																							"nodeType": "YulIdentifier",
																							"src": "1102:5:20"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "1082:3:20",
																			"nodeType": "YulBlock",
																			"src": "1082:3:20",
																			"statements": []
																		},
																		"src": "1078:81:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "754:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "754:3:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "759:2:20",
																		"nodeType": "YulLiteral",
																		"src": "759:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "751:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "751:2:20"
																},
																"nativeSrc": "751:11:20",
																"nodeType": "YulFunctionCall",
																"src": "751:11:20"
															},
															"nativeSrc": "748:421:20",
															"nodeType": "YulIf",
															"src": "748:421:20"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "657:518:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "710:5:20",
														"nodeType": "YulTypedName",
														"src": "710:5:20",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "717:3:20",
														"nodeType": "YulTypedName",
														"src": "717:3:20",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "722:10:20",
														"nodeType": "YulTypedName",
														"src": "722:10:20",
														"type": ""
													}
												],
												"src": "657:518:20"
											},
											{
												"body": {
													"nativeSrc": "1265:81:20",
													"nodeType": "YulBlock",
													"src": "1265:81:20",
													"statements": [
														{
															"nativeSrc": "1275:65:20",
															"nodeType": "YulAssignment",
															"src": "1275:65:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "1290:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "1290:4:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1308:1:20",
																										"nodeType": "YulLiteral",
																										"src": "1308:1:20",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "1311:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "1311:3:20"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1304:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1304:3:20"
																								},
																								"nativeSrc": "1304:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1304:11:20"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1321:1:20",
																										"nodeType": "YulLiteral",
																										"src": "1321:1:20",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "1317:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1317:3:20"
																								},
																								"nativeSrc": "1317:6:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1317:6:20"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "1300:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1300:3:20"
																						},
																						"nativeSrc": "1300:24:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1300:24:20"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "1296:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1296:3:20"
																				},
																				"nativeSrc": "1296:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1296:29:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1286:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1286:3:20"
																		},
																		"nativeSrc": "1286:40:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1286:40:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1332:1:20",
																				"nodeType": "YulLiteral",
																				"src": "1332:1:20",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "1335:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1335:3:20"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1328:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1328:3:20"
																		},
																		"nativeSrc": "1328:11:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1328:11:20"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1283:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1283:2:20"
																},
																"nativeSrc": "1283:57:20",
																"nodeType": "YulFunctionCall",
																"src": "1283:57:20"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "1275:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1275:4:20"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "1180:166:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1242:4:20",
														"nodeType": "YulTypedName",
														"src": "1242:4:20",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "1248:3:20",
														"nodeType": "YulTypedName",
														"src": "1248:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "1256:4:20",
														"nodeType": "YulTypedName",
														"src": "1256:4:20",
														"type": ""
													}
												],
												"src": "1180:166:20"
											},
											{
												"body": {
													"nativeSrc": "1447:1203:20",
													"nodeType": "YulBlock",
													"src": "1447:1203:20",
													"statements": [
														{
															"nativeSrc": "1457:24:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1457:24:20",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "1477:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1477:3:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1471:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1471:5:20"
																},
																"nativeSrc": "1471:10:20",
																"nodeType": "YulFunctionCall",
																"src": "1471:10:20"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "1461:6:20",
																	"nodeType": "YulTypedName",
																	"src": "1461:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1524:22:20",
																"nodeType": "YulBlock",
																"src": "1524:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1526:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "1526:16:20"
																			},
																			"nativeSrc": "1526:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1526:18:20"
																		},
																		"nativeSrc": "1526:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1526:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1496:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1496:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1512:2:20",
																						"nodeType": "YulLiteral",
																						"src": "1512:2:20",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1516:1:20",
																						"nodeType": "YulLiteral",
																						"src": "1516:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "1508:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1508:3:20"
																				},
																				"nativeSrc": "1508:10:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1508:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1520:1:20",
																				"nodeType": "YulLiteral",
																				"src": "1520:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1504:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1504:3:20"
																		},
																		"nativeSrc": "1504:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1504:18:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1493:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1493:2:20"
																},
																"nativeSrc": "1493:30:20",
																"nodeType": "YulFunctionCall",
																"src": "1493:30:20"
															},
															"nativeSrc": "1490:56:20",
															"nodeType": "YulIf",
															"src": "1490:56:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "1599:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "1599:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "1637:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "1637:4:20"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "1631:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "1631:5:20"
																				},
																				"nativeSrc": "1631:11:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1631:11:20"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "1605:25:20",
																			"nodeType": "YulIdentifier",
																			"src": "1605:25:20"
																		},
																		"nativeSrc": "1605:38:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1605:38:20"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "1645:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1645:6:20"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "1555:43:20",
																	"nodeType": "YulIdentifier",
																	"src": "1555:43:20"
																},
																"nativeSrc": "1555:97:20",
																"nodeType": "YulFunctionCall",
																"src": "1555:97:20"
															},
															"nativeSrc": "1555:97:20",
															"nodeType": "YulExpressionStatement",
															"src": "1555:97:20"
														},
														{
															"nativeSrc": "1661:18:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1661:18:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1678:1:20",
																"nodeType": "YulLiteral",
																"src": "1678:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1665:9:20",
																	"nodeType": "YulTypedName",
																	"src": "1665:9:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1688:17:20",
															"nodeType": "YulAssignment",
															"src": "1688:17:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1701:4:20",
																"nodeType": "YulLiteral",
																"src": "1701:4:20",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1688:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "1688:9:20"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "1751:642:20",
																		"nodeType": "YulBlock",
																		"src": "1751:642:20",
																		"statements": [
																			{
																				"nativeSrc": "1765:35:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1765:35:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "1784:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "1784:6:20"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "1796:2:20",
																									"nodeType": "YulLiteral",
																									"src": "1796:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "1792:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "1792:3:20"
																							},
																							"nativeSrc": "1792:7:20",
																							"nodeType": "YulFunctionCall",
																							"src": "1792:7:20"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "1780:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "1780:3:20"
																					},
																					"nativeSrc": "1780:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1780:20:20"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "1769:7:20",
																						"nodeType": "YulTypedName",
																						"src": "1769:7:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "1813:49:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1813:49:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "1857:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "1857:4:20"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "1827:29:20",
																						"nodeType": "YulIdentifier",
																						"src": "1827:29:20"
																					},
																					"nativeSrc": "1827:35:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1827:35:20"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "1817:6:20",
																						"nodeType": "YulTypedName",
																						"src": "1817:6:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "1875:10:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1875:10:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "1884:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1884:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "1879:1:20",
																						"nodeType": "YulTypedName",
																						"src": "1879:1:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "1955:165:20",
																					"nodeType": "YulBlock",
																					"src": "1955:165:20",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "1980:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "1980:6:20"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "1998:3:20",
																														"nodeType": "YulIdentifier",
																														"src": "1998:3:20"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "2003:9:20",
																														"nodeType": "YulIdentifier",
																														"src": "2003:9:20"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "1994:3:20",
																													"nodeType": "YulIdentifier",
																													"src": "1994:3:20"
																												},
																												"nativeSrc": "1994:19:20",
																												"nodeType": "YulFunctionCall",
																												"src": "1994:19:20"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "1988:5:20",
																											"nodeType": "YulIdentifier",
																											"src": "1988:5:20"
																										},
																										"nativeSrc": "1988:26:20",
																										"nodeType": "YulFunctionCall",
																										"src": "1988:26:20"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "1973:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "1973:6:20"
																								},
																								"nativeSrc": "1973:42:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1973:42:20"
																							},
																							"nativeSrc": "1973:42:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "1973:42:20"
																						},
																						{
																							"nativeSrc": "2032:24:20",
																							"nodeType": "YulAssignment",
																							"src": "2032:24:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2046:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "2046:6:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2054:1:20",
																										"nodeType": "YulLiteral",
																										"src": "2054:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2042:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2042:3:20"
																								},
																								"nativeSrc": "2042:14:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2042:14:20"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "2032:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2032:6:20"
																								}
																							]
																						},
																						{
																							"nativeSrc": "2073:33:20",
																							"nodeType": "YulAssignment",
																							"src": "2073:33:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "2090:9:20",
																										"nodeType": "YulIdentifier",
																										"src": "2090:9:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2101:4:20",
																										"nodeType": "YulLiteral",
																										"src": "2101:4:20",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2086:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2086:3:20"
																								},
																								"nativeSrc": "2086:20:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2086:20:20"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2073:9:20",
																									"nodeType": "YulIdentifier",
																									"src": "2073:9:20"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "1909:1:20",
																							"nodeType": "YulIdentifier",
																							"src": "1909:1:20"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "1912:7:20",
																							"nodeType": "YulIdentifier",
																							"src": "1912:7:20"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "1906:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "1906:2:20"
																					},
																					"nativeSrc": "1906:14:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1906:14:20"
																				},
																				"nativeSrc": "1898:222:20",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "1921:21:20",
																					"nodeType": "YulBlock",
																					"src": "1921:21:20",
																					"statements": [
																						{
																							"nativeSrc": "1923:17:20",
																							"nodeType": "YulAssignment",
																							"src": "1923:17:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "1932:1:20",
																										"nodeType": "YulIdentifier",
																										"src": "1932:1:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "1935:4:20",
																										"nodeType": "YulLiteral",
																										"src": "1935:4:20",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "1928:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1928:3:20"
																								},
																								"nativeSrc": "1928:12:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1928:12:20"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "1923:1:20",
																									"nodeType": "YulIdentifier",
																									"src": "1923:1:20"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "1902:3:20",
																					"nodeType": "YulBlock",
																					"src": "1902:3:20",
																					"statements": []
																				},
																				"src": "1898:222:20"
																			},
																			{
																				"body": {
																					"nativeSrc": "2168:166:20",
																					"nodeType": "YulBlock",
																					"src": "2168:166:20",
																					"statements": [
																						{
																							"nativeSrc": "2186:43:20",
																							"nodeType": "YulVariableDeclaration",
																							"src": "2186:43:20",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2213:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "2213:3:20"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2218:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "2218:9:20"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2209:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "2209:3:20"
																										},
																										"nativeSrc": "2209:19:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2209:19:20"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2203:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2203:5:20"
																								},
																								"nativeSrc": "2203:26:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2203:26:20"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "2190:9:20",
																									"nodeType": "YulTypedName",
																									"src": "2190:9:20",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2253:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "2253:6:20"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "2265:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "2265:9:20"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "2292:1:20",
																																				"nodeType": "YulLiteral",
																																				"src": "2292:1:20",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "2295:6:20",
																																				"nodeType": "YulIdentifier",
																																				"src": "2295:6:20"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "2288:3:20",
																																			"nodeType": "YulIdentifier",
																																			"src": "2288:3:20"
																																		},
																																		"nativeSrc": "2288:14:20",
																																		"nodeType": "YulFunctionCall",
																																		"src": "2288:14:20"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2304:3:20",
																																		"nodeType": "YulLiteral",
																																		"src": "2304:3:20",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "2284:3:20",
																																	"nodeType": "YulIdentifier",
																																	"src": "2284:3:20"
																																},
																																"nativeSrc": "2284:24:20",
																																"nodeType": "YulFunctionCall",
																																"src": "2284:24:20"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2314:1:20",
																																		"nodeType": "YulLiteral",
																																		"src": "2314:1:20",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "2310:3:20",
																																	"nodeType": "YulIdentifier",
																																	"src": "2310:3:20"
																																},
																																"nativeSrc": "2310:6:20",
																																"nodeType": "YulFunctionCall",
																																"src": "2310:6:20"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "2280:3:20",
																															"nodeType": "YulIdentifier",
																															"src": "2280:3:20"
																														},
																														"nativeSrc": "2280:37:20",
																														"nodeType": "YulFunctionCall",
																														"src": "2280:37:20"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "2276:3:20",
																													"nodeType": "YulIdentifier",
																													"src": "2276:3:20"
																												},
																												"nativeSrc": "2276:42:20",
																												"nodeType": "YulFunctionCall",
																												"src": "2276:42:20"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "2261:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "2261:3:20"
																										},
																										"nativeSrc": "2261:58:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2261:58:20"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2246:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2246:6:20"
																								},
																								"nativeSrc": "2246:74:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2246:74:20"
																							},
																							"nativeSrc": "2246:74:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "2246:74:20"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "2139:7:20",
																							"nodeType": "YulIdentifier",
																							"src": "2139:7:20"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "2148:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "2148:6:20"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "2136:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "2136:2:20"
																					},
																					"nativeSrc": "2136:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2136:19:20"
																				},
																				"nativeSrc": "2133:201:20",
																				"nodeType": "YulIf",
																				"src": "2133:201:20"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2354:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "2354:4:20"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "2368:1:20",
																											"nodeType": "YulLiteral",
																											"src": "2368:1:20",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "2371:6:20",
																											"nodeType": "YulIdentifier",
																											"src": "2371:6:20"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "2364:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "2364:3:20"
																									},
																									"nativeSrc": "2364:14:20",
																									"nodeType": "YulFunctionCall",
																									"src": "2364:14:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2380:1:20",
																									"nodeType": "YulLiteral",
																									"src": "2380:1:20",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2360:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "2360:3:20"
																							},
																							"nativeSrc": "2360:22:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2360:22:20"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2347:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "2347:6:20"
																					},
																					"nativeSrc": "2347:36:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2347:36:20"
																				},
																				"nativeSrc": "2347:36:20",
																				"nodeType": "YulExpressionStatement",
																				"src": "2347:36:20"
																			}
																		]
																	},
																	"nativeSrc": "1744:649:20",
																	"nodeType": "YulCase",
																	"src": "1744:649:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1749:1:20",
																		"nodeType": "YulLiteral",
																		"src": "1749:1:20",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "2410:234:20",
																		"nodeType": "YulBlock",
																		"src": "2410:234:20",
																		"statements": [
																			{
																				"nativeSrc": "2424:14:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2424:14:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2437:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2437:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "2428:5:20",
																						"nodeType": "YulTypedName",
																						"src": "2428:5:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "2473:67:20",
																					"nodeType": "YulBlock",
																					"src": "2473:67:20",
																					"statements": [
																						{
																							"nativeSrc": "2491:35:20",
																							"nodeType": "YulAssignment",
																							"src": "2491:35:20",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2510:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "2510:3:20"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2515:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "2515:9:20"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2506:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "2506:3:20"
																										},
																										"nativeSrc": "2506:19:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2506:19:20"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2500:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2500:5:20"
																								},
																								"nativeSrc": "2500:26:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2500:26:20"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "2491:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2491:5:20"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "2454:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "2454:6:20"
																				},
																				"nativeSrc": "2451:89:20",
																				"nodeType": "YulIf",
																				"src": "2451:89:20"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2560:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "2560:4:20"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "2619:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2619:5:20"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "2626:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2626:6:20"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "2566:52:20",
																								"nodeType": "YulIdentifier",
																								"src": "2566:52:20"
																							},
																							"nativeSrc": "2566:67:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2566:67:20"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2553:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "2553:6:20"
																					},
																					"nativeSrc": "2553:81:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2553:81:20"
																				},
																				"nativeSrc": "2553:81:20",
																				"nodeType": "YulExpressionStatement",
																				"src": "2553:81:20"
																			}
																		]
																	},
																	"nativeSrc": "2402:242:20",
																	"nodeType": "YulCase",
																	"src": "2402:242:20",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1724:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1724:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1732:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1732:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1721:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1721:2:20"
																},
																"nativeSrc": "1721:14:20",
																"nodeType": "YulFunctionCall",
																"src": "1721:14:20"
															},
															"nativeSrc": "1714:930:20",
															"nodeType": "YulSwitch",
															"src": "1714:930:20"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "1351:1299:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "1432:4:20",
														"nodeType": "YulTypedName",
														"src": "1432:4:20",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "1438:3:20",
														"nodeType": "YulTypedName",
														"src": "1438:3:20",
														"type": ""
													}
												],
												"src": "1351:1299:20"
											},
											{
												"body": {
													"nativeSrc": "2756:102:20",
													"nodeType": "YulBlock",
													"src": "2756:102:20",
													"statements": [
														{
															"nativeSrc": "2766:26:20",
															"nodeType": "YulAssignment",
															"src": "2766:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2778:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2778:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2789:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2789:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2774:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2774:3:20"
																},
																"nativeSrc": "2774:18:20",
																"nodeType": "YulFunctionCall",
																"src": "2774:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2766:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2766:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2808:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2808:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2823:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2823:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2839:3:20",
																								"nodeType": "YulLiteral",
																								"src": "2839:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2844:1:20",
																								"nodeType": "YulLiteral",
																								"src": "2844:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2835:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "2835:3:20"
																						},
																						"nativeSrc": "2835:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "2835:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2848:1:20",
																						"nodeType": "YulLiteral",
																						"src": "2848:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2831:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2831:3:20"
																				},
																				"nativeSrc": "2831:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2831:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2819:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2819:3:20"
																		},
																		"nativeSrc": "2819:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2819:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2801:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2801:6:20"
																},
																"nativeSrc": "2801:51:20",
																"nodeType": "YulFunctionCall",
																"src": "2801:51:20"
															},
															"nativeSrc": "2801:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "2801:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2655:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2725:9:20",
														"nodeType": "YulTypedName",
														"src": "2725:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2736:6:20",
														"nodeType": "YulTypedName",
														"src": "2736:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2747:4:20",
														"nodeType": "YulTypedName",
														"src": "2747:4:20",
														"type": ""
													}
												],
												"src": "2655:203:20"
											},
											{
												"body": {
													"nativeSrc": "2895:95:20",
													"nodeType": "YulBlock",
													"src": "2895:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2912:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2912:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2919:3:20",
																				"nodeType": "YulLiteral",
																				"src": "2919:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2924:10:20",
																				"nodeType": "YulLiteral",
																				"src": "2924:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "2915:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2915:3:20"
																		},
																		"nativeSrc": "2915:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2915:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2905:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2905:6:20"
																},
																"nativeSrc": "2905:31:20",
																"nodeType": "YulFunctionCall",
																"src": "2905:31:20"
															},
															"nativeSrc": "2905:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "2905:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2952:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2952:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2955:4:20",
																		"nodeType": "YulLiteral",
																		"src": "2955:4:20",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2945:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2945:6:20"
																},
																"nativeSrc": "2945:15:20",
																"nodeType": "YulFunctionCall",
																"src": "2945:15:20"
															},
															"nativeSrc": "2945:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "2945:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2976:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2976:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2979:4:20",
																		"nodeType": "YulLiteral",
																		"src": "2979:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2969:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2969:6:20"
																},
																"nativeSrc": "2969:15:20",
																"nodeType": "YulFunctionCall",
																"src": "2969:15:20"
															},
															"nativeSrc": "2969:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "2969:15:20"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "2863:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "2863:127:20"
											},
											{
												"body": {
													"nativeSrc": "3064:306:20",
													"nodeType": "YulBlock",
													"src": "3064:306:20",
													"statements": [
														{
															"nativeSrc": "3074:10:20",
															"nodeType": "YulAssignment",
															"src": "3074:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "3083:1:20",
																"nodeType": "YulLiteral",
																"src": "3083:1:20",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3074:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3074:5:20"
																}
															]
														},
														{
															"nativeSrc": "3093:13:20",
															"nodeType": "YulAssignment",
															"src": "3093:13:20",
															"value": {
																"name": "_base",
																"nativeSrc": "3101:5:20",
																"nodeType": "YulIdentifier",
																"src": "3101:5:20"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "3093:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3093:4:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3151:213:20",
																"nodeType": "YulBlock",
																"src": "3151:213:20",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "3193:22:20",
																			"nodeType": "YulBlock",
																			"src": "3193:22:20",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "3195:16:20",
																							"nodeType": "YulIdentifier",
																							"src": "3195:16:20"
																						},
																						"nativeSrc": "3195:18:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3195:18:20"
																					},
																					"nativeSrc": "3195:18:20",
																					"nodeType": "YulExpressionStatement",
																					"src": "3195:18:20"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3171:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "3171:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "3181:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3181:3:20"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "3186:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "3186:4:20"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "3177:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "3177:3:20"
																					},
																					"nativeSrc": "3177:14:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3177:14:20"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "3168:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "3168:2:20"
																			},
																			"nativeSrc": "3168:24:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3168:24:20"
																		},
																		"nativeSrc": "3165:50:20",
																		"nodeType": "YulIf",
																		"src": "3165:50:20"
																	},
																	{
																		"body": {
																			"nativeSrc": "3248:29:20",
																			"nodeType": "YulBlock",
																			"src": "3248:29:20",
																			"statements": [
																				{
																					"nativeSrc": "3250:25:20",
																					"nodeType": "YulAssignment",
																					"src": "3250:25:20",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "3263:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "3263:5:20"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "3270:4:20",
																								"nodeType": "YulIdentifier",
																								"src": "3270:4:20"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "3259:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3259:3:20"
																						},
																						"nativeSrc": "3259:16:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3259:16:20"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "3250:5:20",
																							"nodeType": "YulIdentifier",
																							"src": "3250:5:20"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "3235:8:20",
																					"nodeType": "YulIdentifier",
																					"src": "3235:8:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3245:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3245:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "3231:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3231:3:20"
																			},
																			"nativeSrc": "3231:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3231:16:20"
																		},
																		"nativeSrc": "3228:49:20",
																		"nodeType": "YulIf",
																		"src": "3228:49:20"
																	},
																	{
																		"nativeSrc": "3290:23:20",
																		"nodeType": "YulAssignment",
																		"src": "3290:23:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3302:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "3302:4:20"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "3308:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "3308:4:20"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "3298:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3298:3:20"
																			},
																			"nativeSrc": "3298:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3298:15:20"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "3290:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "3290:4:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3326:28:20",
																		"nodeType": "YulAssignment",
																		"src": "3326:28:20",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3342:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3342:1:20",
																					"type": "",
																					"value": "1"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "3345:8:20",
																					"nodeType": "YulIdentifier",
																					"src": "3345:8:20"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "3338:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3338:3:20"
																			},
																			"nativeSrc": "3338:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3338:16:20"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "3326:8:20",
																				"nodeType": "YulIdentifier",
																				"src": "3326:8:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3126:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "3126:8:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3136:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3136:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3123:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3123:2:20"
																},
																"nativeSrc": "3123:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3123:15:20"
															},
															"nativeSrc": "3115:249:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3139:3:20",
																"nodeType": "YulBlock",
																"src": "3139:3:20",
																"statements": []
															},
															"pre": {
																"nativeSrc": "3119:3:20",
																"nodeType": "YulBlock",
																"src": "3119:3:20",
																"statements": []
															},
															"src": "3115:249:20"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "2995:375:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "3023:5:20",
														"nodeType": "YulTypedName",
														"src": "3023:5:20",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3030:8:20",
														"nodeType": "YulTypedName",
														"src": "3030:8:20",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "3040:3:20",
														"nodeType": "YulTypedName",
														"src": "3040:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3048:5:20",
														"nodeType": "YulTypedName",
														"src": "3048:5:20",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "3055:4:20",
														"nodeType": "YulTypedName",
														"src": "3055:4:20",
														"type": ""
													}
												],
												"src": "2995:375:20"
											},
											{
												"body": {
													"nativeSrc": "3434:843:20",
													"nodeType": "YulBlock",
													"src": "3434:843:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "3472:52:20",
																"nodeType": "YulBlock",
																"src": "3472:52:20",
																"statements": [
																	{
																		"nativeSrc": "3486:10:20",
																		"nodeType": "YulAssignment",
																		"src": "3486:10:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3495:1:20",
																			"nodeType": "YulLiteral",
																			"src": "3495:1:20",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3486:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "3486:5:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3509:5:20",
																		"nodeType": "YulLeave",
																		"src": "3509:5:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3454:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "3454:8:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3447:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3447:6:20"
																},
																"nativeSrc": "3447:16:20",
																"nodeType": "YulFunctionCall",
																"src": "3447:16:20"
															},
															"nativeSrc": "3444:80:20",
															"nodeType": "YulIf",
															"src": "3444:80:20"
														},
														{
															"body": {
																"nativeSrc": "3557:52:20",
																"nodeType": "YulBlock",
																"src": "3557:52:20",
																"statements": [
																	{
																		"nativeSrc": "3571:10:20",
																		"nodeType": "YulAssignment",
																		"src": "3571:10:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3580:1:20",
																			"nodeType": "YulLiteral",
																			"src": "3580:1:20",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3571:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "3571:5:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3594:5:20",
																		"nodeType": "YulLeave",
																		"src": "3594:5:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3543:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "3543:4:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3536:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3536:6:20"
																},
																"nativeSrc": "3536:12:20",
																"nodeType": "YulFunctionCall",
																"src": "3536:12:20"
															},
															"nativeSrc": "3533:76:20",
															"nodeType": "YulIf",
															"src": "3533:76:20"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "3645:52:20",
																		"nodeType": "YulBlock",
																		"src": "3645:52:20",
																		"statements": [
																			{
																				"nativeSrc": "3659:10:20",
																				"nodeType": "YulAssignment",
																				"src": "3659:10:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3668:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3668:1:20",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "3659:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "3659:5:20"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3682:5:20",
																				"nodeType": "YulLeave",
																				"src": "3682:5:20"
																			}
																		]
																	},
																	"nativeSrc": "3638:59:20",
																	"nodeType": "YulCase",
																	"src": "3638:59:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3643:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3643:1:20",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "3713:167:20",
																		"nodeType": "YulBlock",
																		"src": "3713:167:20",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "3748:22:20",
																					"nodeType": "YulBlock",
																					"src": "3748:22:20",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "3750:16:20",
																									"nodeType": "YulIdentifier",
																									"src": "3750:16:20"
																								},
																								"nativeSrc": "3750:18:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3750:18:20"
																							},
																							"nativeSrc": "3750:18:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "3750:18:20"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "3733:8:20",
																							"nodeType": "YulIdentifier",
																							"src": "3733:8:20"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3743:3:20",
																							"nodeType": "YulLiteral",
																							"src": "3743:3:20",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "3730:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "3730:2:20"
																					},
																					"nativeSrc": "3730:17:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3730:17:20"
																				},
																				"nativeSrc": "3727:43:20",
																				"nodeType": "YulIf",
																				"src": "3727:43:20"
																			},
																			{
																				"nativeSrc": "3783:25:20",
																				"nodeType": "YulAssignment",
																				"src": "3783:25:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "3796:8:20",
																							"nodeType": "YulIdentifier",
																							"src": "3796:8:20"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3806:1:20",
																							"nodeType": "YulLiteral",
																							"src": "3806:1:20",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "3792:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "3792:3:20"
																					},
																					"nativeSrc": "3792:16:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3792:16:20"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "3783:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "3783:5:20"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3821:11:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3821:11:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3831:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3831:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "_1",
																						"nativeSrc": "3825:2:20",
																						"nodeType": "YulTypedName",
																						"src": "3825:2:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "3845:7:20",
																				"nodeType": "YulAssignment",
																				"src": "3845:7:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3851:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3851:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variableNames": [
																					{
																						"name": "_1",
																						"nativeSrc": "3845:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "3845:2:20"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3865:5:20",
																				"nodeType": "YulLeave",
																				"src": "3865:5:20"
																			}
																		]
																	},
																	"nativeSrc": "3706:174:20",
																	"nodeType": "YulCase",
																	"src": "3706:174:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3711:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3711:1:20",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "3625:4:20",
																"nodeType": "YulIdentifier",
																"src": "3625:4:20"
															},
															"nativeSrc": "3618:262:20",
															"nodeType": "YulSwitch",
															"src": "3618:262:20"
														},
														{
															"body": {
																"nativeSrc": "3978:114:20",
																"nodeType": "YulBlock",
																"src": "3978:114:20",
																"statements": [
																	{
																		"nativeSrc": "3992:28:20",
																		"nodeType": "YulAssignment",
																		"src": "3992:28:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "4005:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "4005:4:20"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "4011:8:20",
																					"nodeType": "YulIdentifier",
																					"src": "4011:8:20"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "4001:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "4001:3:20"
																			},
																			"nativeSrc": "4001:19:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4001:19:20"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3992:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "3992:5:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4033:11:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4033:11:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4043:1:20",
																			"nodeType": "YulLiteral",
																			"src": "4043:1:20",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nativeSrc": "4037:2:20",
																				"nodeType": "YulTypedName",
																				"src": "4037:2:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4057:7:20",
																		"nodeType": "YulAssignment",
																		"src": "4057:7:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4063:1:20",
																			"nodeType": "YulLiteral",
																			"src": "4063:1:20",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "_2",
																				"nativeSrc": "4057:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "4057:2:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4077:5:20",
																		"nodeType": "YulLeave",
																		"src": "4077:5:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "3902:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "3902:4:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3908:2:20",
																						"nodeType": "YulLiteral",
																						"src": "3908:2:20",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3899:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "3899:2:20"
																				},
																				"nativeSrc": "3899:12:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3899:12:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "3916:8:20",
																						"nodeType": "YulIdentifier",
																						"src": "3916:8:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3926:2:20",
																						"nodeType": "YulLiteral",
																						"src": "3926:2:20",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3913:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "3913:2:20"
																				},
																				"nativeSrc": "3913:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3913:16:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3895:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3895:3:20"
																		},
																		"nativeSrc": "3895:35:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3895:35:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "3939:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "3939:4:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3945:3:20",
																						"nodeType": "YulLiteral",
																						"src": "3945:3:20",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3936:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "3936:2:20"
																				},
																				"nativeSrc": "3936:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3936:13:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "3954:8:20",
																						"nodeType": "YulIdentifier",
																						"src": "3954:8:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3964:2:20",
																						"nodeType": "YulLiteral",
																						"src": "3964:2:20",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3951:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "3951:2:20"
																				},
																				"nativeSrc": "3951:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3951:16:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3932:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3932:3:20"
																		},
																		"nativeSrc": "3932:36:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3932:36:20"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "3892:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3892:2:20"
																},
																"nativeSrc": "3892:77:20",
																"nodeType": "YulFunctionCall",
																"src": "3892:77:20"
															},
															"nativeSrc": "3889:203:20",
															"nodeType": "YulIf",
															"src": "3889:203:20"
														},
														{
															"nativeSrc": "4101:65:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4101:65:20",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4143:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "4143:4:20"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "4149:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "4149:8:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4163:1:20",
																				"nodeType": "YulLiteral",
																				"src": "4163:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "4159:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4159:3:20"
																		},
																		"nativeSrc": "4159:6:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4159:6:20"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "4124:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4124:18:20"
																},
																"nativeSrc": "4124:42:20",
																"nodeType": "YulFunctionCall",
																"src": "4124:42:20"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "4105:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4105:7:20",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "4114:6:20",
																	"nodeType": "YulTypedName",
																	"src": "4114:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4211:22:20",
																"nodeType": "YulBlock",
																"src": "4211:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4213:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "4213:16:20"
																			},
																			"nativeSrc": "4213:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4213:18:20"
																		},
																		"nativeSrc": "4213:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4213:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4181:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "4181:7:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4198:1:20",
																						"nodeType": "YulLiteral",
																						"src": "4198:1:20",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4194:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4194:3:20"
																				},
																				"nativeSrc": "4194:6:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4194:6:20"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "4202:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4202:6:20"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "4190:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4190:3:20"
																		},
																		"nativeSrc": "4190:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4190:19:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4178:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "4178:2:20"
																},
																"nativeSrc": "4178:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4178:32:20"
															},
															"nativeSrc": "4175:58:20",
															"nodeType": "YulIf",
															"src": "4175:58:20"
														},
														{
															"nativeSrc": "4242:29:20",
															"nodeType": "YulAssignment",
															"src": "4242:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4255:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "4255:7:20"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "4264:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4264:6:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4251:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4251:3:20"
																},
																"nativeSrc": "4251:20:20",
																"nodeType": "YulFunctionCall",
																"src": "4251:20:20"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4242:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4242:5:20"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "3375:902:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "3405:4:20",
														"nodeType": "YulTypedName",
														"src": "3405:4:20",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3411:8:20",
														"nodeType": "YulTypedName",
														"src": "3411:8:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3424:5:20",
														"nodeType": "YulTypedName",
														"src": "3424:5:20",
														"type": ""
													}
												],
												"src": "3375:902:20"
											},
											{
												"body": {
													"nativeSrc": "4352:61:20",
													"nodeType": "YulBlock",
													"src": "4352:61:20",
													"statements": [
														{
															"nativeSrc": "4362:45:20",
															"nodeType": "YulAssignment",
															"src": "4362:45:20",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4392:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "4392:4:20"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "4398:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "4398:8:20"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "4371:20:20",
																	"nodeType": "YulIdentifier",
																	"src": "4371:20:20"
																},
																"nativeSrc": "4371:36:20",
																"nodeType": "YulFunctionCall",
																"src": "4371:36:20"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4362:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4362:5:20"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nativeSrc": "4282:131:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "4323:4:20",
														"nodeType": "YulTypedName",
														"src": "4323:4:20",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "4329:8:20",
														"nodeType": "YulTypedName",
														"src": "4329:8:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "4342:5:20",
														"nodeType": "YulTypedName",
														"src": "4342:5:20",
														"type": ""
													}
												],
												"src": "4282:131:20"
											},
											{
												"body": {
													"nativeSrc": "4470:116:20",
													"nodeType": "YulBlock",
													"src": "4470:116:20",
													"statements": [
														{
															"nativeSrc": "4480:20:20",
															"nodeType": "YulAssignment",
															"src": "4480:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4495:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4495:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4498:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4498:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4491:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4491:3:20"
																},
																"nativeSrc": "4491:9:20",
																"nodeType": "YulFunctionCall",
																"src": "4491:9:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "4480:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4480:7:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4558:22:20",
																"nodeType": "YulBlock",
																"src": "4558:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4560:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "4560:16:20"
																			},
																			"nativeSrc": "4560:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4560:18:20"
																		},
																		"nativeSrc": "4560:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4560:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "4529:1:20",
																						"nodeType": "YulIdentifier",
																						"src": "4529:1:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "4522:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "4522:6:20"
																				},
																				"nativeSrc": "4522:9:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4522:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "4536:1:20",
																						"nodeType": "YulIdentifier",
																						"src": "4536:1:20"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "4543:7:20",
																								"nodeType": "YulIdentifier",
																								"src": "4543:7:20"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "4552:1:20",
																								"nodeType": "YulIdentifier",
																								"src": "4552:1:20"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "4539:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "4539:3:20"
																						},
																						"nativeSrc": "4539:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "4539:15:20"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "4533:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4533:2:20"
																				},
																				"nativeSrc": "4533:22:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4533:22:20"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4519:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "4519:2:20"
																		},
																		"nativeSrc": "4519:37:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4519:37:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4512:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4512:6:20"
																},
																"nativeSrc": "4512:45:20",
																"nodeType": "YulFunctionCall",
																"src": "4512:45:20"
															},
															"nativeSrc": "4509:71:20",
															"nodeType": "YulIf",
															"src": "4509:71:20"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "4418:168:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4449:1:20",
														"nodeType": "YulTypedName",
														"src": "4449:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4452:1:20",
														"nodeType": "YulTypedName",
														"src": "4452:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "4458:7:20",
														"nodeType": "YulTypedName",
														"src": "4458:7:20",
														"type": ""
													}
												],
												"src": "4418:168:20"
											},
											{
												"body": {
													"nativeSrc": "4640:79:20",
													"nodeType": "YulBlock",
													"src": "4640:79:20",
													"statements": [
														{
															"nativeSrc": "4650:17:20",
															"nodeType": "YulAssignment",
															"src": "4650:17:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4662:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4662:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4665:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4665:1:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "4658:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4658:3:20"
																},
																"nativeSrc": "4658:9:20",
																"nodeType": "YulFunctionCall",
																"src": "4658:9:20"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "4650:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "4650:4:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4691:22:20",
																"nodeType": "YulBlock",
																"src": "4691:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4693:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "4693:16:20"
																			},
																			"nativeSrc": "4693:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4693:18:20"
																		},
																		"nativeSrc": "4693:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4693:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "4682:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "4682:4:20"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "4688:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4688:1:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4679:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "4679:2:20"
																},
																"nativeSrc": "4679:11:20",
																"nodeType": "YulFunctionCall",
																"src": "4679:11:20"
															},
															"nativeSrc": "4676:37:20",
															"nodeType": "YulIf",
															"src": "4676:37:20"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "4591:128:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4622:1:20",
														"nodeType": "YulTypedName",
														"src": "4622:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4625:1:20",
														"nodeType": "YulTypedName",
														"src": "4625:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "4631:4:20",
														"nodeType": "YulTypedName",
														"src": "4631:4:20",
														"type": ""
													}
												],
												"src": "4591:128:20"
											},
											{
												"body": {
													"nativeSrc": "4937:276:20",
													"nodeType": "YulBlock",
													"src": "4937:276:20",
													"statements": [
														{
															"nativeSrc": "4947:27:20",
															"nodeType": "YulAssignment",
															"src": "4947:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4959:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4959:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4970:3:20",
																		"nodeType": "YulLiteral",
																		"src": "4970:3:20",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4955:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4955:3:20"
																},
																"nativeSrc": "4955:19:20",
																"nodeType": "YulFunctionCall",
																"src": "4955:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4947:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "4947:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4990:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4990:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "5001:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5001:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4983:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4983:6:20"
																},
																"nativeSrc": "4983:25:20",
																"nodeType": "YulFunctionCall",
																"src": "4983:25:20"
															},
															"nativeSrc": "4983:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "4983:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5028:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5028:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5039:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5039:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5024:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5024:3:20"
																		},
																		"nativeSrc": "5024:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5024:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "5044:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5044:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5017:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5017:6:20"
																},
																"nativeSrc": "5017:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5017:34:20"
															},
															"nativeSrc": "5017:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5017:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5071:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5071:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5082:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5082:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5067:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5067:3:20"
																		},
																		"nativeSrc": "5067:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5067:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "5087:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5087:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5060:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5060:6:20"
																},
																"nativeSrc": "5060:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5060:34:20"
															},
															"nativeSrc": "5060:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5060:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5114:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5114:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5125:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5125:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5110:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5110:3:20"
																		},
																		"nativeSrc": "5110:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5110:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "5130:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5130:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5103:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5103:6:20"
																},
																"nativeSrc": "5103:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5103:34:20"
															},
															"nativeSrc": "5103:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5103:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5157:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5157:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5168:3:20",
																				"nodeType": "YulLiteral",
																				"src": "5168:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5153:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5153:3:20"
																		},
																		"nativeSrc": "5153:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5153:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "5178:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5178:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5194:3:20",
																								"nodeType": "YulLiteral",
																								"src": "5194:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5199:1:20",
																								"nodeType": "YulLiteral",
																								"src": "5199:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5190:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5190:3:20"
																						},
																						"nativeSrc": "5190:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5190:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5203:1:20",
																						"nodeType": "YulLiteral",
																						"src": "5203:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5186:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5186:3:20"
																				},
																				"nativeSrc": "5186:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5186:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5174:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5174:3:20"
																		},
																		"nativeSrc": "5174:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5174:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5146:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5146:6:20"
																},
																"nativeSrc": "5146:61:20",
																"nodeType": "YulFunctionCall",
																"src": "5146:61:20"
															},
															"nativeSrc": "5146:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "5146:61:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "4724:489:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4874:9:20",
														"nodeType": "YulTypedName",
														"src": "4874:9:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "4885:6:20",
														"nodeType": "YulTypedName",
														"src": "4885:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "4893:6:20",
														"nodeType": "YulTypedName",
														"src": "4893:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4901:6:20",
														"nodeType": "YulTypedName",
														"src": "4901:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4909:6:20",
														"nodeType": "YulTypedName",
														"src": "4909:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4917:6:20",
														"nodeType": "YulTypedName",
														"src": "4917:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4928:4:20",
														"nodeType": "YulTypedName",
														"src": "4928:4:20",
														"type": ""
													}
												],
												"src": "4724:489:20"
											},
											{
												"body": {
													"nativeSrc": "5339:297:20",
													"nodeType": "YulBlock",
													"src": "5339:297:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5356:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5356:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5367:2:20",
																		"nodeType": "YulLiteral",
																		"src": "5367:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5349:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5349:6:20"
																},
																"nativeSrc": "5349:21:20",
																"nodeType": "YulFunctionCall",
																"src": "5349:21:20"
															},
															"nativeSrc": "5349:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "5349:21:20"
														},
														{
															"nativeSrc": "5379:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5379:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5399:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5399:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5393:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5393:5:20"
																},
																"nativeSrc": "5393:13:20",
																"nodeType": "YulFunctionCall",
																"src": "5393:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "5383:6:20",
																	"nodeType": "YulTypedName",
																	"src": "5383:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5426:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5426:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5437:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5437:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5422:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5422:3:20"
																		},
																		"nativeSrc": "5422:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5422:18:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "5442:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5442:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5415:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5415:6:20"
																},
																"nativeSrc": "5415:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5415:34:20"
															},
															"nativeSrc": "5415:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5415:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5468:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5468:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5479:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5479:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5464:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5464:3:20"
																		},
																		"nativeSrc": "5464:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5464:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5488:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5488:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5496:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5496:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5484:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5484:3:20"
																		},
																		"nativeSrc": "5484:15:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5484:15:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "5501:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5501:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "5458:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5458:5:20"
																},
																"nativeSrc": "5458:50:20",
																"nodeType": "YulFunctionCall",
																"src": "5458:50:20"
															},
															"nativeSrc": "5458:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "5458:50:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5532:9:20",
																						"nodeType": "YulIdentifier",
																						"src": "5532:9:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "5543:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "5543:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5528:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5528:3:20"
																				},
																				"nativeSrc": "5528:22:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5528:22:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5552:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5552:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5524:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5524:3:20"
																		},
																		"nativeSrc": "5524:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5524:31:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5557:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5557:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5517:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5517:6:20"
																},
																"nativeSrc": "5517:42:20",
																"nodeType": "YulFunctionCall",
																"src": "5517:42:20"
															},
															"nativeSrc": "5517:42:20",
															"nodeType": "YulExpressionStatement",
															"src": "5517:42:20"
														},
														{
															"nativeSrc": "5568:62:20",
															"nodeType": "YulAssignment",
															"src": "5568:62:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5584:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5584:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "5603:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "5603:6:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5611:2:20",
																								"nodeType": "YulLiteral",
																								"src": "5611:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "5599:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5599:3:20"
																						},
																						"nativeSrc": "5599:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5599:15:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5620:2:20",
																								"nodeType": "YulLiteral",
																								"src": "5620:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "5616:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5616:3:20"
																						},
																						"nativeSrc": "5616:7:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5616:7:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "5595:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5595:3:20"
																				},
																				"nativeSrc": "5595:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5595:29:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5580:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5580:3:20"
																		},
																		"nativeSrc": "5580:45:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5580:45:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5627:2:20",
																		"nodeType": "YulLiteral",
																		"src": "5627:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5576:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5576:3:20"
																},
																"nativeSrc": "5576:54:20",
																"nodeType": "YulFunctionCall",
																"src": "5576:54:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5568:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "5568:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "5218:418:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5308:9:20",
														"nodeType": "YulTypedName",
														"src": "5308:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5319:6:20",
														"nodeType": "YulTypedName",
														"src": "5319:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5330:4:20",
														"nodeType": "YulTypedName",
														"src": "5330:4:20",
														"type": ""
													}
												],
												"src": "5218:418:20"
											},
											{
												"body": {
													"nativeSrc": "5735:203:20",
													"nodeType": "YulBlock",
													"src": "5735:203:20",
													"statements": [
														{
															"nativeSrc": "5745:26:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5745:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "5765:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "5765:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5759:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5759:5:20"
																},
																"nativeSrc": "5759:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5759:12:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "5749:6:20",
																	"nodeType": "YulTypedName",
																	"src": "5749:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5780:32:20",
															"nodeType": "YulAssignment",
															"src": "5780:32:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nativeSrc": "5799:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5799:5:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5806:4:20",
																				"nodeType": "YulLiteral",
																				"src": "5806:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5795:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5795:3:20"
																		},
																		"nativeSrc": "5795:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5795:16:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5789:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5789:5:20"
																},
																"nativeSrc": "5789:23:20",
																"nodeType": "YulFunctionCall",
																"src": "5789:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "5780:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5780:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5849:83:20",
																"nodeType": "YulBlock",
																"src": "5849:83:20",
																"statements": [
																	{
																		"nativeSrc": "5863:59:20",
																		"nodeType": "YulAssignment",
																		"src": "5863:59:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nativeSrc": "5876:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "5876:5:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5891:1:20",
																									"nodeType": "YulLiteral",
																									"src": "5891:1:20",
																									"type": "",
																									"value": "3"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "5898:4:20",
																											"nodeType": "YulLiteral",
																											"src": "5898:4:20",
																											"type": "",
																											"value": "0x20"
																										},
																										{
																											"name": "length",
																											"nativeSrc": "5904:6:20",
																											"nodeType": "YulIdentifier",
																											"src": "5904:6:20"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nativeSrc": "5894:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "5894:3:20"
																									},
																									"nativeSrc": "5894:17:20",
																									"nodeType": "YulFunctionCall",
																									"src": "5894:17:20"
																								}
																							],
																							"functionName": {
																								"name": "shl",
																								"nativeSrc": "5887:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "5887:3:20"
																							},
																							"nativeSrc": "5887:25:20",
																							"nodeType": "YulFunctionCall",
																							"src": "5887:25:20"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5918:1:20",
																									"nodeType": "YulLiteral",
																									"src": "5918:1:20",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5914:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "5914:3:20"
																							},
																							"nativeSrc": "5914:6:20",
																							"nodeType": "YulFunctionCall",
																							"src": "5914:6:20"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5883:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "5883:3:20"
																					},
																					"nativeSrc": "5883:38:20",
																					"nodeType": "YulFunctionCall",
																					"src": "5883:38:20"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5872:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5872:3:20"
																			},
																			"nativeSrc": "5872:50:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5872:50:20"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "5863:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5863:5:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "5827:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5827:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5835:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5835:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5824:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5824:2:20"
																},
																"nativeSrc": "5824:16:20",
																"nodeType": "YulFunctionCall",
																"src": "5824:16:20"
															},
															"nativeSrc": "5821:111:20",
															"nodeType": "YulIf",
															"src": "5821:111:20"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nativeSrc": "5641:297:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "5715:5:20",
														"nodeType": "YulTypedName",
														"src": "5715:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "5725:5:20",
														"nodeType": "YulTypedName",
														"src": "5725:5:20",
														"type": ""
													}
												],
												"src": "5641:297:20"
											},
											{
												"body": {
													"nativeSrc": "5991:77:20",
													"nodeType": "YulBlock",
													"src": "5991:77:20",
													"statements": [
														{
															"nativeSrc": "6001:16:20",
															"nodeType": "YulAssignment",
															"src": "6001:16:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6012:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6012:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6015:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6015:1:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6008:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6008:3:20"
																},
																"nativeSrc": "6008:9:20",
																"nodeType": "YulFunctionCall",
																"src": "6008:9:20"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "6001:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6001:3:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6040:22:20",
																"nodeType": "YulBlock",
																"src": "6040:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6042:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "6042:16:20"
																			},
																			"nativeSrc": "6042:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6042:18:20"
																		},
																		"nativeSrc": "6042:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6042:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6032:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6032:1:20"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "6035:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "6035:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6029:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "6029:2:20"
																},
																"nativeSrc": "6029:10:20",
																"nodeType": "YulFunctionCall",
																"src": "6029:10:20"
															},
															"nativeSrc": "6026:36:20",
															"nodeType": "YulIf",
															"src": "6026:36:20"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "5943:125:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "5974:1:20",
														"nodeType": "YulTypedName",
														"src": "5974:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "5977:1:20",
														"nodeType": "YulTypedName",
														"src": "5977:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "5983:3:20",
														"nodeType": "YulTypedName",
														"src": "5983:3:20",
														"type": ""
													}
												],
												"src": "5943:125:20"
											},
											{
												"body": {
													"nativeSrc": "6230:188:20",
													"nodeType": "YulBlock",
													"src": "6230:188:20",
													"statements": [
														{
															"nativeSrc": "6240:26:20",
															"nodeType": "YulAssignment",
															"src": "6240:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6252:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6252:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6263:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6263:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6248:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6248:3:20"
																},
																"nativeSrc": "6248:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6248:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6240:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6240:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6282:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6282:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6297:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6297:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6313:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6313:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6318:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6318:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6309:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6309:3:20"
																						},
																						"nativeSrc": "6309:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6309:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6322:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6322:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6305:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6305:3:20"
																				},
																				"nativeSrc": "6305:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6305:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6293:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6293:3:20"
																		},
																		"nativeSrc": "6293:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6293:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6275:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6275:6:20"
																},
																"nativeSrc": "6275:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6275:51:20"
															},
															"nativeSrc": "6275:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6275:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6346:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6346:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6357:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6357:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6342:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6342:3:20"
																		},
																		"nativeSrc": "6342:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6342:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6362:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6362:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6335:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6335:6:20"
																},
																"nativeSrc": "6335:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6335:34:20"
															},
															"nativeSrc": "6335:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6335:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6389:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6389:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6400:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6400:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6385:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6385:3:20"
																		},
																		"nativeSrc": "6385:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6385:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "6405:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6405:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6378:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6378:6:20"
																},
																"nativeSrc": "6378:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6378:34:20"
															},
															"nativeSrc": "6378:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6378:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6073:345:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6183:9:20",
														"nodeType": "YulTypedName",
														"src": "6183:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6194:6:20",
														"nodeType": "YulTypedName",
														"src": "6194:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6202:6:20",
														"nodeType": "YulTypedName",
														"src": "6202:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6210:6:20",
														"nodeType": "YulTypedName",
														"src": "6210:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6221:4:20",
														"nodeType": "YulTypedName",
														"src": "6221:4:20",
														"type": ""
													}
												],
												"src": "6073:345:20"
											},
											{
												"body": {
													"nativeSrc": "6524:76:20",
													"nodeType": "YulBlock",
													"src": "6524:76:20",
													"statements": [
														{
															"nativeSrc": "6534:26:20",
															"nodeType": "YulAssignment",
															"src": "6534:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6546:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6546:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6557:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6557:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6542:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6542:3:20"
																},
																"nativeSrc": "6542:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6542:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6534:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6534:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6576:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6576:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6587:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6587:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6569:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6569:6:20"
																},
																"nativeSrc": "6569:25:20",
																"nodeType": "YulFunctionCall",
																"src": "6569:25:20"
															},
															"nativeSrc": "6569:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "6569:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "6423:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6493:9:20",
														"nodeType": "YulTypedName",
														"src": "6493:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6504:6:20",
														"nodeType": "YulTypedName",
														"src": "6504:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6515:4:20",
														"nodeType": "YulTypedName",
														"src": "6515:4:20",
														"type": ""
													}
												],
												"src": "6423:177:20"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent, max) -> power, base\n    {\n        power := 1\n        base := _base\n        for { } gt(exponent, 1) { }\n        {\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            let _1 := 0\n            _1 := 0\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            let _2 := 0\n            _2 := 0\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent, not(0))\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "610160604052348015610010575f80fd5b5033604051806040016040528060048152602001630435344560e41b81525080604051806040016040528060018152602001603160f81b815250604051806040016040528060048152602001630435344560e41b815250604051806040016040528060048152602001630435344560e41b815250816003908161009391906104c4565b5060046100a082826104c4565b506100b09150839050600561020e565b610120526100bf81600661020e565b61014052815160208084019190912060e052815190820120610100524660a05261014b60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661018357604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61018c81610240565b50600160095561019e6012600a610675565b6101ac906305f5e100610687565b600b556001600a5560126101c49060ff16600a610675565b6101d190620186a0610687565b600b5f8282546101e1919061069e565b909155506102099050336101f76012600a610675565b61020490620186a0610687565b610291565b61071c565b5f60208351101561022957610222836102c9565b905061023a565b8161023484826104c4565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166102ba5760405163ec442f0560e01b81525f600482015260240161017a565b6102c55f8383610306565b5050565b5f80829050601f815111156102f3578260405163305a27a960e01b815260040161017a91906106b1565b80516102fe826106e6565b179392505050565b6001600160a01b038316610330578060025f8282546103259190610709565b909155506103a09050565b6001600160a01b0383165f90815260208190526040902054818110156103825760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161017a565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166103bc576002805482900390556103da565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161041f91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061045457607f821691505b60208210810361047257634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104bf57805f5260205f20601f840160051c8101602085101561049d5750805b601f840160051c820191505b818110156104bc575f81556001016104a9565b50505b505050565b81516001600160401b038111156104dd576104dd61042c565b6104f1816104eb8454610440565b84610478565b6020601f821160018114610523575f831561050c5750848201515b5f19600385901b1c1916600184901b1784556104bc565b5f84815260208120601f198516915b828110156105525787850151825560209485019460019092019101610532565b508482101561056f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156105cd578085048111156105b1576105b161057e565b60018416156105bf57908102905b60019390931c928002610596565b935093915050565b5f826105e35750600161023a565b816105ef57505f61023a565b8160018114610605576002811461060f5761062b565b600191505061023a565b60ff8411156106205761062061057e565b50506001821b61023a565b5060208310610133831016604e8410600b841016171561064e575081810a61023a565b61065a5f198484610592565b805f190482111561066d5761066d61057e565b029392505050565b5f61068083836105d5565b9392505050565b808202811582820484141761023a5761023a61057e565b8181038181111561023a5761023a61057e565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80516020808301519190811015610472575f1960209190910360031b1b16919050565b8082018082111561023a5761023a61057e565b60805160a05160c05160e0516101005161012051610140516113de61076d5f395f610b4801525f610b1b01525f6109ed01525f6109c501525f61092001525f61094a01525f61097401526113de5ff3fe60806040526004361061011b575f3560e01c80637ecebe001161009d578063a9059cbb11610062578063a9059cbb146102f7578063b8972db514610316578063d505accf1461031e578063dd62ed3e1461033d578063f2fde38b14610381575f80fd5b80637ecebe00146102615780637ff9b5961461028057806384b0196e146102955780638da5cb5b146102bc57806395d89b41146102e3575f80fd5b80633644e515116100e35780633644e515146101d05780633ccfd60b146101e45780636a61e5fc146101fa57806370a0823114610219578063715018a61461024d575f80fd5b806306fdde031461011f578063095ea7b31461014957806318160ddd1461017857806323b872dd14610196578063313ce567146101b5575b5f80fd5b34801561012a575f80fd5b506101336103a0565b60405161014091906110f2565b60405180910390f35b348015610154575f80fd5b50610168610163366004611126565b610430565b6040519015158152602001610140565b348015610183575f80fd5b506002545b604051908152602001610140565b3480156101a1575f80fd5b506101686101b036600461114e565b610449565b3480156101c0575f80fd5b5060405160128152602001610140565b3480156101db575f80fd5b5061018861046c565b3480156101ef575f80fd5b506101f861047a565b005b348015610205575f80fd5b506101f8610214366004611188565b6104cd565b348015610224575f80fd5b5061018861023336600461119f565b6001600160a01b03165f9081526020819052604090205490565b348015610258575f80fd5b506101f86104da565b34801561026c575f80fd5b5061018861027b36600461119f565b6104eb565b34801561028b575f80fd5b50610188600a5481565b3480156102a0575f80fd5b506102a9610508565b60405161014097969594939291906111b8565b3480156102c7575f80fd5b506008546040516001600160a01b039091168152602001610140565b3480156102ee575f80fd5b5061013361054a565b348015610302575f80fd5b50610168610311366004611126565b610559565b6101886105a8565b348015610329575f80fd5b506101f861033836600461124e565b6106b7565b348015610348575f80fd5b506101886103573660046112bb565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b34801561038c575f80fd5b506101f861039b36600461119f565b6107ed565b6060600380546103af906112ec565b80601f01602080910402602001604051908101604052809291908181526020018280546103db906112ec565b80156104265780601f106103fd57610100808354040283529160200191610426565b820191905f5260205f20905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b5f3361043d81858561082a565b60019150505b92915050565b5f3361045685828561083c565b6104618585856108b7565b506001949350505050565b5f610475610914565b905090565b610482610a3d565b61048a610a96565b6008546040516001600160a01b03909116904780156108fc02915f818181858888f193505050501580156104c0573d5f803e3d5ffd5b506104cb6001600955565b565b6104d5610a96565b600a55565b6104e2610a96565b6104cb5f610ac3565b6001600160a01b0381165f90815260076020526040812054610443565b5f6060805f805f6060610519610b14565b610521610b41565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600480546103af906112ec565b5f610562610a3d565b5f620186a0610572846002611338565b61057c919061134f565b90506105883382610b6e565b61059b84610596838661136e565b610ba6565b9150506104436001600955565b5f6105b1610a3d565b5f341161060f5760405162461bcd60e51b815260206004820152602160248201527f596f75206d7573742073656e6420457468657220746f2067657420746f6b656e6044820152607360f81b60648201526084015b60405180910390fd5b5f600a543461061e919061134f565b61062a906103e8611338565b90505f600b541161067d5760405162461bcd60e51b815260206004820152601c60248201527f4e6f206d6f726520746f6b656e732063616e206265206d696e746564000000006044820152606401610606565b80600b5f82825461068e919061136e565b9091555061069e90503382610bb3565b5050335f90815260208190526040902054600160095590565b834211156106db5760405163313c898160e11b815260048101859052602401610606565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107268c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61078082610be7565b90505f61078f82878787610c13565b9050896001600160a01b0316816001600160a01b0316146107d6576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610606565b6107e18a8a8a61082a565b50505050505050505050565b6107f5610a96565b6001600160a01b03811661081e57604051631e4fbdf760e01b81525f6004820152602401610606565b61082781610ac3565b50565b6108378383836001610c3f565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981146108b157818110156108a357604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610606565b6108b184848484035f610c3f565b50505050565b6001600160a01b0383166108e057604051634b637e8f60e11b81525f6004820152602401610606565b6001600160a01b0382166109095760405163ec442f0560e01b81525f6004820152602401610606565b610837838383610d11565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561096c57507f000000000000000000000000000000000000000000000000000000000000000046145b1561099657507f000000000000000000000000000000000000000000000000000000000000000090565b610475604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b600260095403610a8f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610606565b6002600955565b6008546001600160a01b031633146104cb5760405163118cdaa760e01b8152336004820152602401610606565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b60606104757f00000000000000000000000000000000000000000000000000000000000000006005610e37565b60606104757f00000000000000000000000000000000000000000000000000000000000000006006610e37565b6001600160a01b038216610b9757604051634b637e8f60e11b81525f6004820152602401610606565b610ba2825f83610d11565b5050565b5f3361043d8185856108b7565b6001600160a01b038216610bdc5760405163ec442f0560e01b81525f6004820152602401610606565b610ba25f8383610d11565b5f610443610bf3610914565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f80610c2388888888610ee0565b925092509250610c338282610fa8565b50909695505050505050565b6001600160a01b038416610c685760405163e602df0560e01b81525f6004820152602401610606565b6001600160a01b038316610c9157604051634a1406b160e11b81525f6004820152602401610606565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156108b157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d0391815260200190565b60405180910390a350505050565b6001600160a01b038316610d3b578060025f828254610d309190611381565b90915550610dab9050565b6001600160a01b0383165f9081526020819052604090205481811015610d8d5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610606565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610dc757600280548290039055610de5565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e2a91815260200190565b60405180910390a3505050565b606060ff8314610e5157610e4a83611060565b9050610443565b818054610e5d906112ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610e89906112ec565b8015610ed45780601f10610eab57610100808354040283529160200191610ed4565b820191905f5260205f20905b815481529060010190602001808311610eb757829003601f168201915b50505050509050610443565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610f1957505f91506003905082610f9e565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610f6a573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610f9557505f925060019150829050610f9e565b92505f91508190505b9450945094915050565b5f826003811115610fbb57610fbb611394565b03610fc4575050565b6001826003811115610fd857610fd8611394565b03610ff65760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561100a5761100a611394565b0361102b5760405163fce698f760e01b815260048101829052602401610606565b600382600381111561103f5761103f611394565b03610ba2576040516335e2f38360e21b815260048101829052602401610606565b60605f61106c8361109d565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f81111561044357604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61110460208301846110c4565b9392505050565b80356001600160a01b0381168114611121575f80fd5b919050565b5f8060408385031215611137575f80fd5b6111408361110b565b946020939093013593505050565b5f805f60608486031215611160575f80fd5b6111698461110b565b92506111776020850161110b565b929592945050506040919091013590565b5f60208284031215611198575f80fd5b5035919050565b5f602082840312156111af575f80fd5b6111048261110b565b60ff60f81b8816815260e060208201525f6111d660e08301896110c4565b82810360408401526111e881896110c4565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561123d57835183526020938401939092019160010161121f565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215611264575f80fd5b61126d8861110b565b965061127b6020890161110b565b95506040880135945060608801359350608088013560ff8116811461129e575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f80604083850312156112cc575f80fd5b6112d58361110b565b91506112e36020840161110b565b90509250929050565b600181811c9082168061130057607f821691505b60208210810361131e57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761044357610443611324565b5f8261136957634e487b7160e01b5f52601260045260245ffd5b500490565b8181038181111561044357610443611324565b8082018082111561044357610443611324565b634e487b7160e01b5f52602160045260245ffdfea2646970667358221220678aee7add9ecb4350a1169000e7aebf707f333b394c738f5c660ca74e77e7e964736f6c634300081a0033",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x4353445 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x4353445 PUSH1 0xE4 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x4353445 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x93 SWAP2 SWAP1 PUSH2 0x4C4 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0xA0 DUP3 DUP3 PUSH2 0x4C4 JUMP JUMPDEST POP PUSH2 0xB0 SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH2 0x20E JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0xBF DUP2 PUSH1 0x6 PUSH2 0x20E JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x14B PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18C DUP2 PUSH2 0x240 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x9 SSTORE PUSH2 0x19E PUSH1 0x12 PUSH1 0xA PUSH2 0x675 JUMP JUMPDEST PUSH2 0x1AC SWAP1 PUSH4 0x5F5E100 PUSH2 0x687 JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0x1 PUSH1 0xA SSTORE PUSH1 0x12 PUSH2 0x1C4 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x675 JUMP JUMPDEST PUSH2 0x1D1 SWAP1 PUSH3 0x186A0 PUSH2 0x687 JUMP JUMPDEST PUSH1 0xB PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x69E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x209 SWAP1 POP CALLER PUSH2 0x1F7 PUSH1 0x12 PUSH1 0xA PUSH2 0x675 JUMP JUMPDEST PUSH2 0x204 SWAP1 PUSH3 0x186A0 PUSH2 0x687 JUMP JUMPDEST PUSH2 0x291 JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x229 JUMPI PUSH2 0x222 DUP4 PUSH2 0x2C9 JUMP JUMPDEST SWAP1 POP PUSH2 0x23A JUMP JUMPDEST DUP2 PUSH2 0x234 DUP5 DUP3 PUSH2 0x4C4 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x17A JUMP JUMPDEST PUSH2 0x2C5 PUSH0 DUP4 DUP4 PUSH2 0x306 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x2F3 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2FE DUP3 PUSH2 0x6E6 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x330 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x325 SWAP2 SWAP1 PUSH2 0x709 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3A0 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x382 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x17A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3BC JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x3DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x41F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x454 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x472 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x4BF JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x49D JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4BC JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4A9 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4DD JUMPI PUSH2 0x4DD PUSH2 0x42C JUMP JUMPDEST PUSH2 0x4F1 DUP2 PUSH2 0x4EB DUP5 SLOAD PUSH2 0x440 JUMP JUMPDEST DUP5 PUSH2 0x478 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x523 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x50C JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x4BC JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x552 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x532 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x56F JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0x5CD JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0x5B1 JUMPI PUSH2 0x5B1 PUSH2 0x57E JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x5BF JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0x596 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x5E3 JUMPI POP PUSH1 0x1 PUSH2 0x23A JUMP JUMPDEST DUP2 PUSH2 0x5EF JUMPI POP PUSH0 PUSH2 0x23A JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x605 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x60F JUMPI PUSH2 0x62B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x23A JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x620 JUMPI PUSH2 0x620 PUSH2 0x57E JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x23A JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x64E JUMPI POP DUP2 DUP2 EXP PUSH2 0x23A JUMP JUMPDEST PUSH2 0x65A PUSH0 NOT DUP5 DUP5 PUSH2 0x592 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x66D JUMPI PUSH2 0x66D PUSH2 0x57E JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x680 DUP4 DUP4 PUSH2 0x5D5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x23A JUMPI PUSH2 0x23A PUSH2 0x57E JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x23A JUMPI PUSH2 0x23A PUSH2 0x57E JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x472 JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x23A JUMPI PUSH2 0x23A PUSH2 0x57E JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x13DE PUSH2 0x76D PUSH0 CODECOPY PUSH0 PUSH2 0xB48 ADD MSTORE PUSH0 PUSH2 0xB1B ADD MSTORE PUSH0 PUSH2 0x9ED ADD MSTORE PUSH0 PUSH2 0x9C5 ADD MSTORE PUSH0 PUSH2 0x920 ADD MSTORE PUSH0 PUSH2 0x94A ADD MSTORE PUSH0 PUSH2 0x974 ADD MSTORE PUSH2 0x13DE PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x11B JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x9D JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x62 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xB8972DB5 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x381 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x7FF9B596 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2E3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x6A61E5FC EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x133 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x154 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x114E JUMP JUMPDEST PUSH2 0x449 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x46C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x47A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x1188 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x224 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x233 CALLDATASIZE PUSH1 0x4 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x258 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x4DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x119F JUMP JUMPDEST PUSH2 0x4EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A9 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x133 PUSH2 0x54A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x302 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x311 CALLDATASIZE PUSH1 0x4 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0x559 JUMP JUMPDEST PUSH2 0x188 PUSH2 0x5A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x329 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0x124E JUMP JUMPDEST PUSH2 0x6B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x357 CALLDATASIZE PUSH1 0x4 PUSH2 0x12BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x119F JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x3AF SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3DB SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x43D DUP2 DUP6 DUP6 PUSH2 0x82A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x456 DUP6 DUP3 DUP6 PUSH2 0x83C JUMP JUMPDEST PUSH2 0x461 DUP6 DUP6 DUP6 PUSH2 0x8B7 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x475 PUSH2 0x914 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x482 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x48A PUSH2 0xA96 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4C0 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH2 0x4CB PUSH1 0x1 PUSH1 0x9 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D5 PUSH2 0xA96 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST PUSH2 0x4E2 PUSH2 0xA96 JUMP JUMPDEST PUSH2 0x4CB PUSH0 PUSH2 0xAC3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x443 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x519 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x521 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3AF SWAP1 PUSH2 0x12EC JUMP JUMPDEST PUSH0 PUSH2 0x562 PUSH2 0xA3D JUMP JUMPDEST PUSH0 PUSH3 0x186A0 PUSH2 0x572 DUP5 PUSH1 0x2 PUSH2 0x1338 JUMP JUMPDEST PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x134F JUMP JUMPDEST SWAP1 POP PUSH2 0x588 CALLER DUP3 PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x59B DUP5 PUSH2 0x596 DUP4 DUP7 PUSH2 0x136E JUMP JUMPDEST PUSH2 0xBA6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x443 PUSH1 0x1 PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH0 PUSH2 0x5B1 PUSH2 0xA3D JUMP JUMPDEST PUSH0 CALLVALUE GT PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D7573742073656E6420457468657220746F2067657420746F6B656E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0xA SLOAD CALLVALUE PUSH2 0x61E SWAP2 SWAP1 PUSH2 0x134F JUMP JUMPDEST PUSH2 0x62A SWAP1 PUSH2 0x3E8 PUSH2 0x1338 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0xB SLOAD GT PUSH2 0x67D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206D6F726520746F6B656E732063616E206265206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST DUP1 PUSH1 0xB PUSH0 DUP3 DUP3 SLOAD PUSH2 0x68E SWAP2 SWAP1 PUSH2 0x136E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x69E SWAP1 POP CALLER DUP3 PUSH2 0xBB3 JUMP JUMPDEST POP POP CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x9 SSTORE SWAP1 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x6DB JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x726 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x780 DUP3 PUSH2 0xBE7 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x78F DUP3 DUP8 DUP8 DUP8 PUSH2 0xC13 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x7E1 DUP11 DUP11 DUP11 PUSH2 0x82A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7F5 PUSH2 0xA96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x827 DUP2 PUSH2 0xAC3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x837 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xC3F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x8B1 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x8B1 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0xC3F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x909 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x837 DUP4 DUP4 DUP4 PUSH2 0xD11 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x96C JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x996 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x475 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x9 SLOAD SUB PUSH2 0xA8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4CB JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x475 PUSH32 0x0 PUSH1 0x5 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x475 PUSH32 0x0 PUSH1 0x6 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0xBA2 DUP3 PUSH0 DUP4 PUSH2 0xD11 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x43D DUP2 DUP6 DUP6 PUSH2 0x8B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBDC JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0xBA2 PUSH0 DUP4 DUP4 PUSH2 0xD11 JUMP JUMPDEST PUSH0 PUSH2 0x443 PUSH2 0xBF3 PUSH2 0x914 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0xC23 DUP9 DUP9 DUP9 DUP9 PUSH2 0xEE0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xC33 DUP3 DUP3 PUSH2 0xFA8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xC68 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC91 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x8B1 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xD03 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD3B JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xD30 SWAP2 SWAP1 PUSH2 0x1381 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xDAB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xD8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDC7 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xDE5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xE2A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xE51 JUMPI PUSH2 0xE4A DUP4 PUSH2 0x1060 JUMP JUMPDEST SWAP1 POP PUSH2 0x443 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xE5D SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE89 SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xED4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEAB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEB7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x443 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xF19 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF6A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF95 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xF9E JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFBB JUMPI PUSH2 0xFBB PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0xFC4 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFD8 JUMPI PUSH2 0xFD8 PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0xFF6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x100A JUMPI PUSH2 0x100A PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0x102B JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x103F JUMPI PUSH2 0x103F PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0xBA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x106C DUP4 PUSH2 0x109D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x443 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x1104 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x10C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1121 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1137 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1140 DUP4 PUSH2 0x110B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1160 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1169 DUP5 PUSH2 0x110B JUMP JUMPDEST SWAP3 POP PUSH2 0x1177 PUSH1 0x20 DUP6 ADD PUSH2 0x110B JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1198 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11AF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1104 DUP3 PUSH2 0x110B JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x11D6 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0x10C4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x11E8 DUP2 DUP10 PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x123D JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x121F JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1264 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x126D DUP9 PUSH2 0x110B JUMP JUMPDEST SWAP7 POP PUSH2 0x127B PUSH1 0x20 DUP10 ADD PUSH2 0x110B JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x129E JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12CC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x12D5 DUP4 PUSH2 0x110B JUMP JUMPDEST SWAP2 POP PUSH2 0x12E3 PUSH1 0x20 DUP5 ADD PUSH2 0x110B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1300 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x131E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x443 JUMPI PUSH2 0x443 PUSH2 0x1324 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1369 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x443 JUMPI PUSH2 0x443 PUSH2 0x1324 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x443 JUMPI PUSH2 0x443 PUSH2 0x1324 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x8AEE7ADD9ECB4350 LOG1 AND SWAP1 STOP 0xE7 0xAE 0xBF PUSH17 0x7F333B394C738F5C660CA74E77E7E96473 PUSH16 0x6C634300081A00330000000000000000 ",
							"sourceMap": "255:1852:19:-:0;;;444:422;;;;;;;;;;536:10;1577:52:6;;;;;;;;;;;;;-1:-1:-1;;;1577:52:6;;;1616:4;3328:431:15;;;;;;;;;;;;;-1:-1:-1;;;3328:431:15;;;1601:113:4;;;;;;;;;;;;;-1:-1:-1;;;1601:113:4;;;;;;;;;;;;;;;;-1:-1:-1;;;1601:113:4;;;1675:5;1667;:13;;;;;;:::i;:::-;-1:-1:-1;1690:7:4;:17;1700:7;1690;:17;:::i;:::-;-1:-1:-1;3401:45:15;;-1:-1:-1;3401:4:15;;-1:-1:-1;3432:13:15;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;4983:25:20;5024:18;;;5017:34;;;;5067:18;;;5060:34;4255:13:15;5110:18:20;;;5103:34;4278:4:15;5153:19:20;;;5146:61;4168:7:15;;4955:19:20;;4204:80:15;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:15;3725:27;;-1:-1:-1;;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;2801:51:20;2774:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1716:1:3;1821:7;:22;630::19::3;2780:2:4::0;630::19::3;:22;:::i;:::-;618:34;::::0;:9:::3;:34;:::i;:::-;599:16;:53:::0;704:1:::3;691:10;:14:::0;2780:2:4;745:22:19::3;::::0;751:16:::3;;745:2;:22;:::i;:::-;736:31;::::0;:6:::3;:31;:::i;:::-;716:16;;:51;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;778:50:19::3;::::0;-1:-1:-1;784:10:19::3;805:22;2780:2:4::0;805::19::3;:22;:::i;:::-;796:31;::::0;:6:::3;:31;:::i;:::-;778:5;:50::i;:::-;255:1852:::0;;2887:340:11;2983:11;3032:2;3016:5;3010:19;:24;3006:215;;;3057:20;3071:5;3057:13;:20::i;:::-;3050:27;;;;3006:215;3134:5;3108:46;3149:5;3134;3108:46;:::i;:::-;-1:-1:-1;1390:66:11;;-1:-1:-1;3006:215:11;2887:340;;;;:::o;2912:187:0:-;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;7458:208:4:-;-1:-1:-1;;;;;7528:21:4;;7524:91;;7572:32;;-1:-1:-1;;;7572:32:4;;7601:1;7572:32;;;2801:51:20;2774:18;;7572:32:4;2655:203:20;7524:91:4;7624:35;7640:1;7644:7;7653:5;7624:7;:35::i;:::-;7458:208;;:::o;1708:286:11:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:11;;;;;;;;:::i;1836:72::-;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:11:o;6008:1107:4:-;-1:-1:-1;;;;;6097:18:4;;6093:540;;6249:5;6233:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6093:540:4;;-1:-1:-1;6093:540:4;;-1:-1:-1;;;;;6307:15:4;;6285:19;6307:15;;;;;;;;;;;6340:19;;;6336:115;;;6386:50;;-1:-1:-1;;;6386:50:4;;-1:-1:-1;;;;;6293:32:20;;6386:50:4;;;6275:51:20;6342:18;;;6335:34;;;6385:18;;;6378:34;;;6248:18;;6386:50:4;6073:345:20;6336:115:4;-1:-1:-1;;;;;6571:15:4;;:9;:15;;;;;;;;;;6589:19;;;;6571:37;;6093:540;-1:-1:-1;;;;;6647:16:4;;6643:425;;6810:12;:21;;;;;;;6643:425;;;-1:-1:-1;;;;;7021:13:4;;:9;:13;;;;;;;;;;:22;;;;;;6643:425;7098:2;-1:-1:-1;;;;;7083:25:4;7092:4;-1:-1:-1;;;;;7083:25:4;;7102:5;7083:25;;;;6569::20;;6557:2;6542:18;;6423:177;7083:25:4;;;;;;;;6008:1107;;;:::o;14:127:20:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:518::-;759:2;754:3;751:11;748:421;;;795:5;792:1;785:16;839:4;836:1;826:18;909:2;897:10;893:19;890:1;886:27;880:4;876:38;945:4;933:10;930:20;927:47;;;-1:-1:-1;968:4:20;927:47;1023:2;1018:3;1014:12;1011:1;1007:20;1001:4;997:31;987:41;;1078:81;1096:2;1089:5;1086:13;1078:81;;;1155:1;1141:16;;1122:1;1111:13;1078:81;;;1082:3;;748:421;657:518;;;:::o;1351:1299::-;1471:10;;-1:-1:-1;;;;;1493:30:20;;1490:56;;;1526:18;;:::i;:::-;1555:97;1645:6;1605:38;1637:4;1631:11;1605:38;:::i;:::-;1599:4;1555:97;:::i;:::-;1701:4;1732:2;1721:14;;1749:1;1744:649;;;;2437:1;2454:6;2451:89;;;-1:-1:-1;2506:19:20;;;2500:26;2451:89;-1:-1:-1;;1308:1:20;1304:11;;;1300:24;1296:29;1286:40;1332:1;1328:11;;;1283:57;2553:81;;1714:930;;1744:649;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1780:20:20;;;1898:222;1912:7;1909:1;1906:14;1898:222;;;1994:19;;;1988:26;1973:42;;2101:4;2086:20;;;;2054:1;2042:14;;;;1928:12;1898:222;;;1902:3;2148:6;2139:7;2136:19;2133:201;;;2209:19;;;2203:26;-1:-1:-1;;2292:1:20;2288:14;;;2304:3;2284:24;2280:37;2276:42;2261:58;2246:74;;2133:201;-1:-1:-1;;;;2380:1:20;2364:14;;;2360:22;2347:36;;-1:-1:-1;1351:1299:20:o;2863:127::-;2924:10;2919:3;2915:20;2912:1;2905:31;2955:4;2952:1;2945:15;2979:4;2976:1;2969:15;2995:375;3083:1;3101:5;3115:249;3136:1;3126:8;3123:15;3115:249;;;3186:4;3181:3;3177:14;3171:4;3168:24;3165:50;;;3195:18;;:::i;:::-;3245:1;3235:8;3231:16;3228:49;;;3259:16;;;;3228:49;3342:1;3338:16;;;;;3298:15;;3115:249;;;2995:375;;;;;;:::o;3375:902::-;3424:5;3454:8;3444:80;;-1:-1:-1;3495:1:20;3509:5;;3444:80;3543:4;3533:76;;-1:-1:-1;3580:1:20;3594:5;;3533:76;3625:4;3643:1;3638:59;;;;3711:1;3706:174;;;;3618:262;;3638:59;3668:1;3659:10;;3682:5;;;3706:174;3743:3;3733:8;3730:17;3727:43;;;3750:18;;:::i;:::-;-1:-1:-1;;3806:1:20;3792:16;;3865:5;;3618:262;;3964:2;3954:8;3951:16;3945:3;3939:4;3936:13;3932:36;3926:2;3916:8;3913:16;3908:2;3902:4;3899:12;3895:35;3892:77;3889:203;;;-1:-1:-1;4001:19:20;;;4077:5;;3889:203;4124:42;-1:-1:-1;;4149:8:20;4143:4;4124:42;:::i;:::-;4202:6;4198:1;4194:6;4190:19;4181:7;4178:32;4175:58;;;4213:18;;:::i;:::-;4251:20;;3375:902;-1:-1:-1;;;3375:902:20:o;4282:131::-;4342:5;4371:36;4398:8;4392:4;4371:36;:::i;:::-;4362:45;4282:131;-1:-1:-1;;;4282:131:20:o;4418:168::-;4491:9;;;4522;;4539:15;;;4533:22;;4519:37;4509:71;;4560:18;;:::i;4591:128::-;4658:9;;;4679:11;;;4676:37;;;4693:18;;:::i;5218:418::-;5367:2;5356:9;5349:21;5330:4;5399:6;5393:13;5442:6;5437:2;5426:9;5422:18;5415:34;5501:6;5496:2;5488:6;5484:15;5479:2;5468:9;5464:18;5458:50;5557:1;5552:2;5543:6;5532:9;5528:22;5524:31;5517:42;5627:2;5620;5616:7;5611:2;5603:6;5599:15;5595:29;5584:9;5580:45;5576:54;5568:62;;;5218:418;;;;:::o;5641:297::-;5759:12;;5806:4;5795:16;;;5789:23;;5759:12;5824:16;;5821:111;;;-1:-1:-1;;5898:4:20;5894:17;;;;5891:1;5887:25;5883:38;5872:50;;5641:297;-1:-1:-1;5641:297:20:o;5943:125::-;6008:9;;;6029:10;;;6026:36;;;6042:18;;:::i;6423:177::-;255:1852:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1120": {
									"entryPoint": 1132,
									"id": 1120,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_2439": {
									"entryPoint": 2836,
									"id": 2439,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_2451": {
									"entryPoint": 2881,
									"id": 2451,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_780": {
									"entryPoint": 2090,
									"id": 780,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_840": {
									"entryPoint": 3135,
									"id": 840,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2369": {
									"entryPoint": null,
									"id": 2369,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_762": {
									"entryPoint": 2926,
									"id": 762,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 2710,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_2348": {
									"entryPoint": 2324,
									"id": 2348,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_2385": {
									"entryPoint": 3047,
									"id": 2385,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_729": {
									"entryPoint": 2995,
									"id": 729,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1195": {
									"entryPoint": null,
									"id": 1195,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_nonReentrantAfter_362": {
									"entryPoint": null,
									"id": 362,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_nonReentrantBefore_354": {
									"entryPoint": 2621,
									"id": 354,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_spendAllowance_888": {
									"entryPoint": 2108,
									"id": 888,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_2224": {
									"entryPoint": 4008,
									"id": 2224,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 2755,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_619": {
									"entryPoint": 2231,
									"id": 619,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_696": {
									"entryPoint": 3345,
									"id": 696,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1255": {
									"entryPoint": null,
									"id": 1255,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_516": {
									"entryPoint": null,
									"id": 516,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_540": {
									"entryPoint": 1072,
									"id": 540,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_475": {
									"entryPoint": null,
									"id": 475,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@byteLength_1399": {
									"entryPoint": 4253,
									"id": 1399,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_453": {
									"entryPoint": null,
									"id": 453,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_2427": {
									"entryPoint": 1288,
									"id": 2427,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@name_435": {
									"entryPoint": 928,
									"id": 435,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1110": {
									"entryPoint": 1259,
									"id": 1110,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_1240": {
									"entryPoint": null,
									"id": 1240,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_1093": {
									"entryPoint": 1719,
									"id": 1093,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2175": {
									"entryPoint": 3091,
									"id": 2175,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 1242,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@sendToken_3806": {
									"entryPoint": 1448,
									"id": 3806,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@setTokenPrice_3839": {
									"entryPoint": 1229,
									"id": 3839,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@symbol_444": {
									"entryPoint": 1354,
									"id": 444,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_1466": {
									"entryPoint": 3639,
									"id": 1466,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_1367": {
									"entryPoint": 4192,
									"id": 1367,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2525": {
									"entryPoint": null,
									"id": 2525,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tokenPrice_3700": {
									"entryPoint": null,
									"id": 3700,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalSupply_462": {
									"entryPoint": null,
									"id": 462,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_572": {
									"entryPoint": 1097,
									"id": 572,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 2029,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_3874": {
									"entryPoint": 1369,
									"id": 3874,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@transfer_499": {
									"entryPoint": 2982,
									"id": 499,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2139": {
									"entryPoint": 3808,
									"id": 2139,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"@withdraw_3827": {
									"entryPoint": 1146,
									"id": 3827,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 4363,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4511,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4795,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4430,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 4686,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4390,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4488,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 4292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 4536,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4338,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_643d0ad0a6759ec767079411f2fcd4927fb74148bf1e38af28af5a49f8c74a3d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8bd86920dc231c096a9c82436cd9e1b2dda9765ccd28cdfd3626bd80ee15e43__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4993,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 4943,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 4920,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 4974,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 4844,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 4900,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 5012,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:9885:20",
										"nodeType": "YulBlock",
										"src": "0:9885:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "64:239:20",
													"nodeType": "YulBlock",
													"src": "64:239:20",
													"statements": [
														{
															"nativeSrc": "74:26:20",
															"nodeType": "YulVariableDeclaration",
															"src": "74:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "94:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "94:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "88:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "88:5:20"
																},
																"nativeSrc": "88:12:20",
																"nodeType": "YulFunctionCall",
																"src": "88:12:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "78:6:20",
																	"nodeType": "YulTypedName",
																	"src": "78:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "116:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "116:3:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "121:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "121:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "109:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "109:6:20"
																},
																"nativeSrc": "109:19:20",
																"nodeType": "YulFunctionCall",
																"src": "109:19:20"
															},
															"nativeSrc": "109:19:20",
															"nodeType": "YulExpressionStatement",
															"src": "109:19:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "147:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "147:3:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "152:4:20",
																				"nodeType": "YulLiteral",
																				"src": "152:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "143:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "143:3:20"
																		},
																		"nativeSrc": "143:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "143:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "163:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "163:5:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "170:4:20",
																				"nodeType": "YulLiteral",
																				"src": "170:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "159:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "159:3:20"
																		},
																		"nativeSrc": "159:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "159:16:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "177:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "177:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "137:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "137:5:20"
																},
																"nativeSrc": "137:47:20",
																"nodeType": "YulFunctionCall",
																"src": "137:47:20"
															},
															"nativeSrc": "137:47:20",
															"nodeType": "YulExpressionStatement",
															"src": "137:47:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nativeSrc": "208:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "208:3:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "213:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "213:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "204:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "204:3:20"
																				},
																				"nativeSrc": "204:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "204:16:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "222:4:20",
																				"nodeType": "YulLiteral",
																				"src": "222:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "200:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "200:3:20"
																		},
																		"nativeSrc": "200:27:20",
																		"nodeType": "YulFunctionCall",
																		"src": "200:27:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "229:1:20",
																		"nodeType": "YulLiteral",
																		"src": "229:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "193:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "193:6:20"
																},
																"nativeSrc": "193:38:20",
																"nodeType": "YulFunctionCall",
																"src": "193:38:20"
															},
															"nativeSrc": "193:38:20",
															"nodeType": "YulExpressionStatement",
															"src": "193:38:20"
														},
														{
															"nativeSrc": "240:57:20",
															"nodeType": "YulAssignment",
															"src": "240:57:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "255:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "255:3:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "268:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "268:6:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "276:2:20",
																								"nodeType": "YulLiteral",
																								"src": "276:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "264:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "264:3:20"
																						},
																						"nativeSrc": "264:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "264:15:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "285:2:20",
																								"nodeType": "YulLiteral",
																								"src": "285:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "281:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "281:3:20"
																						},
																						"nativeSrc": "281:7:20",
																						"nodeType": "YulFunctionCall",
																						"src": "281:7:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "260:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "260:3:20"
																				},
																				"nativeSrc": "260:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "260:29:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "251:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "251:3:20"
																		},
																		"nativeSrc": "251:39:20",
																		"nodeType": "YulFunctionCall",
																		"src": "251:39:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "292:4:20",
																		"nodeType": "YulLiteral",
																		"src": "292:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "247:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "247:3:20"
																},
																"nativeSrc": "247:50:20",
																"nodeType": "YulFunctionCall",
																"src": "247:50:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "240:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "240:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nativeSrc": "14:289:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "41:5:20",
														"nodeType": "YulTypedName",
														"src": "41:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "48:3:20",
														"nodeType": "YulTypedName",
														"src": "48:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "56:3:20",
														"nodeType": "YulTypedName",
														"src": "56:3:20",
														"type": ""
													}
												],
												"src": "14:289:20"
											},
											{
												"body": {
													"nativeSrc": "429:99:20",
													"nodeType": "YulBlock",
													"src": "429:99:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "446:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "446:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "457:2:20",
																		"nodeType": "YulLiteral",
																		"src": "457:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "439:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "439:6:20"
																},
																"nativeSrc": "439:21:20",
																"nodeType": "YulFunctionCall",
																"src": "439:21:20"
															},
															"nativeSrc": "439:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "439:21:20"
														},
														{
															"nativeSrc": "469:53:20",
															"nodeType": "YulAssignment",
															"src": "469:53:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "495:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "495:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "507:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "507:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "518:2:20",
																				"nodeType": "YulLiteral",
																				"src": "518:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "503:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "503:3:20"
																		},
																		"nativeSrc": "503:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "503:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "477:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "477:17:20"
																},
																"nativeSrc": "477:45:20",
																"nodeType": "YulFunctionCall",
																"src": "477:45:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "469:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "469:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "308:220:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "398:9:20",
														"nodeType": "YulTypedName",
														"src": "398:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "409:6:20",
														"nodeType": "YulTypedName",
														"src": "409:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "420:4:20",
														"nodeType": "YulTypedName",
														"src": "420:4:20",
														"type": ""
													}
												],
												"src": "308:220:20"
											},
											{
												"body": {
													"nativeSrc": "582:124:20",
													"nodeType": "YulBlock",
													"src": "582:124:20",
													"statements": [
														{
															"nativeSrc": "592:29:20",
															"nodeType": "YulAssignment",
															"src": "592:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "614:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "614:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "601:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "601:12:20"
																},
																"nativeSrc": "601:20:20",
																"nodeType": "YulFunctionCall",
																"src": "601:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "592:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "592:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "684:16:20",
																"nodeType": "YulBlock",
																"src": "684:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "693:1:20",
																					"nodeType": "YulLiteral",
																					"src": "693:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "696:1:20",
																					"nodeType": "YulLiteral",
																					"src": "696:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "686:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "686:6:20"
																			},
																			"nativeSrc": "686:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "686:12:20"
																		},
																		"nativeSrc": "686:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "686:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "643:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "643:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "654:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "654:5:20"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "669:3:20",
																										"nodeType": "YulLiteral",
																										"src": "669:3:20",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "674:1:20",
																										"nodeType": "YulLiteral",
																										"src": "674:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "665:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "665:3:20"
																								},
																								"nativeSrc": "665:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "665:11:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "678:1:20",
																								"nodeType": "YulLiteral",
																								"src": "678:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "661:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "661:3:20"
																						},
																						"nativeSrc": "661:19:20",
																						"nodeType": "YulFunctionCall",
																						"src": "661:19:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "650:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "650:3:20"
																				},
																				"nativeSrc": "650:31:20",
																				"nodeType": "YulFunctionCall",
																				"src": "650:31:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "640:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "640:2:20"
																		},
																		"nativeSrc": "640:42:20",
																		"nodeType": "YulFunctionCall",
																		"src": "640:42:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "633:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "633:6:20"
																},
																"nativeSrc": "633:50:20",
																"nodeType": "YulFunctionCall",
																"src": "633:50:20"
															},
															"nativeSrc": "630:70:20",
															"nodeType": "YulIf",
															"src": "630:70:20"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "533:173:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "561:6:20",
														"nodeType": "YulTypedName",
														"src": "561:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "572:5:20",
														"nodeType": "YulTypedName",
														"src": "572:5:20",
														"type": ""
													}
												],
												"src": "533:173:20"
											},
											{
												"body": {
													"nativeSrc": "798:213:20",
													"nodeType": "YulBlock",
													"src": "798:213:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "844:16:20",
																"nodeType": "YulBlock",
																"src": "844:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "853:1:20",
																					"nodeType": "YulLiteral",
																					"src": "853:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "856:1:20",
																					"nodeType": "YulLiteral",
																					"src": "856:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "846:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "846:6:20"
																			},
																			"nativeSrc": "846:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "846:12:20"
																		},
																		"nativeSrc": "846:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "846:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "819:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "819:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "828:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "828:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "815:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "815:3:20"
																		},
																		"nativeSrc": "815:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "815:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "840:2:20",
																		"nodeType": "YulLiteral",
																		"src": "840:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "811:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "811:3:20"
																},
																"nativeSrc": "811:32:20",
																"nodeType": "YulFunctionCall",
																"src": "811:32:20"
															},
															"nativeSrc": "808:52:20",
															"nodeType": "YulIf",
															"src": "808:52:20"
														},
														{
															"nativeSrc": "869:39:20",
															"nodeType": "YulAssignment",
															"src": "869:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "898:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "898:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "879:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "879:18:20"
																},
																"nativeSrc": "879:29:20",
																"nodeType": "YulFunctionCall",
																"src": "879:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "869:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "869:6:20"
																}
															]
														},
														{
															"nativeSrc": "917:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "917:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "930:1:20",
																"nodeType": "YulLiteral",
																"src": "930:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "921:5:20",
																	"nodeType": "YulTypedName",
																	"src": "921:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "940:41:20",
															"nodeType": "YulAssignment",
															"src": "940:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "966:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "966:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "977:2:20",
																				"nodeType": "YulLiteral",
																				"src": "977:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "962:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "962:3:20"
																		},
																		"nativeSrc": "962:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "962:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "949:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "949:12:20"
																},
																"nativeSrc": "949:32:20",
																"nodeType": "YulFunctionCall",
																"src": "949:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "940:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "940:5:20"
																}
															]
														},
														{
															"nativeSrc": "990:15:20",
															"nodeType": "YulAssignment",
															"src": "990:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1000:5:20",
																"nodeType": "YulIdentifier",
																"src": "1000:5:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "990:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "990:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "711:300:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "756:9:20",
														"nodeType": "YulTypedName",
														"src": "756:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "767:7:20",
														"nodeType": "YulTypedName",
														"src": "767:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "779:6:20",
														"nodeType": "YulTypedName",
														"src": "779:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "787:6:20",
														"nodeType": "YulTypedName",
														"src": "787:6:20",
														"type": ""
													}
												],
												"src": "711:300:20"
											},
											{
												"body": {
													"nativeSrc": "1111:92:20",
													"nodeType": "YulBlock",
													"src": "1111:92:20",
													"statements": [
														{
															"nativeSrc": "1121:26:20",
															"nodeType": "YulAssignment",
															"src": "1121:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1133:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1133:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1144:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1144:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1129:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1129:3:20"
																},
																"nativeSrc": "1129:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1129:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1121:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1121:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1163:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1163:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1188:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "1188:6:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1181:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "1181:6:20"
																				},
																				"nativeSrc": "1181:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1181:14:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1174:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "1174:6:20"
																		},
																		"nativeSrc": "1174:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1174:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1156:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1156:6:20"
																},
																"nativeSrc": "1156:41:20",
																"nodeType": "YulFunctionCall",
																"src": "1156:41:20"
															},
															"nativeSrc": "1156:41:20",
															"nodeType": "YulExpressionStatement",
															"src": "1156:41:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1016:187:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1080:9:20",
														"nodeType": "YulTypedName",
														"src": "1080:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1091:6:20",
														"nodeType": "YulTypedName",
														"src": "1091:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1102:4:20",
														"nodeType": "YulTypedName",
														"src": "1102:4:20",
														"type": ""
													}
												],
												"src": "1016:187:20"
											},
											{
												"body": {
													"nativeSrc": "1309:76:20",
													"nodeType": "YulBlock",
													"src": "1309:76:20",
													"statements": [
														{
															"nativeSrc": "1319:26:20",
															"nodeType": "YulAssignment",
															"src": "1319:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1331:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1331:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1342:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1342:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1327:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1327:3:20"
																},
																"nativeSrc": "1327:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1327:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1319:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1319:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1361:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1361:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1372:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1372:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1354:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1354:6:20"
																},
																"nativeSrc": "1354:25:20",
																"nodeType": "YulFunctionCall",
																"src": "1354:25:20"
															},
															"nativeSrc": "1354:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "1354:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1208:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1278:9:20",
														"nodeType": "YulTypedName",
														"src": "1278:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1289:6:20",
														"nodeType": "YulTypedName",
														"src": "1289:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1300:4:20",
														"nodeType": "YulTypedName",
														"src": "1300:4:20",
														"type": ""
													}
												],
												"src": "1208:177:20"
											},
											{
												"body": {
													"nativeSrc": "1494:270:20",
													"nodeType": "YulBlock",
													"src": "1494:270:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "1540:16:20",
																"nodeType": "YulBlock",
																"src": "1540:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1549:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1549:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1552:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1552:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1542:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1542:6:20"
																			},
																			"nativeSrc": "1542:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1542:12:20"
																		},
																		"nativeSrc": "1542:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1542:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1515:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "1515:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1524:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1524:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1511:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1511:3:20"
																		},
																		"nativeSrc": "1511:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1511:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1536:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1536:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1507:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1507:3:20"
																},
																"nativeSrc": "1507:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1507:32:20"
															},
															"nativeSrc": "1504:52:20",
															"nodeType": "YulIf",
															"src": "1504:52:20"
														},
														{
															"nativeSrc": "1565:39:20",
															"nodeType": "YulAssignment",
															"src": "1565:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1594:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1594:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1575:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "1575:18:20"
																},
																"nativeSrc": "1575:29:20",
																"nodeType": "YulFunctionCall",
																"src": "1575:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1565:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1565:6:20"
																}
															]
														},
														{
															"nativeSrc": "1613:48:20",
															"nodeType": "YulAssignment",
															"src": "1613:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1646:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1646:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1657:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1657:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1642:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1642:3:20"
																		},
																		"nativeSrc": "1642:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1642:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1623:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "1623:18:20"
																},
																"nativeSrc": "1623:38:20",
																"nodeType": "YulFunctionCall",
																"src": "1623:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1613:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1613:6:20"
																}
															]
														},
														{
															"nativeSrc": "1670:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1670:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1683:1:20",
																"nodeType": "YulLiteral",
																"src": "1683:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1674:5:20",
																	"nodeType": "YulTypedName",
																	"src": "1674:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1693:41:20",
															"nodeType": "YulAssignment",
															"src": "1693:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1719:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1719:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1730:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1730:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1715:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1715:3:20"
																		},
																		"nativeSrc": "1715:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1715:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1702:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "1702:12:20"
																},
																"nativeSrc": "1702:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1702:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1693:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1693:5:20"
																}
															]
														},
														{
															"nativeSrc": "1743:15:20",
															"nodeType": "YulAssignment",
															"src": "1743:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1753:5:20",
																"nodeType": "YulIdentifier",
																"src": "1753:5:20"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1743:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1743:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1390:374:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1444:9:20",
														"nodeType": "YulTypedName",
														"src": "1444:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1455:7:20",
														"nodeType": "YulTypedName",
														"src": "1455:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1467:6:20",
														"nodeType": "YulTypedName",
														"src": "1467:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1475:6:20",
														"nodeType": "YulTypedName",
														"src": "1475:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1483:6:20",
														"nodeType": "YulTypedName",
														"src": "1483:6:20",
														"type": ""
													}
												],
												"src": "1390:374:20"
											},
											{
												"body": {
													"nativeSrc": "1866:87:20",
													"nodeType": "YulBlock",
													"src": "1866:87:20",
													"statements": [
														{
															"nativeSrc": "1876:26:20",
															"nodeType": "YulAssignment",
															"src": "1876:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1888:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1888:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1899:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1899:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1884:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:20"
																},
																"nativeSrc": "1884:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1884:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1876:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1876:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1918:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1918:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1933:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1933:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1941:4:20",
																				"nodeType": "YulLiteral",
																				"src": "1941:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1929:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1929:3:20"
																		},
																		"nativeSrc": "1929:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1929:17:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1911:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1911:6:20"
																},
																"nativeSrc": "1911:36:20",
																"nodeType": "YulFunctionCall",
																"src": "1911:36:20"
															},
															"nativeSrc": "1911:36:20",
															"nodeType": "YulExpressionStatement",
															"src": "1911:36:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1769:184:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1835:9:20",
														"nodeType": "YulTypedName",
														"src": "1835:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1846:6:20",
														"nodeType": "YulTypedName",
														"src": "1846:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1857:4:20",
														"nodeType": "YulTypedName",
														"src": "1857:4:20",
														"type": ""
													}
												],
												"src": "1769:184:20"
											},
											{
												"body": {
													"nativeSrc": "2059:76:20",
													"nodeType": "YulBlock",
													"src": "2059:76:20",
													"statements": [
														{
															"nativeSrc": "2069:26:20",
															"nodeType": "YulAssignment",
															"src": "2069:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2081:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2081:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2092:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2092:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2077:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2077:3:20"
																},
																"nativeSrc": "2077:18:20",
																"nodeType": "YulFunctionCall",
																"src": "2077:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2069:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2111:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2111:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "2122:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2122:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2104:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:20"
																},
																"nativeSrc": "2104:25:20",
																"nodeType": "YulFunctionCall",
																"src": "2104:25:20"
															},
															"nativeSrc": "2104:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "2104:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "1958:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2028:9:20",
														"nodeType": "YulTypedName",
														"src": "2028:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2039:6:20",
														"nodeType": "YulTypedName",
														"src": "2039:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2050:4:20",
														"nodeType": "YulTypedName",
														"src": "2050:4:20",
														"type": ""
													}
												],
												"src": "1958:177:20"
											},
											{
												"body": {
													"nativeSrc": "2210:156:20",
													"nodeType": "YulBlock",
													"src": "2210:156:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2256:16:20",
																"nodeType": "YulBlock",
																"src": "2256:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2265:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2265:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2258:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2258:6:20"
																			},
																			"nativeSrc": "2258:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2258:12:20"
																		},
																		"nativeSrc": "2258:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2258:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2231:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "2231:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2240:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2240:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2227:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2227:3:20"
																		},
																		"nativeSrc": "2227:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2227:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2252:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2252:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2223:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2223:3:20"
																},
																"nativeSrc": "2223:32:20",
																"nodeType": "YulFunctionCall",
																"src": "2223:32:20"
															},
															"nativeSrc": "2220:52:20",
															"nodeType": "YulIf",
															"src": "2220:52:20"
														},
														{
															"nativeSrc": "2281:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "2281:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "2294:1:20",
																"nodeType": "YulLiteral",
																"src": "2294:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2285:5:20",
																	"nodeType": "YulTypedName",
																	"src": "2285:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2304:32:20",
															"nodeType": "YulAssignment",
															"src": "2304:32:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2326:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2326:9:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2313:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "2313:12:20"
																},
																"nativeSrc": "2313:23:20",
																"nodeType": "YulFunctionCall",
																"src": "2313:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2304:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "2304:5:20"
																}
															]
														},
														{
															"nativeSrc": "2345:15:20",
															"nodeType": "YulAssignment",
															"src": "2345:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "2355:5:20",
																"nodeType": "YulIdentifier",
																"src": "2355:5:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2345:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2345:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2140:226:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2176:9:20",
														"nodeType": "YulTypedName",
														"src": "2176:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2187:7:20",
														"nodeType": "YulTypedName",
														"src": "2187:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2199:6:20",
														"nodeType": "YulTypedName",
														"src": "2199:6:20",
														"type": ""
													}
												],
												"src": "2140:226:20"
											},
											{
												"body": {
													"nativeSrc": "2441:116:20",
													"nodeType": "YulBlock",
													"src": "2441:116:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2487:16:20",
																"nodeType": "YulBlock",
																"src": "2487:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2496:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2496:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2499:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2499:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2489:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2489:6:20"
																			},
																			"nativeSrc": "2489:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2489:12:20"
																		},
																		"nativeSrc": "2489:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2489:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2462:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "2462:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2471:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2471:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2458:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2458:3:20"
																		},
																		"nativeSrc": "2458:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2458:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2483:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2454:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:20"
																},
																"nativeSrc": "2454:32:20",
																"nodeType": "YulFunctionCall",
																"src": "2454:32:20"
															},
															"nativeSrc": "2451:52:20",
															"nodeType": "YulIf",
															"src": "2451:52:20"
														},
														{
															"nativeSrc": "2512:39:20",
															"nodeType": "YulAssignment",
															"src": "2512:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2541:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2541:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2522:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "2522:18:20"
																},
																"nativeSrc": "2522:29:20",
																"nodeType": "YulFunctionCall",
																"src": "2522:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2512:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2512:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "2371:186:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2407:9:20",
														"nodeType": "YulTypedName",
														"src": "2407:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2418:7:20",
														"nodeType": "YulTypedName",
														"src": "2418:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2430:6:20",
														"nodeType": "YulTypedName",
														"src": "2430:6:20",
														"type": ""
													}
												],
												"src": "2371:186:20"
											},
											{
												"body": {
													"nativeSrc": "2919:881:20",
													"nodeType": "YulBlock",
													"src": "2919:881:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2936:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2936:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2951:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2951:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2963:3:20",
																						"nodeType": "YulLiteral",
																						"src": "2963:3:20",
																						"type": "",
																						"value": "248"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2968:3:20",
																						"nodeType": "YulLiteral",
																						"src": "2968:3:20",
																						"type": "",
																						"value": "255"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2959:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2959:3:20"
																				},
																				"nativeSrc": "2959:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2959:13:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2947:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2947:3:20"
																		},
																		"nativeSrc": "2947:26:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2947:26:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2929:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2929:6:20"
																},
																"nativeSrc": "2929:45:20",
																"nodeType": "YulFunctionCall",
																"src": "2929:45:20"
															},
															"nativeSrc": "2929:45:20",
															"nodeType": "YulExpressionStatement",
															"src": "2929:45:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2994:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2994:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3005:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3005:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2990:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2990:3:20"
																		},
																		"nativeSrc": "2990:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2990:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3010:3:20",
																		"nodeType": "YulLiteral",
																		"src": "3010:3:20",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2983:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2983:6:20"
																},
																"nativeSrc": "2983:31:20",
																"nodeType": "YulFunctionCall",
																"src": "2983:31:20"
															},
															"nativeSrc": "2983:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "2983:31:20"
														},
														{
															"nativeSrc": "3023:60:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3023:60:20",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "3055:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3055:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3067:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3067:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3078:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3078:3:20",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3063:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3063:3:20"
																		},
																		"nativeSrc": "3063:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3063:19:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "3037:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "3037:17:20"
																},
																"nativeSrc": "3037:46:20",
																"nodeType": "YulFunctionCall",
																"src": "3037:46:20"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nativeSrc": "3027:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3027:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3103:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3103:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3114:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3114:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3099:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3099:3:20"
																		},
																		"nativeSrc": "3099:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3099:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_1",
																				"nativeSrc": "3123:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3123:6:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3131:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3131:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3119:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3119:3:20"
																		},
																		"nativeSrc": "3119:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3119:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3092:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3092:6:20"
																},
																"nativeSrc": "3092:50:20",
																"nodeType": "YulFunctionCall",
																"src": "3092:50:20"
															},
															"nativeSrc": "3092:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "3092:50:20"
														},
														{
															"nativeSrc": "3151:47:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3151:47:20",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "3183:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3183:6:20"
																	},
																	{
																		"name": "tail_1",
																		"nativeSrc": "3191:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3191:6:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "3165:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "3165:17:20"
																},
																"nativeSrc": "3165:33:20",
																"nodeType": "YulFunctionCall",
																"src": "3165:33:20"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nativeSrc": "3155:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3155:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3218:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3218:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3229:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3229:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3214:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3214:3:20"
																		},
																		"nativeSrc": "3214:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3214:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "3234:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3234:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3207:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3207:6:20"
																},
																"nativeSrc": "3207:34:20",
																"nodeType": "YulFunctionCall",
																"src": "3207:34:20"
															},
															"nativeSrc": "3207:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "3207:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3261:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3261:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3272:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3272:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3257:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3257:3:20"
																		},
																		"nativeSrc": "3257:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3257:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "3282:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3282:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3298:3:20",
																								"nodeType": "YulLiteral",
																								"src": "3298:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3303:1:20",
																								"nodeType": "YulLiteral",
																								"src": "3303:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3294:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3294:3:20"
																						},
																						"nativeSrc": "3294:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3294:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3307:1:20",
																						"nodeType": "YulLiteral",
																						"src": "3307:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3290:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3290:3:20"
																				},
																				"nativeSrc": "3290:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3290:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3278:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3278:3:20"
																		},
																		"nativeSrc": "3278:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3278:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3250:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3250:6:20"
																},
																"nativeSrc": "3250:61:20",
																"nodeType": "YulFunctionCall",
																"src": "3250:61:20"
															},
															"nativeSrc": "3250:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "3250:61:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3331:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3331:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3342:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3342:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3327:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3327:3:20"
																		},
																		"nativeSrc": "3327:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3327:19:20"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "3348:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3348:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3320:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3320:6:20"
																},
																"nativeSrc": "3320:35:20",
																"nodeType": "YulFunctionCall",
																"src": "3320:35:20"
															},
															"nativeSrc": "3320:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "3320:35:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3375:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3375:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3386:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3386:3:20",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3371:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3371:3:20"
																		},
																		"nativeSrc": "3371:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3371:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nativeSrc": "3396:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3396:6:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3404:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3404:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3392:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3392:3:20"
																		},
																		"nativeSrc": "3392:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3392:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3364:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3364:6:20"
																},
																"nativeSrc": "3364:51:20",
																"nodeType": "YulFunctionCall",
																"src": "3364:51:20"
															},
															"nativeSrc": "3364:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "3364:51:20"
														},
														{
															"nativeSrc": "3424:17:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3424:17:20",
															"value": {
																"name": "tail_2",
																"nativeSrc": "3435:6:20",
																"nodeType": "YulIdentifier",
																"src": "3435:6:20"
															},
															"variables": [
																{
																	"name": "pos",
																	"nativeSrc": "3428:3:20",
																	"nodeType": "YulTypedName",
																	"src": "3428:3:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3450:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3450:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3470:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3470:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3464:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3464:5:20"
																},
																"nativeSrc": "3464:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3464:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3454:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3454:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3493:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3493:6:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3501:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3501:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3486:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3486:6:20"
																},
																"nativeSrc": "3486:22:20",
																"nodeType": "YulFunctionCall",
																"src": "3486:22:20"
															},
															"nativeSrc": "3486:22:20",
															"nodeType": "YulExpressionStatement",
															"src": "3486:22:20"
														},
														{
															"nativeSrc": "3517:22:20",
															"nodeType": "YulAssignment",
															"src": "3517:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3528:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3528:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3536:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3536:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3524:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3524:3:20"
																},
																"nativeSrc": "3524:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3524:15:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "3517:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3517:3:20"
																}
															]
														},
														{
															"nativeSrc": "3548:29:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3548:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3566:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3566:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3574:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3574:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3562:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3562:3:20"
																},
																"nativeSrc": "3562:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3562:15:20"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "3552:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3552:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3586:10:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3586:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "3595:1:20",
																"nodeType": "YulLiteral",
																"src": "3595:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "3590:1:20",
																	"nodeType": "YulTypedName",
																	"src": "3590:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3654:120:20",
																"nodeType": "YulBlock",
																"src": "3654:120:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3675:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3675:3:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nativeSrc": "3686:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "3686:6:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "3680:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "3680:5:20"
																					},
																					"nativeSrc": "3680:13:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3680:13:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3668:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3668:6:20"
																			},
																			"nativeSrc": "3668:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3668:26:20"
																		},
																		"nativeSrc": "3668:26:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "3668:26:20"
																	},
																	{
																		"nativeSrc": "3707:19:20",
																		"nodeType": "YulAssignment",
																		"src": "3707:19:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3718:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3718:3:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3723:2:20",
																					"nodeType": "YulLiteral",
																					"src": "3723:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3714:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3714:3:20"
																			},
																			"nativeSrc": "3714:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3714:12:20"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "3707:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3707:3:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3739:25:20",
																		"nodeType": "YulAssignment",
																		"src": "3739:25:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "3753:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "3753:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3761:2:20",
																					"nodeType": "YulLiteral",
																					"src": "3761:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3749:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3749:3:20"
																			},
																			"nativeSrc": "3749:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3749:15:20"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "3739:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3739:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "3616:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "3616:1:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3619:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3619:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3613:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3613:2:20"
																},
																"nativeSrc": "3613:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3613:13:20"
															},
															"nativeSrc": "3605:169:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3627:18:20",
																"nodeType": "YulBlock",
																"src": "3627:18:20",
																"statements": [
																	{
																		"nativeSrc": "3629:14:20",
																		"nodeType": "YulAssignment",
																		"src": "3629:14:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "3638:1:20",
																					"nodeType": "YulIdentifier",
																					"src": "3638:1:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3641:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3641:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3634:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3634:3:20"
																			},
																			"nativeSrc": "3634:9:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3634:9:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "3629:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "3629:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3609:3:20",
																"nodeType": "YulBlock",
																"src": "3609:3:20",
																"statements": []
															},
															"src": "3605:169:20"
														},
														{
															"nativeSrc": "3783:11:20",
															"nodeType": "YulAssignment",
															"src": "3783:11:20",
															"value": {
																"name": "pos",
																"nativeSrc": "3791:3:20",
																"nodeType": "YulIdentifier",
																"src": "3791:3:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3783:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3783:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "2562:1238:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2840:9:20",
														"nodeType": "YulTypedName",
														"src": "2840:9:20",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "2851:6:20",
														"nodeType": "YulTypedName",
														"src": "2851:6:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "2859:6:20",
														"nodeType": "YulTypedName",
														"src": "2859:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "2867:6:20",
														"nodeType": "YulTypedName",
														"src": "2867:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2875:6:20",
														"nodeType": "YulTypedName",
														"src": "2875:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2883:6:20",
														"nodeType": "YulTypedName",
														"src": "2883:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2891:6:20",
														"nodeType": "YulTypedName",
														"src": "2891:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2899:6:20",
														"nodeType": "YulTypedName",
														"src": "2899:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2910:4:20",
														"nodeType": "YulTypedName",
														"src": "2910:4:20",
														"type": ""
													}
												],
												"src": "2562:1238:20"
											},
											{
												"body": {
													"nativeSrc": "3906:102:20",
													"nodeType": "YulBlock",
													"src": "3906:102:20",
													"statements": [
														{
															"nativeSrc": "3916:26:20",
															"nodeType": "YulAssignment",
															"src": "3916:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3928:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "3928:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3939:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3939:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3924:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3924:3:20"
																},
																"nativeSrc": "3924:18:20",
																"nodeType": "YulFunctionCall",
																"src": "3924:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3916:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3916:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3958:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "3958:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3973:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3973:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3989:3:20",
																								"nodeType": "YulLiteral",
																								"src": "3989:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3994:1:20",
																								"nodeType": "YulLiteral",
																								"src": "3994:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3985:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3985:3:20"
																						},
																						"nativeSrc": "3985:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3985:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3998:1:20",
																						"nodeType": "YulLiteral",
																						"src": "3998:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3981:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3981:3:20"
																				},
																				"nativeSrc": "3981:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3981:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3969:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3969:3:20"
																		},
																		"nativeSrc": "3969:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3969:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3951:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3951:6:20"
																},
																"nativeSrc": "3951:51:20",
																"nodeType": "YulFunctionCall",
																"src": "3951:51:20"
															},
															"nativeSrc": "3951:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "3951:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "3805:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3875:9:20",
														"nodeType": "YulTypedName",
														"src": "3875:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3886:6:20",
														"nodeType": "YulTypedName",
														"src": "3886:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3897:4:20",
														"nodeType": "YulTypedName",
														"src": "3897:4:20",
														"type": ""
													}
												],
												"src": "3805:203:20"
											},
											{
												"body": {
													"nativeSrc": "4183:733:20",
													"nodeType": "YulBlock",
													"src": "4183:733:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "4230:16:20",
																"nodeType": "YulBlock",
																"src": "4230:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4239:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4239:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4242:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4242:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4232:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4232:6:20"
																			},
																			"nativeSrc": "4232:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4232:12:20"
																		},
																		"nativeSrc": "4232:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4232:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4204:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "4204:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4213:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4213:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4200:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4200:3:20"
																		},
																		"nativeSrc": "4200:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4200:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4225:3:20",
																		"nodeType": "YulLiteral",
																		"src": "4225:3:20",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4196:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4196:3:20"
																},
																"nativeSrc": "4196:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4196:33:20"
															},
															"nativeSrc": "4193:53:20",
															"nodeType": "YulIf",
															"src": "4193:53:20"
														},
														{
															"nativeSrc": "4255:39:20",
															"nodeType": "YulAssignment",
															"src": "4255:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4284:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4284:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4265:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4265:18:20"
																},
																"nativeSrc": "4265:29:20",
																"nodeType": "YulFunctionCall",
																"src": "4265:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "4255:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4255:6:20"
																}
															]
														},
														{
															"nativeSrc": "4303:48:20",
															"nodeType": "YulAssignment",
															"src": "4303:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4336:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4336:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4347:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4347:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4332:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4332:3:20"
																		},
																		"nativeSrc": "4332:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4332:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4313:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4313:18:20"
																},
																"nativeSrc": "4313:38:20",
																"nodeType": "YulFunctionCall",
																"src": "4313:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4303:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4303:6:20"
																}
															]
														},
														{
															"nativeSrc": "4360:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4360:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4373:1:20",
																"nodeType": "YulLiteral",
																"src": "4373:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "4364:5:20",
																	"nodeType": "YulTypedName",
																	"src": "4364:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4383:41:20",
															"nodeType": "YulAssignment",
															"src": "4383:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4409:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4409:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4420:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4420:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4405:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4405:3:20"
																		},
																		"nativeSrc": "4405:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4405:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4392:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4392:12:20"
																},
																"nativeSrc": "4392:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4392:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4383:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4383:5:20"
																}
															]
														},
														{
															"nativeSrc": "4433:15:20",
															"nodeType": "YulAssignment",
															"src": "4433:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "4443:5:20",
																"nodeType": "YulIdentifier",
																"src": "4443:5:20"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "4433:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4433:6:20"
																}
															]
														},
														{
															"nativeSrc": "4457:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4457:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4472:1:20",
																"nodeType": "YulLiteral",
																"src": "4472:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "4461:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4461:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4482:43:20",
															"nodeType": "YulAssignment",
															"src": "4482:43:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4510:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4510:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4521:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4521:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4506:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4506:3:20"
																		},
																		"nativeSrc": "4506:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4506:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4493:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4493:12:20"
																},
																"nativeSrc": "4493:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4493:32:20"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "4482:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4482:7:20"
																}
															]
														},
														{
															"nativeSrc": "4534:17:20",
															"nodeType": "YulAssignment",
															"src": "4534:17:20",
															"value": {
																"name": "value_1",
																"nativeSrc": "4544:7:20",
																"nodeType": "YulIdentifier",
																"src": "4544:7:20"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "4534:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4534:6:20"
																}
															]
														},
														{
															"nativeSrc": "4560:48:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4560:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4592:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4592:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4603:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4603:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4588:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4588:3:20"
																		},
																		"nativeSrc": "4588:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4588:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4575:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4575:12:20"
																},
																"nativeSrc": "4575:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4575:33:20"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nativeSrc": "4564:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4564:7:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4660:16:20",
																"nodeType": "YulBlock",
																"src": "4660:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4669:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4669:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4672:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4672:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4662:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4662:6:20"
																			},
																			"nativeSrc": "4662:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4662:12:20"
																		},
																		"nativeSrc": "4662:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4662:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_2",
																				"nativeSrc": "4630:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "4630:7:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_2",
																						"nativeSrc": "4643:7:20",
																						"nodeType": "YulIdentifier",
																						"src": "4643:7:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4652:4:20",
																						"nodeType": "YulLiteral",
																						"src": "4652:4:20",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "4639:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4639:3:20"
																				},
																				"nativeSrc": "4639:18:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4639:18:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "4627:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "4627:2:20"
																		},
																		"nativeSrc": "4627:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4627:31:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4620:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4620:6:20"
																},
																"nativeSrc": "4620:39:20",
																"nodeType": "YulFunctionCall",
																"src": "4620:39:20"
															},
															"nativeSrc": "4617:59:20",
															"nodeType": "YulIf",
															"src": "4617:59:20"
														},
														{
															"nativeSrc": "4685:17:20",
															"nodeType": "YulAssignment",
															"src": "4685:17:20",
															"value": {
																"name": "value_2",
																"nativeSrc": "4695:7:20",
																"nodeType": "YulIdentifier",
																"src": "4695:7:20"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "4685:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4685:6:20"
																}
															]
														},
														{
															"nativeSrc": "4711:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4711:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4726:1:20",
																"nodeType": "YulLiteral",
																"src": "4726:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_3",
																	"nativeSrc": "4715:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4715:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4736:44:20",
															"nodeType": "YulAssignment",
															"src": "4736:44:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4764:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4764:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4775:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4775:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4760:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4760:3:20"
																		},
																		"nativeSrc": "4760:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4760:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4747:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4747:12:20"
																},
																"nativeSrc": "4747:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4747:33:20"
															},
															"variableNames": [
																{
																	"name": "value_3",
																	"nativeSrc": "4736:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4736:7:20"
																}
															]
														},
														{
															"nativeSrc": "4789:17:20",
															"nodeType": "YulAssignment",
															"src": "4789:17:20",
															"value": {
																"name": "value_3",
																"nativeSrc": "4799:7:20",
																"nodeType": "YulIdentifier",
																"src": "4799:7:20"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nativeSrc": "4789:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4789:6:20"
																}
															]
														},
														{
															"nativeSrc": "4815:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4815:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4830:1:20",
																"nodeType": "YulLiteral",
																"src": "4830:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_4",
																	"nativeSrc": "4819:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4819:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4840:44:20",
															"nodeType": "YulAssignment",
															"src": "4840:44:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4868:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4868:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4879:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4879:3:20",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4864:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4864:3:20"
																		},
																		"nativeSrc": "4864:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4864:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4851:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4851:12:20"
																},
																"nativeSrc": "4851:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4851:33:20"
															},
															"variableNames": [
																{
																	"name": "value_4",
																	"nativeSrc": "4840:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4840:7:20"
																}
															]
														},
														{
															"nativeSrc": "4893:17:20",
															"nodeType": "YulAssignment",
															"src": "4893:17:20",
															"value": {
																"name": "value_4",
																"nativeSrc": "4903:7:20",
																"nodeType": "YulIdentifier",
																"src": "4903:7:20"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nativeSrc": "4893:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4893:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "4013:903:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4101:9:20",
														"nodeType": "YulTypedName",
														"src": "4101:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4112:7:20",
														"nodeType": "YulTypedName",
														"src": "4112:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4124:6:20",
														"nodeType": "YulTypedName",
														"src": "4124:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4132:6:20",
														"nodeType": "YulTypedName",
														"src": "4132:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4140:6:20",
														"nodeType": "YulTypedName",
														"src": "4140:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "4148:6:20",
														"nodeType": "YulTypedName",
														"src": "4148:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "4156:6:20",
														"nodeType": "YulTypedName",
														"src": "4156:6:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "4164:6:20",
														"nodeType": "YulTypedName",
														"src": "4164:6:20",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "4172:6:20",
														"nodeType": "YulTypedName",
														"src": "4172:6:20",
														"type": ""
													}
												],
												"src": "4013:903:20"
											},
											{
												"body": {
													"nativeSrc": "5008:173:20",
													"nodeType": "YulBlock",
													"src": "5008:173:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "5054:16:20",
																"nodeType": "YulBlock",
																"src": "5054:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5063:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5063:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5066:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5066:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5056:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5056:6:20"
																			},
																			"nativeSrc": "5056:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5056:12:20"
																		},
																		"nativeSrc": "5056:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5056:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5029:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "5029:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5038:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5038:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5025:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5025:3:20"
																		},
																		"nativeSrc": "5025:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5025:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5050:2:20",
																		"nodeType": "YulLiteral",
																		"src": "5050:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5021:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5021:3:20"
																},
																"nativeSrc": "5021:32:20",
																"nodeType": "YulFunctionCall",
																"src": "5021:32:20"
															},
															"nativeSrc": "5018:52:20",
															"nodeType": "YulIf",
															"src": "5018:52:20"
														},
														{
															"nativeSrc": "5079:39:20",
															"nodeType": "YulAssignment",
															"src": "5079:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5108:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5108:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "5089:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "5089:18:20"
																},
																"nativeSrc": "5089:29:20",
																"nodeType": "YulFunctionCall",
																"src": "5089:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "5079:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5079:6:20"
																}
															]
														},
														{
															"nativeSrc": "5127:48:20",
															"nodeType": "YulAssignment",
															"src": "5127:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5160:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5160:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5171:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5171:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5156:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5156:3:20"
																		},
																		"nativeSrc": "5156:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5156:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "5137:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "5137:18:20"
																},
																"nativeSrc": "5137:38:20",
																"nodeType": "YulFunctionCall",
																"src": "5137:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "5127:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5127:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "4921:260:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4966:9:20",
														"nodeType": "YulTypedName",
														"src": "4966:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4977:7:20",
														"nodeType": "YulTypedName",
														"src": "4977:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4989:6:20",
														"nodeType": "YulTypedName",
														"src": "4989:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4997:6:20",
														"nodeType": "YulTypedName",
														"src": "4997:6:20",
														"type": ""
													}
												],
												"src": "4921:260:20"
											},
											{
												"body": {
													"nativeSrc": "5241:325:20",
													"nodeType": "YulBlock",
													"src": "5241:325:20",
													"statements": [
														{
															"nativeSrc": "5251:22:20",
															"nodeType": "YulAssignment",
															"src": "5251:22:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5265:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5265:1:20",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "5268:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5268:4:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "5261:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5261:3:20"
																},
																"nativeSrc": "5261:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5261:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "5251:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:20"
																}
															]
														},
														{
															"nativeSrc": "5282:38:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5282:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5312:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5312:4:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5318:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5318:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5308:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5308:3:20"
																},
																"nativeSrc": "5308:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5308:12:20"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "5286:18:20",
																	"nodeType": "YulTypedName",
																	"src": "5286:18:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5359:31:20",
																"nodeType": "YulBlock",
																"src": "5359:31:20",
																"statements": [
																	{
																		"nativeSrc": "5361:27:20",
																		"nodeType": "YulAssignment",
																		"src": "5361:27:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "5375:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "5375:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5383:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5383:4:20",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5371:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5371:3:20"
																			},
																			"nativeSrc": "5371:17:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5371:17:20"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "5361:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5361:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5339:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "5339:18:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5332:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5332:6:20"
																},
																"nativeSrc": "5332:26:20",
																"nodeType": "YulFunctionCall",
																"src": "5332:26:20"
															},
															"nativeSrc": "5329:61:20",
															"nodeType": "YulIf",
															"src": "5329:61:20"
														},
														{
															"body": {
																"nativeSrc": "5449:111:20",
																"nodeType": "YulBlock",
																"src": "5449:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5470:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5470:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "5477:3:20",
																							"nodeType": "YulLiteral",
																							"src": "5477:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "5482:10:20",
																							"nodeType": "YulLiteral",
																							"src": "5482:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5473:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "5473:3:20"
																					},
																					"nativeSrc": "5473:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "5473:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5463:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5463:6:20"
																			},
																			"nativeSrc": "5463:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5463:31:20"
																		},
																		"nativeSrc": "5463:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5463:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5514:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5514:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5517:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5517:4:20",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5507:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5507:6:20"
																			},
																			"nativeSrc": "5507:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5507:15:20"
																		},
																		"nativeSrc": "5507:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5507:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5542:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5542:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5545:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5545:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5535:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5535:6:20"
																			},
																			"nativeSrc": "5535:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5535:15:20"
																		},
																		"nativeSrc": "5535:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5535:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5405:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "5405:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "5428:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5428:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5436:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5436:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "5425:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "5425:2:20"
																		},
																		"nativeSrc": "5425:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5425:14:20"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "5402:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5402:2:20"
																},
																"nativeSrc": "5402:38:20",
																"nodeType": "YulFunctionCall",
																"src": "5402:38:20"
															},
															"nativeSrc": "5399:161:20",
															"nodeType": "YulIf",
															"src": "5399:161:20"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "5186:380:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5221:4:20",
														"nodeType": "YulTypedName",
														"src": "5221:4:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "5230:6:20",
														"nodeType": "YulTypedName",
														"src": "5230:6:20",
														"type": ""
													}
												],
												"src": "5186:380:20"
											},
											{
												"body": {
													"nativeSrc": "5603:95:20",
													"nodeType": "YulBlock",
													"src": "5603:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5620:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5620:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5627:3:20",
																				"nodeType": "YulLiteral",
																				"src": "5627:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5632:10:20",
																				"nodeType": "YulLiteral",
																				"src": "5632:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5623:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:20"
																		},
																		"nativeSrc": "5623:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5623:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5613:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5613:6:20"
																},
																"nativeSrc": "5613:31:20",
																"nodeType": "YulFunctionCall",
																"src": "5613:31:20"
															},
															"nativeSrc": "5613:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "5613:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5660:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5660:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5663:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5663:4:20",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5653:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5653:6:20"
																},
																"nativeSrc": "5653:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5653:15:20"
															},
															"nativeSrc": "5653:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5653:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5684:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5684:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5687:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5687:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5677:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5677:6:20"
																},
																"nativeSrc": "5677:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5677:15:20"
															},
															"nativeSrc": "5677:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5677:15:20"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "5571:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "5571:127:20"
											},
											{
												"body": {
													"nativeSrc": "5735:95:20",
													"nodeType": "YulBlock",
													"src": "5735:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5752:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5752:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5759:3:20",
																				"nodeType": "YulLiteral",
																				"src": "5759:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5764:10:20",
																				"nodeType": "YulLiteral",
																				"src": "5764:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5755:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5755:3:20"
																		},
																		"nativeSrc": "5755:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5755:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5745:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5745:6:20"
																},
																"nativeSrc": "5745:31:20",
																"nodeType": "YulFunctionCall",
																"src": "5745:31:20"
															},
															"nativeSrc": "5745:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "5745:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5792:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5792:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5795:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5795:4:20",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5785:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5785:6:20"
																},
																"nativeSrc": "5785:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5785:15:20"
															},
															"nativeSrc": "5785:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5785:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5816:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5816:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5819:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5819:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5809:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5809:6:20"
																},
																"nativeSrc": "5809:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5809:15:20"
															},
															"nativeSrc": "5809:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5809:15:20"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "5703:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "5703:127:20"
											},
											{
												"body": {
													"nativeSrc": "5887:116:20",
													"nodeType": "YulBlock",
													"src": "5887:116:20",
													"statements": [
														{
															"nativeSrc": "5897:20:20",
															"nodeType": "YulAssignment",
															"src": "5897:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "5912:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "5912:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "5915:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "5915:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "5908:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5908:3:20"
																},
																"nativeSrc": "5908:9:20",
																"nodeType": "YulFunctionCall",
																"src": "5908:9:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "5897:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "5897:7:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5975:22:20",
																"nodeType": "YulBlock",
																"src": "5975:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "5977:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "5977:16:20"
																			},
																			"nativeSrc": "5977:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5977:18:20"
																		},
																		"nativeSrc": "5977:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5977:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "5946:1:20",
																						"nodeType": "YulIdentifier",
																						"src": "5946:1:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "5939:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "5939:6:20"
																				},
																				"nativeSrc": "5939:9:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5939:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "5953:1:20",
																						"nodeType": "YulIdentifier",
																						"src": "5953:1:20"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "5960:7:20",
																								"nodeType": "YulIdentifier",
																								"src": "5960:7:20"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "5969:1:20",
																								"nodeType": "YulIdentifier",
																								"src": "5969:1:20"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "5956:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5956:3:20"
																						},
																						"nativeSrc": "5956:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5956:15:20"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "5950:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "5950:2:20"
																				},
																				"nativeSrc": "5950:22:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5950:22:20"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "5936:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "5936:2:20"
																		},
																		"nativeSrc": "5936:37:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5936:37:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5929:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5929:6:20"
																},
																"nativeSrc": "5929:45:20",
																"nodeType": "YulFunctionCall",
																"src": "5929:45:20"
															},
															"nativeSrc": "5926:71:20",
															"nodeType": "YulIf",
															"src": "5926:71:20"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "5835:168:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "5866:1:20",
														"nodeType": "YulTypedName",
														"src": "5866:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "5869:1:20",
														"nodeType": "YulTypedName",
														"src": "5869:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "5875:7:20",
														"nodeType": "YulTypedName",
														"src": "5875:7:20",
														"type": ""
													}
												],
												"src": "5835:168:20"
											},
											{
												"body": {
													"nativeSrc": "6054:171:20",
													"nodeType": "YulBlock",
													"src": "6054:171:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "6085:111:20",
																"nodeType": "YulBlock",
																"src": "6085:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6106:1:20",
																					"nodeType": "YulLiteral",
																					"src": "6106:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "6113:3:20",
																							"nodeType": "YulLiteral",
																							"src": "6113:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "6118:10:20",
																							"nodeType": "YulLiteral",
																							"src": "6118:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "6109:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "6109:3:20"
																					},
																					"nativeSrc": "6109:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "6109:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "6099:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6099:6:20"
																			},
																			"nativeSrc": "6099:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6099:31:20"
																		},
																		"nativeSrc": "6099:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6099:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6150:1:20",
																					"nodeType": "YulLiteral",
																					"src": "6150:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6153:4:20",
																					"nodeType": "YulLiteral",
																					"src": "6153:4:20",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "6143:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6143:6:20"
																			},
																			"nativeSrc": "6143:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6143:15:20"
																		},
																		"nativeSrc": "6143:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6143:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6178:1:20",
																					"nodeType": "YulLiteral",
																					"src": "6178:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6181:4:20",
																					"nodeType": "YulLiteral",
																					"src": "6181:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6171:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6171:6:20"
																			},
																			"nativeSrc": "6171:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6171:15:20"
																		},
																		"nativeSrc": "6171:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6171:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "6074:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6074:1:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "6067:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6067:6:20"
																},
																"nativeSrc": "6067:9:20",
																"nodeType": "YulFunctionCall",
																"src": "6067:9:20"
															},
															"nativeSrc": "6064:132:20",
															"nodeType": "YulIf",
															"src": "6064:132:20"
														},
														{
															"nativeSrc": "6205:14:20",
															"nodeType": "YulAssignment",
															"src": "6205:14:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6214:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6214:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6217:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6217:1:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "6210:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6210:3:20"
																},
																"nativeSrc": "6210:9:20",
																"nodeType": "YulFunctionCall",
																"src": "6210:9:20"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "6205:1:20",
																	"nodeType": "YulIdentifier",
																	"src": "6205:1:20"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "6008:217:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6039:1:20",
														"nodeType": "YulTypedName",
														"src": "6039:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6042:1:20",
														"nodeType": "YulTypedName",
														"src": "6042:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "6048:1:20",
														"nodeType": "YulTypedName",
														"src": "6048:1:20",
														"type": ""
													}
												],
												"src": "6008:217:20"
											},
											{
												"body": {
													"nativeSrc": "6279:79:20",
													"nodeType": "YulBlock",
													"src": "6279:79:20",
													"statements": [
														{
															"nativeSrc": "6289:17:20",
															"nodeType": "YulAssignment",
															"src": "6289:17:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6301:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6301:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6304:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6304:1:20"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "6297:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6297:3:20"
																},
																"nativeSrc": "6297:9:20",
																"nodeType": "YulFunctionCall",
																"src": "6297:9:20"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "6289:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6289:4:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6330:22:20",
																"nodeType": "YulBlock",
																"src": "6330:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6332:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "6332:16:20"
																			},
																			"nativeSrc": "6332:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6332:18:20"
																		},
																		"nativeSrc": "6332:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6332:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "6321:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "6321:4:20"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "6327:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6327:1:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6318:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "6318:2:20"
																},
																"nativeSrc": "6318:11:20",
																"nodeType": "YulFunctionCall",
																"src": "6318:11:20"
															},
															"nativeSrc": "6315:37:20",
															"nodeType": "YulIf",
															"src": "6315:37:20"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "6230:128:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6261:1:20",
														"nodeType": "YulTypedName",
														"src": "6261:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6264:1:20",
														"nodeType": "YulTypedName",
														"src": "6264:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "6270:4:20",
														"nodeType": "YulTypedName",
														"src": "6270:4:20",
														"type": ""
													}
												],
												"src": "6230:128:20"
											},
											{
												"body": {
													"nativeSrc": "6537:223:20",
													"nodeType": "YulBlock",
													"src": "6537:223:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6554:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6554:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6565:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6565:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6547:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6547:6:20"
																},
																"nativeSrc": "6547:21:20",
																"nodeType": "YulFunctionCall",
																"src": "6547:21:20"
															},
															"nativeSrc": "6547:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "6547:21:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6588:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6588:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6599:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6599:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6584:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6584:3:20"
																		},
																		"nativeSrc": "6584:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6584:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6604:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6604:2:20",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6577:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6577:6:20"
																},
																"nativeSrc": "6577:30:20",
																"nodeType": "YulFunctionCall",
																"src": "6577:30:20"
															},
															"nativeSrc": "6577:30:20",
															"nodeType": "YulExpressionStatement",
															"src": "6577:30:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6627:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6627:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6638:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6638:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6623:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6623:3:20"
																		},
																		"nativeSrc": "6623:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6623:18:20"
																	},
																	{
																		"hexValue": "596f75206d7573742073656e6420457468657220746f2067657420746f6b656e",
																		"kind": "string",
																		"nativeSrc": "6643:34:20",
																		"nodeType": "YulLiteral",
																		"src": "6643:34:20",
																		"type": "",
																		"value": "You must send Ether to get token"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6616:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6616:6:20"
																},
																"nativeSrc": "6616:62:20",
																"nodeType": "YulFunctionCall",
																"src": "6616:62:20"
															},
															"nativeSrc": "6616:62:20",
															"nodeType": "YulExpressionStatement",
															"src": "6616:62:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6698:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6698:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6709:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6709:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6694:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6694:3:20"
																		},
																		"nativeSrc": "6694:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6694:18:20"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nativeSrc": "6714:3:20",
																		"nodeType": "YulLiteral",
																		"src": "6714:3:20",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6687:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6687:6:20"
																},
																"nativeSrc": "6687:31:20",
																"nodeType": "YulFunctionCall",
																"src": "6687:31:20"
															},
															"nativeSrc": "6687:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "6687:31:20"
														},
														{
															"nativeSrc": "6727:27:20",
															"nodeType": "YulAssignment",
															"src": "6727:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6739:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6739:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6750:3:20",
																		"nodeType": "YulLiteral",
																		"src": "6750:3:20",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6735:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6735:3:20"
																},
																"nativeSrc": "6735:19:20",
																"nodeType": "YulFunctionCall",
																"src": "6735:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6727:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6727:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_643d0ad0a6759ec767079411f2fcd4927fb74148bf1e38af28af5a49f8c74a3d__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "6363:397:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6514:9:20",
														"nodeType": "YulTypedName",
														"src": "6514:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6528:4:20",
														"nodeType": "YulTypedName",
														"src": "6528:4:20",
														"type": ""
													}
												],
												"src": "6363:397:20"
											},
											{
												"body": {
													"nativeSrc": "6939:178:20",
													"nodeType": "YulBlock",
													"src": "6939:178:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6956:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6956:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6967:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6967:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6949:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6949:6:20"
																},
																"nativeSrc": "6949:21:20",
																"nodeType": "YulFunctionCall",
																"src": "6949:21:20"
															},
															"nativeSrc": "6949:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "6949:21:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6990:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6990:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7001:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7001:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6986:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6986:3:20"
																		},
																		"nativeSrc": "6986:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6986:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7006:2:20",
																		"nodeType": "YulLiteral",
																		"src": "7006:2:20",
																		"type": "",
																		"value": "28"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6979:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6979:6:20"
																},
																"nativeSrc": "6979:30:20",
																"nodeType": "YulFunctionCall",
																"src": "6979:30:20"
															},
															"nativeSrc": "6979:30:20",
															"nodeType": "YulExpressionStatement",
															"src": "6979:30:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7029:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7029:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7040:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7040:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7025:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7025:3:20"
																		},
																		"nativeSrc": "7025:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7025:18:20"
																	},
																	{
																		"hexValue": "4e6f206d6f726520746f6b656e732063616e206265206d696e746564",
																		"kind": "string",
																		"nativeSrc": "7045:30:20",
																		"nodeType": "YulLiteral",
																		"src": "7045:30:20",
																		"type": "",
																		"value": "No more tokens can be minted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7018:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7018:6:20"
																},
																"nativeSrc": "7018:58:20",
																"nodeType": "YulFunctionCall",
																"src": "7018:58:20"
															},
															"nativeSrc": "7018:58:20",
															"nodeType": "YulExpressionStatement",
															"src": "7018:58:20"
														},
														{
															"nativeSrc": "7085:26:20",
															"nodeType": "YulAssignment",
															"src": "7085:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7097:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7097:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7108:2:20",
																		"nodeType": "YulLiteral",
																		"src": "7108:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7093:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7093:3:20"
																},
																"nativeSrc": "7093:18:20",
																"nodeType": "YulFunctionCall",
																"src": "7093:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7085:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7085:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8bd86920dc231c096a9c82436cd9e1b2dda9765ccd28cdfd3626bd80ee15e43__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "6765:352:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6916:9:20",
														"nodeType": "YulTypedName",
														"src": "6916:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6930:4:20",
														"nodeType": "YulTypedName",
														"src": "6930:4:20",
														"type": ""
													}
												],
												"src": "6765:352:20"
											},
											{
												"body": {
													"nativeSrc": "7363:346:20",
													"nodeType": "YulBlock",
													"src": "7363:346:20",
													"statements": [
														{
															"nativeSrc": "7373:27:20",
															"nodeType": "YulAssignment",
															"src": "7373:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7385:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7385:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7396:3:20",
																		"nodeType": "YulLiteral",
																		"src": "7396:3:20",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7381:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7381:3:20"
																},
																"nativeSrc": "7381:19:20",
																"nodeType": "YulFunctionCall",
																"src": "7381:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7373:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7373:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7416:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7416:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7427:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7427:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7409:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7409:6:20"
																},
																"nativeSrc": "7409:25:20",
																"nodeType": "YulFunctionCall",
																"src": "7409:25:20"
															},
															"nativeSrc": "7409:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "7409:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7454:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7454:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7465:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7465:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7450:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7450:3:20"
																		},
																		"nativeSrc": "7450:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7450:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "7474:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7474:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7490:3:20",
																								"nodeType": "YulLiteral",
																								"src": "7490:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7495:1:20",
																								"nodeType": "YulLiteral",
																								"src": "7495:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7486:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "7486:3:20"
																						},
																						"nativeSrc": "7486:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "7486:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7499:1:20",
																						"nodeType": "YulLiteral",
																						"src": "7499:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7482:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "7482:3:20"
																				},
																				"nativeSrc": "7482:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "7482:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7470:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7470:3:20"
																		},
																		"nativeSrc": "7470:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7470:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7443:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7443:6:20"
																},
																"nativeSrc": "7443:60:20",
																"nodeType": "YulFunctionCall",
																"src": "7443:60:20"
															},
															"nativeSrc": "7443:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "7443:60:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7523:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7523:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7534:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7534:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7519:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7519:3:20"
																		},
																		"nativeSrc": "7519:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7519:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nativeSrc": "7543:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7543:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7559:3:20",
																								"nodeType": "YulLiteral",
																								"src": "7559:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7564:1:20",
																								"nodeType": "YulLiteral",
																								"src": "7564:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7555:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "7555:3:20"
																						},
																						"nativeSrc": "7555:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "7555:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7568:1:20",
																						"nodeType": "YulLiteral",
																						"src": "7568:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7551:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "7551:3:20"
																				},
																				"nativeSrc": "7551:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "7551:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7539:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7539:3:20"
																		},
																		"nativeSrc": "7539:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7539:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7512:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7512:6:20"
																},
																"nativeSrc": "7512:60:20",
																"nodeType": "YulFunctionCall",
																"src": "7512:60:20"
															},
															"nativeSrc": "7512:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "7512:60:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7592:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7592:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7603:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7603:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7588:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7588:3:20"
																		},
																		"nativeSrc": "7588:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7588:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "7608:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7608:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7581:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7581:6:20"
																},
																"nativeSrc": "7581:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7581:34:20"
															},
															"nativeSrc": "7581:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7581:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7635:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7635:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7646:3:20",
																				"nodeType": "YulLiteral",
																				"src": "7646:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7631:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7631:3:20"
																		},
																		"nativeSrc": "7631:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7631:19:20"
																	},
																	{
																		"name": "value4",
																		"nativeSrc": "7652:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7652:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7624:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7624:6:20"
																},
																"nativeSrc": "7624:35:20",
																"nodeType": "YulFunctionCall",
																"src": "7624:35:20"
															},
															"nativeSrc": "7624:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "7624:35:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7679:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7679:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7690:3:20",
																				"nodeType": "YulLiteral",
																				"src": "7690:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7675:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7675:3:20"
																		},
																		"nativeSrc": "7675:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7675:19:20"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "7696:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7696:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7668:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7668:6:20"
																},
																"nativeSrc": "7668:35:20",
																"nodeType": "YulFunctionCall",
																"src": "7668:35:20"
															},
															"nativeSrc": "7668:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "7668:35:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "7122:587:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7292:9:20",
														"nodeType": "YulTypedName",
														"src": "7292:9:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "7303:6:20",
														"nodeType": "YulTypedName",
														"src": "7303:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "7311:6:20",
														"nodeType": "YulTypedName",
														"src": "7311:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7319:6:20",
														"nodeType": "YulTypedName",
														"src": "7319:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7327:6:20",
														"nodeType": "YulTypedName",
														"src": "7327:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7335:6:20",
														"nodeType": "YulTypedName",
														"src": "7335:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7343:6:20",
														"nodeType": "YulTypedName",
														"src": "7343:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7354:4:20",
														"nodeType": "YulTypedName",
														"src": "7354:4:20",
														"type": ""
													}
												],
												"src": "7122:587:20"
											},
											{
												"body": {
													"nativeSrc": "7843:171:20",
													"nodeType": "YulBlock",
													"src": "7843:171:20",
													"statements": [
														{
															"nativeSrc": "7853:26:20",
															"nodeType": "YulAssignment",
															"src": "7853:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7865:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7865:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7876:2:20",
																		"nodeType": "YulLiteral",
																		"src": "7876:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7861:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7861:3:20"
																},
																"nativeSrc": "7861:18:20",
																"nodeType": "YulFunctionCall",
																"src": "7861:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7853:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7853:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7895:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7895:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "7910:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7910:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7926:3:20",
																								"nodeType": "YulLiteral",
																								"src": "7926:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7931:1:20",
																								"nodeType": "YulLiteral",
																								"src": "7931:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7922:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "7922:3:20"
																						},
																						"nativeSrc": "7922:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "7922:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7935:1:20",
																						"nodeType": "YulLiteral",
																						"src": "7935:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7918:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "7918:3:20"
																				},
																				"nativeSrc": "7918:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "7918:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7906:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7906:3:20"
																		},
																		"nativeSrc": "7906:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7906:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7888:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7888:6:20"
																},
																"nativeSrc": "7888:51:20",
																"nodeType": "YulFunctionCall",
																"src": "7888:51:20"
															},
															"nativeSrc": "7888:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "7888:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7959:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7959:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7970:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7970:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7955:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7955:3:20"
																		},
																		"nativeSrc": "7955:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7955:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "7979:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7979:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7995:3:20",
																								"nodeType": "YulLiteral",
																								"src": "7995:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "8000:1:20",
																								"nodeType": "YulLiteral",
																								"src": "8000:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7991:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "7991:3:20"
																						},
																						"nativeSrc": "7991:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "7991:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "8004:1:20",
																						"nodeType": "YulLiteral",
																						"src": "8004:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7987:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "7987:3:20"
																				},
																				"nativeSrc": "7987:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "7987:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7975:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7975:3:20"
																		},
																		"nativeSrc": "7975:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7975:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7948:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7948:6:20"
																},
																"nativeSrc": "7948:60:20",
																"nodeType": "YulFunctionCall",
																"src": "7948:60:20"
															},
															"nativeSrc": "7948:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "7948:60:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "7714:300:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7804:9:20",
														"nodeType": "YulTypedName",
														"src": "7804:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7815:6:20",
														"nodeType": "YulTypedName",
														"src": "7815:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7823:6:20",
														"nodeType": "YulTypedName",
														"src": "7823:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7834:4:20",
														"nodeType": "YulTypedName",
														"src": "7834:4:20",
														"type": ""
													}
												],
												"src": "7714:300:20"
											},
											{
												"body": {
													"nativeSrc": "8176:188:20",
													"nodeType": "YulBlock",
													"src": "8176:188:20",
													"statements": [
														{
															"nativeSrc": "8186:26:20",
															"nodeType": "YulAssignment",
															"src": "8186:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8198:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "8198:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8209:2:20",
																		"nodeType": "YulLiteral",
																		"src": "8209:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8194:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "8194:3:20"
																},
																"nativeSrc": "8194:18:20",
																"nodeType": "YulFunctionCall",
																"src": "8194:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8186:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "8186:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8228:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "8228:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "8243:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "8243:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "8259:3:20",
																								"nodeType": "YulLiteral",
																								"src": "8259:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "8264:1:20",
																								"nodeType": "YulLiteral",
																								"src": "8264:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "8255:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "8255:3:20"
																						},
																						"nativeSrc": "8255:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "8255:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "8268:1:20",
																						"nodeType": "YulLiteral",
																						"src": "8268:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "8251:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "8251:3:20"
																				},
																				"nativeSrc": "8251:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "8251:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "8239:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8239:3:20"
																		},
																		"nativeSrc": "8239:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8239:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8221:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8221:6:20"
																},
																"nativeSrc": "8221:51:20",
																"nodeType": "YulFunctionCall",
																"src": "8221:51:20"
															},
															"nativeSrc": "8221:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "8221:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8292:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "8292:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8303:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8303:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8288:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8288:3:20"
																		},
																		"nativeSrc": "8288:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8288:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "8308:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "8308:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8281:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8281:6:20"
																},
																"nativeSrc": "8281:34:20",
																"nodeType": "YulFunctionCall",
																"src": "8281:34:20"
															},
															"nativeSrc": "8281:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "8281:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8335:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "8335:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8346:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8346:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8331:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8331:3:20"
																		},
																		"nativeSrc": "8331:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8331:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "8351:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "8351:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8324:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8324:6:20"
																},
																"nativeSrc": "8324:34:20",
																"nodeType": "YulFunctionCall",
																"src": "8324:34:20"
															},
															"nativeSrc": "8324:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "8324:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "8019:345:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8129:9:20",
														"nodeType": "YulTypedName",
														"src": "8129:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "8140:6:20",
														"nodeType": "YulTypedName",
														"src": "8140:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "8148:6:20",
														"nodeType": "YulTypedName",
														"src": "8148:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8156:6:20",
														"nodeType": "YulTypedName",
														"src": "8156:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8167:4:20",
														"nodeType": "YulTypedName",
														"src": "8167:4:20",
														"type": ""
													}
												],
												"src": "8019:345:20"
											},
											{
												"body": {
													"nativeSrc": "8543:181:20",
													"nodeType": "YulBlock",
													"src": "8543:181:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8560:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "8560:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8571:2:20",
																		"nodeType": "YulLiteral",
																		"src": "8571:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8553:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8553:6:20"
																},
																"nativeSrc": "8553:21:20",
																"nodeType": "YulFunctionCall",
																"src": "8553:21:20"
															},
															"nativeSrc": "8553:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "8553:21:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8594:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "8594:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8605:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8605:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8590:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8590:3:20"
																		},
																		"nativeSrc": "8590:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8590:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8610:2:20",
																		"nodeType": "YulLiteral",
																		"src": "8610:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8583:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8583:6:20"
																},
																"nativeSrc": "8583:30:20",
																"nodeType": "YulFunctionCall",
																"src": "8583:30:20"
															},
															"nativeSrc": "8583:30:20",
															"nodeType": "YulExpressionStatement",
															"src": "8583:30:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8633:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "8633:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8644:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8644:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8629:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8629:3:20"
																		},
																		"nativeSrc": "8629:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8629:18:20"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nativeSrc": "8649:33:20",
																		"nodeType": "YulLiteral",
																		"src": "8649:33:20",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8622:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8622:6:20"
																},
																"nativeSrc": "8622:61:20",
																"nodeType": "YulFunctionCall",
																"src": "8622:61:20"
															},
															"nativeSrc": "8622:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "8622:61:20"
														},
														{
															"nativeSrc": "8692:26:20",
															"nodeType": "YulAssignment",
															"src": "8692:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8704:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "8704:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8715:2:20",
																		"nodeType": "YulLiteral",
																		"src": "8715:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8700:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "8700:3:20"
																},
																"nativeSrc": "8700:18:20",
																"nodeType": "YulFunctionCall",
																"src": "8700:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8692:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "8692:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "8369:355:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8520:9:20",
														"nodeType": "YulTypedName",
														"src": "8520:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8534:4:20",
														"nodeType": "YulTypedName",
														"src": "8534:4:20",
														"type": ""
													}
												],
												"src": "8369:355:20"
											},
											{
												"body": {
													"nativeSrc": "8777:77:20",
													"nodeType": "YulBlock",
													"src": "8777:77:20",
													"statements": [
														{
															"nativeSrc": "8787:16:20",
															"nodeType": "YulAssignment",
															"src": "8787:16:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8798:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "8798:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "8801:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "8801:1:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8794:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "8794:3:20"
																},
																"nativeSrc": "8794:9:20",
																"nodeType": "YulFunctionCall",
																"src": "8794:9:20"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "8787:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "8787:3:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8826:22:20",
																"nodeType": "YulBlock",
																"src": "8826:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8828:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "8828:16:20"
																			},
																			"nativeSrc": "8828:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "8828:18:20"
																		},
																		"nativeSrc": "8828:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "8828:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8818:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "8818:1:20"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "8821:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "8821:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8815:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "8815:2:20"
																},
																"nativeSrc": "8815:10:20",
																"nodeType": "YulFunctionCall",
																"src": "8815:10:20"
															},
															"nativeSrc": "8812:36:20",
															"nodeType": "YulIf",
															"src": "8812:36:20"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "8729:125:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8760:1:20",
														"nodeType": "YulTypedName",
														"src": "8760:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8763:1:20",
														"nodeType": "YulTypedName",
														"src": "8763:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "8769:3:20",
														"nodeType": "YulTypedName",
														"src": "8769:3:20",
														"type": ""
													}
												],
												"src": "8729:125:20"
											},
											{
												"body": {
													"nativeSrc": "9072:276:20",
													"nodeType": "YulBlock",
													"src": "9072:276:20",
													"statements": [
														{
															"nativeSrc": "9082:27:20",
															"nodeType": "YulAssignment",
															"src": "9082:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9094:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "9094:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9105:3:20",
																		"nodeType": "YulLiteral",
																		"src": "9105:3:20",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9090:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "9090:3:20"
																},
																"nativeSrc": "9090:19:20",
																"nodeType": "YulFunctionCall",
																"src": "9090:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9082:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "9082:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9125:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "9125:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "9136:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9136:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9118:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9118:6:20"
																},
																"nativeSrc": "9118:25:20",
																"nodeType": "YulFunctionCall",
																"src": "9118:25:20"
															},
															"nativeSrc": "9118:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "9118:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9163:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9163:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9174:2:20",
																				"nodeType": "YulLiteral",
																				"src": "9174:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9159:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9159:3:20"
																		},
																		"nativeSrc": "9159:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9159:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "9179:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9179:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9152:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9152:6:20"
																},
																"nativeSrc": "9152:34:20",
																"nodeType": "YulFunctionCall",
																"src": "9152:34:20"
															},
															"nativeSrc": "9152:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "9152:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9206:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9206:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9217:2:20",
																				"nodeType": "YulLiteral",
																				"src": "9217:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9202:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9202:3:20"
																		},
																		"nativeSrc": "9202:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9202:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "9222:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9222:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9195:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9195:6:20"
																},
																"nativeSrc": "9195:34:20",
																"nodeType": "YulFunctionCall",
																"src": "9195:34:20"
															},
															"nativeSrc": "9195:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "9195:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9249:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9249:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9260:2:20",
																				"nodeType": "YulLiteral",
																				"src": "9260:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9245:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9245:3:20"
																		},
																		"nativeSrc": "9245:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9245:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "9265:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9265:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9238:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9238:6:20"
																},
																"nativeSrc": "9238:34:20",
																"nodeType": "YulFunctionCall",
																"src": "9238:34:20"
															},
															"nativeSrc": "9238:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "9238:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9292:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9292:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9303:3:20",
																				"nodeType": "YulLiteral",
																				"src": "9303:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9288:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9288:3:20"
																		},
																		"nativeSrc": "9288:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9288:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "9313:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "9313:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "9329:3:20",
																								"nodeType": "YulLiteral",
																								"src": "9329:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "9334:1:20",
																								"nodeType": "YulLiteral",
																								"src": "9334:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "9325:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "9325:3:20"
																						},
																						"nativeSrc": "9325:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "9325:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "9338:1:20",
																						"nodeType": "YulLiteral",
																						"src": "9338:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "9321:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "9321:3:20"
																				},
																				"nativeSrc": "9321:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "9321:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "9309:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9309:3:20"
																		},
																		"nativeSrc": "9309:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9309:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9281:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9281:6:20"
																},
																"nativeSrc": "9281:61:20",
																"nodeType": "YulFunctionCall",
																"src": "9281:61:20"
															},
															"nativeSrc": "9281:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "9281:61:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "8859:489:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9009:9:20",
														"nodeType": "YulTypedName",
														"src": "9009:9:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "9020:6:20",
														"nodeType": "YulTypedName",
														"src": "9020:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "9028:6:20",
														"nodeType": "YulTypedName",
														"src": "9028:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9036:6:20",
														"nodeType": "YulTypedName",
														"src": "9036:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9044:6:20",
														"nodeType": "YulTypedName",
														"src": "9044:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9052:6:20",
														"nodeType": "YulTypedName",
														"src": "9052:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9063:4:20",
														"nodeType": "YulTypedName",
														"src": "9063:4:20",
														"type": ""
													}
												],
												"src": "8859:489:20"
											},
											{
												"body": {
													"nativeSrc": "9534:217:20",
													"nodeType": "YulBlock",
													"src": "9534:217:20",
													"statements": [
														{
															"nativeSrc": "9544:27:20",
															"nodeType": "YulAssignment",
															"src": "9544:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9556:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "9556:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9567:3:20",
																		"nodeType": "YulLiteral",
																		"src": "9567:3:20",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9552:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "9552:3:20"
																},
																"nativeSrc": "9552:19:20",
																"nodeType": "YulFunctionCall",
																"src": "9552:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9544:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "9544:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9587:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "9587:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "9598:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9598:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9580:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9580:6:20"
																},
																"nativeSrc": "9580:25:20",
																"nodeType": "YulFunctionCall",
																"src": "9580:25:20"
															},
															"nativeSrc": "9580:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "9580:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9625:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9625:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9636:2:20",
																				"nodeType": "YulLiteral",
																				"src": "9636:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9621:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9621:3:20"
																		},
																		"nativeSrc": "9621:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9621:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "9645:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "9645:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9653:4:20",
																				"nodeType": "YulLiteral",
																				"src": "9653:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "9641:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9641:3:20"
																		},
																		"nativeSrc": "9641:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9641:17:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9614:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9614:6:20"
																},
																"nativeSrc": "9614:45:20",
																"nodeType": "YulFunctionCall",
																"src": "9614:45:20"
															},
															"nativeSrc": "9614:45:20",
															"nodeType": "YulExpressionStatement",
															"src": "9614:45:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9679:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9679:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9690:2:20",
																				"nodeType": "YulLiteral",
																				"src": "9690:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9675:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9675:3:20"
																		},
																		"nativeSrc": "9675:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9675:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "9695:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9695:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9668:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9668:6:20"
																},
																"nativeSrc": "9668:34:20",
																"nodeType": "YulFunctionCall",
																"src": "9668:34:20"
															},
															"nativeSrc": "9668:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "9668:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9722:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "9722:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9733:2:20",
																				"nodeType": "YulLiteral",
																				"src": "9733:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9718:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9718:3:20"
																		},
																		"nativeSrc": "9718:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9718:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "9738:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "9738:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9711:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9711:6:20"
																},
																"nativeSrc": "9711:34:20",
																"nodeType": "YulFunctionCall",
																"src": "9711:34:20"
															},
															"nativeSrc": "9711:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "9711:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "9353:398:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9479:9:20",
														"nodeType": "YulTypedName",
														"src": "9479:9:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "9490:6:20",
														"nodeType": "YulTypedName",
														"src": "9490:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9498:6:20",
														"nodeType": "YulTypedName",
														"src": "9498:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9506:6:20",
														"nodeType": "YulTypedName",
														"src": "9506:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9514:6:20",
														"nodeType": "YulTypedName",
														"src": "9514:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9525:4:20",
														"nodeType": "YulTypedName",
														"src": "9525:4:20",
														"type": ""
													}
												],
												"src": "9353:398:20"
											},
											{
												"body": {
													"nativeSrc": "9788:95:20",
													"nodeType": "YulBlock",
													"src": "9788:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9805:1:20",
																		"nodeType": "YulLiteral",
																		"src": "9805:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "9812:3:20",
																				"nodeType": "YulLiteral",
																				"src": "9812:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9817:10:20",
																				"nodeType": "YulLiteral",
																				"src": "9817:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "9808:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "9808:3:20"
																		},
																		"nativeSrc": "9808:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "9808:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9798:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9798:6:20"
																},
																"nativeSrc": "9798:31:20",
																"nodeType": "YulFunctionCall",
																"src": "9798:31:20"
															},
															"nativeSrc": "9798:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "9798:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9845:1:20",
																		"nodeType": "YulLiteral",
																		"src": "9845:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9848:4:20",
																		"nodeType": "YulLiteral",
																		"src": "9848:4:20",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9838:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9838:6:20"
																},
																"nativeSrc": "9838:15:20",
																"nodeType": "YulFunctionCall",
																"src": "9838:15:20"
															},
															"nativeSrc": "9838:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "9838:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9869:1:20",
																		"nodeType": "YulLiteral",
																		"src": "9869:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9872:4:20",
																		"nodeType": "YulLiteral",
																		"src": "9872:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "9862:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "9862:6:20"
																},
																"nativeSrc": "9862:15:20",
																"nodeType": "YulFunctionCall",
																"src": "9862:15:20"
															},
															"nativeSrc": "9862:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "9862:15:20"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "9756:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "9756:127:20"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 96))\n        value3 := value_1\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 160))\n        value5 := value_3\n        let value_4 := 0\n        value_4 := calldataload(add(headStart, 192))\n        value6 := value_4\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_643d0ad0a6759ec767079411f2fcd4927fb74148bf1e38af28af5a49f8c74a3d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"You must send Ether to get token\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8bd86920dc231c096a9c82436cd9e1b2dda9765ccd28cdfd3626bd80ee15e43__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"No more tokens can be minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2246": [
									{
										"length": 32,
										"start": 2420
									}
								],
								"2248": [
									{
										"length": 32,
										"start": 2378
									}
								],
								"2250": [
									{
										"length": 32,
										"start": 2336
									}
								],
								"2252": [
									{
										"length": 32,
										"start": 2501
									}
								],
								"2254": [
									{
										"length": 32,
										"start": 2541
									}
								],
								"2257": [
									{
										"length": 32,
										"start": 2843
									}
								],
								"2260": [
									{
										"length": 32,
										"start": 2888
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x11B JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x9D JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x62 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xB8972DB5 EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x381 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x7FF9B596 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2E3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x6A61E5FC EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x133 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x10F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x154 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x114E JUMP JUMPDEST PUSH2 0x449 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x46C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x47A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x1188 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x224 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x233 CALLDATASIZE PUSH1 0x4 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x258 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x4DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x119F JUMP JUMPDEST PUSH2 0x4EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A9 PUSH2 0x508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x133 PUSH2 0x54A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x302 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x311 CALLDATASIZE PUSH1 0x4 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0x559 JUMP JUMPDEST PUSH2 0x188 PUSH2 0x5A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x329 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0x124E JUMP JUMPDEST PUSH2 0x6B7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x348 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x188 PUSH2 0x357 CALLDATASIZE PUSH1 0x4 PUSH2 0x12BB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F8 PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x119F JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x3AF SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3DB SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x43D DUP2 DUP6 DUP6 PUSH2 0x82A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x456 DUP6 DUP3 DUP6 PUSH2 0x83C JUMP JUMPDEST PUSH2 0x461 DUP6 DUP6 DUP6 PUSH2 0x8B7 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x475 PUSH2 0x914 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x482 PUSH2 0xA3D JUMP JUMPDEST PUSH2 0x48A PUSH2 0xA96 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4C0 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH2 0x4CB PUSH1 0x1 PUSH1 0x9 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D5 PUSH2 0xA96 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST PUSH2 0x4E2 PUSH2 0xA96 JUMP JUMPDEST PUSH2 0x4CB PUSH0 PUSH2 0xAC3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x443 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x519 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x521 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3AF SWAP1 PUSH2 0x12EC JUMP JUMPDEST PUSH0 PUSH2 0x562 PUSH2 0xA3D JUMP JUMPDEST PUSH0 PUSH3 0x186A0 PUSH2 0x572 DUP5 PUSH1 0x2 PUSH2 0x1338 JUMP JUMPDEST PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x134F JUMP JUMPDEST SWAP1 POP PUSH2 0x588 CALLER DUP3 PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x59B DUP5 PUSH2 0x596 DUP4 DUP7 PUSH2 0x136E JUMP JUMPDEST PUSH2 0xBA6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x443 PUSH1 0x1 PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH0 PUSH2 0x5B1 PUSH2 0xA3D JUMP JUMPDEST PUSH0 CALLVALUE GT PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D7573742073656E6420457468657220746F2067657420746F6B656E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH1 0xA SLOAD CALLVALUE PUSH2 0x61E SWAP2 SWAP1 PUSH2 0x134F JUMP JUMPDEST PUSH2 0x62A SWAP1 PUSH2 0x3E8 PUSH2 0x1338 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0xB SLOAD GT PUSH2 0x67D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206D6F726520746F6B656E732063616E206265206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST DUP1 PUSH1 0xB PUSH0 DUP3 DUP3 SLOAD PUSH2 0x68E SWAP2 SWAP1 PUSH2 0x136E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x69E SWAP1 POP CALLER DUP3 PUSH2 0xBB3 JUMP JUMPDEST POP POP CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x9 SSTORE SWAP1 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x6DB JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x726 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x780 DUP3 PUSH2 0xBE7 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x78F DUP3 DUP8 DUP8 DUP8 PUSH2 0xC13 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x7E1 DUP11 DUP11 DUP11 PUSH2 0x82A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7F5 PUSH2 0xA96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x827 DUP2 PUSH2 0xAC3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x837 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xC3F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x8B1 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x8B1 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0xC3F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x909 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0x837 DUP4 DUP4 DUP4 PUSH2 0xD11 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x96C JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x996 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x475 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x9 SLOAD SUB PUSH2 0xA8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4CB JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x475 PUSH32 0x0 PUSH1 0x5 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x475 PUSH32 0x0 PUSH1 0x6 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB97 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0xBA2 DUP3 PUSH0 DUP4 PUSH2 0xD11 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x43D DUP2 DUP6 DUP6 PUSH2 0x8B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBDC JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH2 0xBA2 PUSH0 DUP4 DUP4 PUSH2 0xD11 JUMP JUMPDEST PUSH0 PUSH2 0x443 PUSH2 0xBF3 PUSH2 0x914 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0xC23 DUP9 DUP9 DUP9 DUP9 PUSH2 0xEE0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xC33 DUP3 DUP3 PUSH2 0xFA8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xC68 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC91 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x8B1 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xD03 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD3B JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xD30 SWAP2 SWAP1 PUSH2 0x1381 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xDAB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xD8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDC7 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xDE5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xE2A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xE51 JUMPI PUSH2 0xE4A DUP4 PUSH2 0x1060 JUMP JUMPDEST SWAP1 POP PUSH2 0x443 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xE5D SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE89 SWAP1 PUSH2 0x12EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xED4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEAB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEB7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x443 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xF19 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF6A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF95 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xF9E JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFBB JUMPI PUSH2 0xFBB PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0xFC4 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFD8 JUMPI PUSH2 0xFD8 PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0xFF6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x100A JUMPI PUSH2 0x100A PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0x102B JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x103F JUMPI PUSH2 0x103F PUSH2 0x1394 JUMP JUMPDEST SUB PUSH2 0xBA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x606 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x106C DUP4 PUSH2 0x109D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x443 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x1104 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x10C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1121 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1137 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1140 DUP4 PUSH2 0x110B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1160 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1169 DUP5 PUSH2 0x110B JUMP JUMPDEST SWAP3 POP PUSH2 0x1177 PUSH1 0x20 DUP6 ADD PUSH2 0x110B JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1198 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11AF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1104 DUP3 PUSH2 0x110B JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0x11D6 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0x10C4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x11E8 DUP2 DUP10 PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x123D JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x121F JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1264 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x126D DUP9 PUSH2 0x110B JUMP JUMPDEST SWAP7 POP PUSH2 0x127B PUSH1 0x20 DUP10 ADD PUSH2 0x110B JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x129E JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12CC JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x12D5 DUP4 PUSH2 0x110B JUMP JUMPDEST SWAP2 POP PUSH2 0x12E3 PUSH1 0x20 DUP5 ADD PUSH2 0x110B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1300 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x131E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x443 JUMPI PUSH2 0x443 PUSH2 0x1324 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1369 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x443 JUMPI PUSH2 0x443 PUSH2 0x1324 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x443 JUMPI PUSH2 0x443 PUSH2 0x1324 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x8AEE7ADD9ECB4350 LOG1 AND SWAP1 STOP 0xE7 0xAE 0xBF PUSH17 0x7F333B394C738F5C660CA74E77E7E96473 PUSH16 0x6C634300081A00330000000000000000 ",
							"sourceMap": "255:1852:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1779:89:4;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3998:186;;;;;;;;;;-1:-1:-1;3998:186:4;;;;;:::i;:::-;;:::i;:::-;;;1181:14:20;;1174:22;1156:41;;1144:2;1129:18;3998:186:4;1016:187:20;2849:97:4;;;;;;;;;;-1:-1:-1;2927:12:4;;2849:97;;;1354:25:20;;;1342:2;1327:18;2849:97:4;1208:177:20;4776:244:4;;;;;;;;;;-1:-1:-1;4776:244:4;;;;;:::i;:::-;;:::i;2707:82::-;;;;;;;;;;-1:-1:-1;2707:82:4;;2780:2;1911:36:20;;1899:2;1884:18;2707:82:4;1769:184:20;2659:112:6;;;;;;;;;;;;;:::i;1511:153:19:-;;;;;;;;;;;;;:::i;:::-;;1672:124;;;;;;;;;;-1:-1:-1;1672:124:19;;;;;:::i;:::-;;:::i;3004:116:4:-;;;;;;;;;;-1:-1:-1;3004:116:4;;;;;:::i;:::-;-1:-1:-1;;;;;3095:18:4;3069:7;3095:18;;;;;;;;;;;;3004:116;2293:101:0;;;;;;;;;;;;;:::i;2409:143:6:-;;;;;;;;;;-1:-1:-1;2409:143:6;;;;;:::i;:::-;;:::i;324:25:19:-;;;;;;;;;;;;;;;;5144:557:15;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;1638:85:0:-;;;;;;;;;;-1:-1:-1;1710:6:0;;1638:85;;-1:-1:-1;;;;;1710:6:0;;;3951:51:20;;3939:2;3924:18;1638:85:0;3805:203:20;1981:93:4;;;;;;;;;;;;;:::i;1809:295:19:-;;;;;;;;;;-1:-1:-1;1809:295:19;;;;;:::i;:::-;;:::i;950:553::-;;;:::i;1683:672:6:-;;;;;;;;;;-1:-1:-1;1683:672:6;;;;;:::i;:::-;;:::i;3551:140:4:-;;;;;;;;;;-1:-1:-1;3551:140:4;;;;;:::i;:::-;-1:-1:-1;;;;;3657:18:4;;;3631:7;3657:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3551:140;2543:215:0;;;;;;;;;;-1:-1:-1;2543:215:0;;;;;:::i;:::-;;:::i;1779:89:4:-;1824:13;1856:5;1849:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1779:89;:::o;3998:186::-;4071:4;735:10:9;4125:31:4;735:10:9;4141:7:4;4150:5;4125:8;:31::i;:::-;4173:4;4166:11;;;3998:186;;;;;:::o;4776:244::-;4863:4;735:10:9;4919:37:4;4935:4;735:10:9;4950:5:4;4919:15;:37::i;:::-;4966:26;4976:4;4982:2;4986:5;4966:9;:26::i;:::-;-1:-1:-1;5009:4:4;;4776:244;-1:-1:-1;;;;4776:244:4:o;2659:112:6:-;2718:7;2744:20;:18;:20::i;:::-;2737:27;;2659:112;:::o;1511:153:19:-;2261:21:3;:19;:21::i;:::-;1531:13:0::1;:11;:13::i;:::-;1710:6:::0;;1572:48:19::2;::::0;-1:-1:-1;;;;;1710:6:0;;;;1598:21:19::2;1572:48:::0;::::2;;;::::0;::::2;::::0;;;1598:21;1710:6:0;1572:48:19;::::2;;;;;;;;;;;;;::::0;::::2;;;;;;2303:20:3::0;1716:1;2809:7;:22;2629:209;2303:20;1511:153:19:o;1672:124::-;1531:13:0;:11;:13::i;:::-;1741:10:19::1;:21:::0;1672:124::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;2409:143:6:-:0;-1:-1:-1;;;;;624:14:10;;2500:7:6;624:14:10;;;:7;:14;;;;;;2526:19:6;538:107:10;5144:557:15;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:15;;;-1:-1:-1;5482:212:15;;-1:-1:-1;5590:13:15;;-1:-1:-1;5625:4:15;;-1:-1:-1;5652:1:15;-1:-1:-1;5668:16:15;-1:-1:-1;5482:212:15;-1:-1:-1;5144:557:15:o;1981:93:4:-;2028:13;2060:7;2053:14;;;;;:::i;1809:295:19:-;1892:4;2261:21:3;:19;:21::i;:::-;1909:18:19::1;1942:6;1930:9;:5:::0;1938:1:::1;1930:9;:::i;:::-;:18;;;;:::i;:::-;1909:39;;1970:29;1976:10;1988;1970:5;:29::i;:::-;2058:38;2073:2:::0;2077:18:::1;2085:10:::0;2077:5;:18:::1;:::i;:::-;2058:14;:38::i;:::-;2051:45;;;2303:20:3::0;1716:1;2809:7;:22;2629:209;950:553:19;1010:7;2261:21:3;:19;:21::i;:::-;1050:1:19::1;1038:9;:13;1030:59;;;::::0;-1:-1:-1;;;1030:59:19;;6565:2:20;1030:59:19::1;::::0;::::1;6547:21:20::0;6604:2;6584:18;;;6577:30;6643:34;6623:18;;;6616:62;-1:-1:-1;;;6694:18:20;;;6687:31;6735:19;;1030:59:19::1;;;;;;;;;1110:20;1145:10;;1133:9;:22;;;;:::i;:::-;:29;::::0;1158:4:::1;1133:29;:::i;:::-;1110:52;;1258:1;1239:16;;:20;1231:61;;;::::0;-1:-1:-1;;;1231:61:19;;6967:2:20;1231:61:19::1;::::0;::::1;6949:21:20::0;7006:2;6986:18;;;6979:30;7045;7025:18;;;7018:58;7093:18;;1231:61:19::1;6765:352:20::0;1231:61:19::1;1373:12;1353:16;;:32;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;1396:31:19::1;::::0;-1:-1:-1;1402:10:19::1;1414:12:::0;1396:5:::1;:31::i;:::-;-1:-1:-1::0;;1484:10:19::1;3069:7:4::0;3095:18;;;;;;;;;;;1716:1:3;2809:7;:22;950:553:19;:::o;1683:672:6:-;1904:8;1886:15;:26;1882:97;;;1935:33;;-1:-1:-1;;;1935:33:6;;;;;1354:25:20;;;1327:18;;1935:33:6;1208:177:20;1882:97:6;1989:18;1024:95;2048:5;2055:7;2064:5;2071:16;2081:5;-1:-1:-1;;;;;1121:14:10;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2071:16:6;2020:78;;;;;;7409:25:20;;;;-1:-1:-1;;;;;7470:32:20;;;7450:18;;;7443:60;7539:32;;;;7519:18;;;7512:60;7588:18;;;7581:34;7631:19;;;7624:35;7675:19;;;7668:35;;;7381:19;;2020:78:6;;;;;;;;;;;;2010:89;;;;;;1989:110;;2110:12;2125:28;2142:10;2125:16;:28::i;:::-;2110:43;;2164:14;2181:28;2195:4;2201:1;2204;2207;2181:13;:28::i;:::-;2164:45;;2233:5;-1:-1:-1;;;;;2223:15:6;:6;-1:-1:-1;;;;;2223:15:6;;2219:88;;2261:35;;-1:-1:-1;;;2261:35:6;;-1:-1:-1;;;;;7906:32:20;;;2261:35:6;;;7888:51:20;7975:32;;7955:18;;;7948:60;7861:18;;2261:35:6;7714:300:20;2219:88:6;2317:31;2326:5;2333:7;2342:5;2317:8;:31::i;:::-;1872:483;;;1683:672;;;;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;3951:51:20::0;3924:18;;2672:31:0::1;3805:203:20::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;8726:128:4:-;8810:37;8819:5;8826:7;8835:5;8842:4;8810:8;:37::i;:::-;8726:128;;;:::o;10415:477::-;-1:-1:-1;;;;;3657:18:4;;;10514:24;3657:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10580:37:4;;10576:310;;10656:5;10637:16;:24;10633:130;;;10688:60;;-1:-1:-1;;;10688:60:4;;-1:-1:-1;;;;;8239:32:20;;10688:60:4;;;8221:51:20;8288:18;;;8281:34;;;8331:18;;;8324:34;;;8194:18;;10688:60:4;8019:345:20;10633:130:4;10804:57;10813:5;10820:7;10848:5;10829:16;:24;10855:5;10804:8;:57::i;:::-;10504:388;10415:477;;;:::o;5393:300::-;-1:-1:-1;;;;;5476:18:4;;5472:86;;5517:30;;-1:-1:-1;;;5517:30:4;;5544:1;5517:30;;;3951:51:20;3924:18;;5517:30:4;3805:203:20;5472:86:4;-1:-1:-1;;;;;5571:16:4;;5567:86;;5610:32;;-1:-1:-1;;;5610:32:4;;5639:1;5610:32;;;3951:51:20;3924:18;;5610:32:4;3805:203:20;5567:86:4;5662:24;5670:4;5676:2;5680:5;5662:7;:24::i;3845:262:15:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:15;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:15;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;9118:25:20;4226:11:15;9159:18:20;;;9152:34;;;;4239:14:15;9202:18:20;;;9195:34;4255:13:15;9245:18:20;;;9238:34;4278:4:15;9288:19:20;;;9281:61;4168:7:15;;9090:19:20;;4204:80:15;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;2336:287:3;1759:1;2468:7;;:19;2460:63;;;;-1:-1:-1;;;2460:63:3;;8571:2:20;2460:63:3;;;8553:21:20;8610:2;8590:18;;;8583:30;8649:33;8629:18;;;8622:61;8700:18;;2460:63:3;8369:355:20;2460:63:3;1759:1;2598:7;:18;2336:287::o;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:9;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:9;1901:40:0;;;3951:51:20;3924:18;;1901:40:0;3805:203:20;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;6021:126:15:-;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;7984:206:4:-;-1:-1:-1;;;;;8054:21:4;;8050:89;;8098:30;;-1:-1:-1;;;8098:30:4;;8125:1;8098:30;;;3951:51:20;3924:18;;8098:30:4;3805:203:20;8050:89:4;8148:35;8156:7;8173:1;8177:5;8148:7;:35::i;:::-;7984:206;;:::o;3315:178::-;3384:4;735:10:9;3438:27:4;735:10:9;3455:2:4;3459:5;3438:9;:27::i;7458:208::-;-1:-1:-1;;;;;7528:21:4;;7524:91;;7572:32;;-1:-1:-1;;;7572:32:4;;7601:1;7572:32;;;3951:51:20;3924:18;;7572:32:4;3805:203:20;7524:91:4;7624:35;7640:1;7644:7;7653:5;7624:7;:35::i;4917:176:15:-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3501:4:16;3495:11;-1:-1:-1;;;3519:23:16;;3571:4;3562:14;;3555:39;;;;3623:4;3614:14;;3607:34;3679:4;3664:20;;;3326:374;6887:260:14;6972:7;6992:17;7011:18;7031:16;7051:25;7062:4;7068:1;7071;7074;7051:10;:25::i;:::-;6991:85;;;;;;7086:28;7098:5;7105:8;7086:11;:28::i;:::-;-1:-1:-1;7131:9:14;;6887:260;-1:-1:-1;;;;;;6887:260:14:o;9701:432:4:-;-1:-1:-1;;;;;9813:19:4;;9809:89;;9855:32;;-1:-1:-1;;;9855:32:4;;9884:1;9855:32;;;3951:51:20;3924:18;;9855:32:4;3805:203:20;9809:89:4;-1:-1:-1;;;;;9911:21:4;;9907:90;;9955:31;;-1:-1:-1;;;9955:31:4;;9983:1;9955:31;;;3951:51:20;3924:18;;9955:31:4;3805:203:20;9907:90:4;-1:-1:-1;;;;;10006:18:4;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10051:76;;;;10101:7;-1:-1:-1;;;;;10085:31:4;10094:5;-1:-1:-1;;;;;10085:31:4;;10110:5;10085:31;;;;1354:25:20;;1342:2;1327:18;;1208:177;10085:31:4;;;;;;;;9701:432;;;;:::o;6008:1107::-;-1:-1:-1;;;;;6097:18:4;;6093:540;;6249:5;6233:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6093:540:4;;-1:-1:-1;6093:540:4;;-1:-1:-1;;;;;6307:15:4;;6285:19;6307:15;;;;;;;;;;;6340:19;;;6336:115;;;6386:50;;-1:-1:-1;;;6386:50:4;;-1:-1:-1;;;;;8239:32:20;;6386:50:4;;;8221:51:20;8288:18;;;8281:34;;;8331:18;;;8324:34;;;8194:18;;6386:50:4;8019:345:20;6336:115:4;-1:-1:-1;;;;;6571:15:4;;:9;:15;;;;;;;;;;6589:19;;;;6571:37;;6093:540;-1:-1:-1;;;;;6647:16:4;;6643:425;;6810:12;:21;;;;;;;6643:425;;;-1:-1:-1;;;;;7021:13:4;;:9;:13;;;;;;;;;;:22;;;;;;6643:425;7098:2;-1:-1:-1;;;;;7083:25:4;7092:4;-1:-1:-1;;;;;7083:25:4;;7102:5;7083:25;;;;1354::20;;1342:2;1327:18;;1208:177;7083:25:4;;;;;;;;6008:1107;;;:::o;3358:267:11:-;3452:13;1390:66;3481:46;;3477:142;;3550:15;3559:5;3550:8;:15::i;:::-;3543:22;;;;3477:142;3603:5;3596:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5203:1551:14;5329:17;;;6283:66;6270:79;;6266:164;;;-1:-1:-1;6381:1:14;;-1:-1:-1;6385:30:14;;-1:-1:-1;6417:1:14;6365:54;;6266:164;6541:24;;;6524:14;6541:24;;;;;;;;;9580:25:20;;;9653:4;9641:17;;9621:18;;;9614:45;;;;9675:18;;;9668:34;;;9718:18;;;9711:34;;;6541:24:14;;9552:19:20;;6541:24:14;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6541:24:14;;-1:-1:-1;;6541:24:14;;;-1:-1:-1;;;;;;;6579:20:14;;6575:113;;-1:-1:-1;6631:1:14;;-1:-1:-1;6635:29:14;;-1:-1:-1;6631:1:14;;-1:-1:-1;6615:62:14;;6575:113;6706:6;-1:-1:-1;6714:20:14;;-1:-1:-1;6714:20:14;;-1:-1:-1;5203:1551:14;;;;;;;;;:::o;7280:532::-;7375:20;7366:5;:29;;;;;;;;:::i;:::-;;7362:444;;7280:532;;:::o;7362:444::-;7471:29;7462:5;:38;;;;;;;;:::i;:::-;;7458:348;;7523:23;;-1:-1:-1;;;7523:23:14;;;;;;;;;;;7458:348;7576:35;7567:5;:44;;;;;;;;:::i;:::-;;7563:243;;7634:46;;-1:-1:-1;;;7634:46:14;;;;;1354:25:20;;;1327:18;;7634:46:14;1208:177:20;7563:243:14;7710:30;7701:5;:39;;;;;;;;:::i;:::-;;7697:109;;7763:32;;-1:-1:-1;;;7763:32:14;;;;;1354:25:20;;;1327:18;;7763:32:14;1208:177:20;2078:378:11;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:11;;2300:14;;;;;;;;;-1:-1:-1;;;2363:16:11;;;-1:-1:-1;2408:4:11;2399:14;;2392:28;;;;-1:-1:-1;2363:16:11;2078:378::o;2528:245::-;2589:7;2661:4;2625:40;;2688:2;2679:11;;2675:69;;;2713:20;;-1:-1:-1;;;2713:20:11;;;;;;;;;;;14:289:20;56:3;94:5;88:12;121:6;116:3;109:19;177:6;170:4;163:5;159:16;152:4;147:3;143:14;137:47;229:1;222:4;213:6;208:3;204:16;200:27;193:38;292:4;285:2;281:7;276:2;268:6;264:15;260:29;255:3;251:39;247:50;240:57;;;14:289;;;;:::o;308:220::-;457:2;446:9;439:21;420:4;477:45;518:2;507:9;503:18;495:6;477:45;:::i;:::-;469:53;308:220;-1:-1:-1;;;308:220:20:o;533:173::-;601:20;;-1:-1:-1;;;;;650:31:20;;640:42;;630:70;;696:1;693;686:12;630:70;533:173;;;:::o;711:300::-;779:6;787;840:2;828:9;819:7;815:23;811:32;808:52;;;856:1;853;846:12;808:52;879:29;898:9;879:29;:::i;:::-;869:39;977:2;962:18;;;;949:32;;-1:-1:-1;;;711:300:20:o;1390:374::-;1467:6;1475;1483;1536:2;1524:9;1515:7;1511:23;1507:32;1504:52;;;1552:1;1549;1542:12;1504:52;1575:29;1594:9;1575:29;:::i;:::-;1565:39;;1623:38;1657:2;1646:9;1642:18;1623:38;:::i;:::-;1390:374;;1613:48;;-1:-1:-1;;;1730:2:20;1715:18;;;;1702:32;;1390:374::o;2140:226::-;2199:6;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;-1:-1:-1;2313:23:20;;2140:226;-1:-1:-1;2140:226:20:o;2371:186::-;2430:6;2483:2;2471:9;2462:7;2458:23;2454:32;2451:52;;;2499:1;2496;2489:12;2451:52;2522:29;2541:9;2522:29;:::i;2562:1238::-;2968:3;2963;2959:13;2951:6;2947:26;2936:9;2929:45;3010:3;3005:2;2994:9;2990:18;2983:31;2910:4;3037:46;3078:3;3067:9;3063:19;3055:6;3037:46;:::i;:::-;3131:9;3123:6;3119:22;3114:2;3103:9;3099:18;3092:50;3165:33;3191:6;3183;3165:33;:::i;:::-;3229:2;3214:18;;3207:34;;;-1:-1:-1;;;;;3278:32:20;;3272:3;3257:19;;3250:61;3298:3;3327:19;;3320:35;;;3392:22;;;3386:3;3371:19;;3364:51;3464:13;;3486:22;;;3536:2;3562:15;;;;-1:-1:-1;3524:15:20;;;;-1:-1:-1;3605:169:20;3619:6;3616:1;3613:13;3605:169;;;3680:13;;3668:26;;3723:2;3749:15;;;;3714:12;;;;3641:1;3634:9;3605:169;;;-1:-1:-1;3791:3:20;;2562:1238;-1:-1:-1;;;;;;;;;;;2562:1238:20:o;4013:903::-;4124:6;4132;4140;4148;4156;4164;4172;4225:3;4213:9;4204:7;4200:23;4196:33;4193:53;;;4242:1;4239;4232:12;4193:53;4265:29;4284:9;4265:29;:::i;:::-;4255:39;;4313:38;4347:2;4336:9;4332:18;4313:38;:::i;:::-;4303:48;-1:-1:-1;4420:2:20;4405:18;;4392:32;;-1:-1:-1;4521:2:20;4506:18;;4493:32;;-1:-1:-1;4603:3:20;4588:19;;4575:33;4652:4;4639:18;;4627:31;;4617:59;;4672:1;4669;4662:12;4617:59;4013:903;;;;-1:-1:-1;4013:903:20;;;;4695:7;4775:3;4760:19;;4747:33;;-1:-1:-1;4879:3:20;4864:19;;;4851:33;;4013:903;-1:-1:-1;;4013:903:20:o;4921:260::-;4989:6;4997;5050:2;5038:9;5029:7;5025:23;5021:32;5018:52;;;5066:1;5063;5056:12;5018:52;5089:29;5108:9;5089:29;:::i;:::-;5079:39;;5137:38;5171:2;5160:9;5156:18;5137:38;:::i;:::-;5127:48;;4921:260;;;;;:::o;5186:380::-;5265:1;5261:12;;;;5308;;;5329:61;;5383:4;5375:6;5371:17;5361:27;;5329:61;5436:2;5428:6;5425:14;5405:18;5402:38;5399:161;;5482:10;5477:3;5473:20;5470:1;5463:31;5517:4;5514:1;5507:15;5545:4;5542:1;5535:15;5399:161;;5186:380;;;:::o;5703:127::-;5764:10;5759:3;5755:20;5752:1;5745:31;5795:4;5792:1;5785:15;5819:4;5816:1;5809:15;5835:168;5908:9;;;5939;;5956:15;;;5950:22;;5936:37;5926:71;;5977:18;;:::i;6008:217::-;6048:1;6074;6064:132;;6118:10;6113:3;6109:20;6106:1;6099:31;6153:4;6150:1;6143:15;6181:4;6178:1;6171:15;6064:132;-1:-1:-1;6210:9:20;;6008:217::o;6230:128::-;6297:9;;;6318:11;;;6315:37;;;6332:18;;:::i;8729:125::-;8794:9;;;8815:10;;;8812:36;;;8828:18;;:::i;9756:127::-;9817:10;9812:3;9808:20;9805:1;9798:31;9848:4;9845:1;9838:15;9872:4;9869:1;9862:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1017200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24758",
								"balanceOf(address)": "2626",
								"decimals()": "288",
								"eip712Domain()": "infinite",
								"name()": "infinite",
								"nonces(address)": "2591",
								"owner()": "2389",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "infinite",
								"sendToken()": "infinite",
								"setTokenPrice(uint256)": "24553",
								"symbol()": "infinite",
								"tokenPrice()": "2339",
								"totalSupply()": "2348",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28443",
								"withdraw()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "160"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "CALLVALUE",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 444,
									"end": 866,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 444,
									"end": 866,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 444,
									"end": 866,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 444,
									"end": 866,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 536,
									"end": 546,
									"name": "CALLER",
									"source": 19
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4353445"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1577,
									"end": 1629,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1616,
									"end": 1620,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "POP",
									"source": 15
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4353445"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4353445"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1601,
									"end": 1714,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1675,
									"end": 1680,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1667,
									"end": 1672,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "9"
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "10"
								},
								{
									"begin": 1667,
									"end": 1680,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "tag",
									"source": 4,
									"value": "9"
								},
								{
									"begin": 1667,
									"end": 1680,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1690,
									"end": 1697,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 1690,
									"end": 1707,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "11"
								},
								{
									"begin": 1700,
									"end": 1707,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1690,
									"end": 1697,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1690,
									"end": 1707,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "10"
								},
								{
									"begin": 1690,
									"end": 1707,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1690,
									"end": 1707,
									"name": "tag",
									"source": 4,
									"value": "11"
								},
								{
									"begin": 1690,
									"end": 1707,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "13"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "DUP4",
									"source": 15
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 15,
									"value": "5"
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "14"
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 15,
									"value": "13"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 15,
									"value": "120"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "15"
								},
								{
									"begin": 3467,
									"end": 3474,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3501,
									"end": 3517,
									"name": "PUSH",
									"source": 15,
									"value": "6"
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "14"
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 15,
									"value": "15"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 15,
									"value": "140"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP5",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 15
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 15,
									"value": "E0"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 15
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 15,
									"value": "100"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 15
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 15,
									"value": "A0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "16"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "PUSH",
									"source": 15,
									"value": "E0"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "PUSH",
									"source": 15,
									"value": "100"
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 15,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 4983,
									"end": 5008,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5024,
									"end": 5042,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5024,
									"end": 5042,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5024,
									"end": 5042,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5017,
									"end": 5051,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 5017,
									"end": 5051,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5017,
									"end": 5051,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 5017,
									"end": 5051,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5067,
									"end": 5085,
									"name": "PUSH",
									"source": 20,
									"value": "60"
								},
								{
									"begin": 5067,
									"end": 5085,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5067,
									"end": 5085,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5060,
									"end": 5094,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4255,
									"end": 4268,
									"name": "CHAINID",
									"source": 15
								},
								{
									"begin": 5110,
									"end": 5128,
									"name": "PUSH",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 5110,
									"end": 5128,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5110,
									"end": 5128,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5103,
									"end": 5137,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 5153,
									"end": 5172,
									"name": "PUSH",
									"source": 20,
									"value": "A0"
								},
								{
									"begin": 5153,
									"end": 5172,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5153,
									"end": 5172,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5146,
									"end": 5207,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4955,
									"end": 4974,
									"name": "PUSH",
									"source": 20,
									"value": "C0"
								},
								{
									"begin": 4955,
									"end": 4974,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP4",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 15
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "POP",
									"source": 15
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "tag",
									"source": 15,
									"value": "16"
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "PUSH",
									"source": 15,
									"value": "80"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3747,
									"end": 3751,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 15,
									"value": "C0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 2801,
									"end": 2852,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 2774,
									"end": 2792,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 2774,
									"end": 2792,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1828,
									"name": "PUSH",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 630,
									"end": 652,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "29"
								},
								{
									"begin": 2780,
									"end": 2782,
									"name": "PUSH",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 630,
									"end": 632,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "A"
								},
								{
									"begin": 630,
									"end": 652,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 630,
									"end": 652,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 630,
									"end": 652,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "29"
								},
								{
									"begin": 630,
									"end": 652,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 618,
									"end": 652,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "31"
								},
								{
									"begin": 618,
									"end": 652,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 618,
									"end": 627,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "5F5E100"
								},
								{
									"begin": 618,
									"end": 652,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 618,
									"end": 652,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 618,
									"end": 652,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "31"
								},
								{
									"begin": 618,
									"end": 652,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 599,
									"end": 615,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 599,
									"end": 652,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 704,
									"end": 705,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 691,
									"end": 701,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "A"
								},
								{
									"begin": 691,
									"end": 705,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 2780,
									"end": 2782,
									"name": "PUSH",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 745,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "34"
								},
								{
									"begin": 745,
									"end": 767,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 751,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "FF"
								},
								{
									"begin": 751,
									"end": 767,
									"modifierDepth": 3,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 745,
									"end": 747,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "A"
								},
								{
									"begin": 745,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 745,
									"end": 767,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 745,
									"end": 767,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "34"
								},
								{
									"begin": 745,
									"end": 767,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 736,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "35"
								},
								{
									"begin": 736,
									"end": 767,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 736,
									"end": 742,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "186A0"
								},
								{
									"begin": 736,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 736,
									"end": 767,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 736,
									"end": 767,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "35"
								},
								{
									"begin": 736,
									"end": 767,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 716,
									"end": 732,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 716,
									"end": 732,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "SLOAD",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "36"
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "37"
								},
								{
									"begin": 716,
									"end": 767,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "36"
								},
								{
									"begin": 716,
									"end": 767,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 716,
									"end": 767,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 778,
									"end": 828,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "38"
								},
								{
									"begin": 778,
									"end": 828,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 784,
									"end": 794,
									"modifierDepth": 3,
									"name": "CALLER",
									"source": 19
								},
								{
									"begin": 805,
									"end": 827,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 2780,
									"end": 2782,
									"name": "PUSH",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 805,
									"end": 807,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "A"
								},
								{
									"begin": 805,
									"end": 827,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 805,
									"end": 827,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 805,
									"end": 827,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 805,
									"end": 827,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 796,
									"end": 827,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "41"
								},
								{
									"begin": 796,
									"end": 827,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 796,
									"end": 802,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "186A0"
								},
								{
									"begin": 796,
									"end": 827,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 796,
									"end": 827,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 796,
									"end": 827,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "41"
								},
								{
									"begin": 796,
									"end": 827,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 778,
									"end": 783,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "42"
								},
								{
									"begin": 778,
									"end": 828,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 778,
									"end": 828,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "38"
								},
								{
									"begin": 778,
									"end": 828,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "89"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 2887,
									"end": 3227,
									"name": "tag",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 2887,
									"end": 3227,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2983,
									"end": 2994,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3032,
									"end": 3034,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3016,
									"end": 3021,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3010,
									"end": 3029,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3010,
									"end": 3034,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "45"
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 3057,
									"end": 3077,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "46"
								},
								{
									"begin": 3071,
									"end": 3076,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3057,
									"end": 3070,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "47"
								},
								{
									"begin": 3057,
									"end": 3077,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3057,
									"end": 3077,
									"name": "tag",
									"source": 11,
									"value": "46"
								},
								{
									"begin": 3057,
									"end": 3077,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3050,
									"end": 3077,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3050,
									"end": 3077,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3050,
									"end": 3077,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "48"
								},
								{
									"begin": 3050,
									"end": 3077,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "tag",
									"source": 11,
									"value": "45"
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3134,
									"end": 3139,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3108,
									"end": 3154,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "51"
								},
								{
									"begin": 3149,
									"end": 3154,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 3134,
									"end": 3139,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3108,
									"end": 3154,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 3108,
									"end": 3154,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3108,
									"end": 3154,
									"name": "tag",
									"source": 11,
									"value": "51"
								},
								{
									"begin": 3108,
									"end": 3154,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "tag",
									"source": 11,
									"value": "48"
								},
								{
									"begin": 3006,
									"end": 3221,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2887,
									"end": 3227,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 2887,
									"end": 3227,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2887,
									"end": 3227,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2887,
									"end": 3227,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2887,
									"end": 3227,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7458,
									"end": 7666,
									"name": "tag",
									"source": 4,
									"value": "42"
								},
								{
									"begin": 7458,
									"end": 7666,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7528,
									"end": 7549,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 7528,
									"end": 7549,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 7524,
									"end": 7615,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "58"
								},
								{
									"begin": 7524,
									"end": 7615,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EC442F05"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 7601,
									"end": 7602,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 2801,
									"end": 2852,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 2774,
									"end": 2792,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 2774,
									"end": 2792,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 7572,
									"end": 7604,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "21"
								},
								{
									"begin": 2655,
									"end": 2858,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 7524,
									"end": 7615,
									"name": "tag",
									"source": 4,
									"value": "58"
								},
								{
									"begin": 7524,
									"end": 7615,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 7624,
									"end": 7659,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "60"
								},
								{
									"begin": 7640,
									"end": 7641,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 7644,
									"end": 7651,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 7653,
									"end": 7658,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 7624,
									"end": 7631,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "61"
								},
								{
									"begin": 7624,
									"end": 7659,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 7624,
									"end": 7659,
									"name": "tag",
									"source": 4,
									"value": "60"
								},
								{
									"begin": 7624,
									"end": 7659,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 7458,
									"end": 7666,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 7458,
									"end": 7666,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 7458,
									"end": 7666,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "tag",
									"source": 11,
									"value": "47"
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1773,
									"end": 1784,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1796,
									"end": 1813,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1822,
									"end": 1825,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 1840,
									"end": 1844,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1840,
									"end": 1851,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "63"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1893,
									"end": 1896,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "305A27A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "65"
								},
								{
									"begin": 1879,
									"end": 1897,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 11,
									"value": "63"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "66"
								},
								{
									"begin": 1974,
									"end": 1978,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "67"
								},
								{
									"begin": 1957,
									"end": 1970,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "tag",
									"source": 11,
									"value": "66"
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 1994,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6008,
									"end": 7115,
									"name": "tag",
									"source": 4,
									"value": "61"
								},
								{
									"begin": 6008,
									"end": 7115,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6097,
									"end": 6115,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 6097,
									"end": 6115,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "70"
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 6249,
									"end": 6254,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6245,
									"name": "PUSH",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 6233,
									"end": 6245,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "71"
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "72"
								},
								{
									"begin": 6233,
									"end": 6254,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "tag",
									"source": 4,
									"value": "71"
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6233,
									"end": 6254,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "tag",
									"source": 4,
									"value": "70"
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6285,
									"end": 6304,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 6307,
									"end": 6322,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 6340,
									"end": 6359,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6340,
									"end": 6359,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6340,
									"end": 6359,
									"name": "LT",
									"source": 4
								},
								{
									"begin": 6336,
									"end": 6451,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 6336,
									"end": 6451,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "74"
								},
								{
									"begin": 6336,
									"end": 6451,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "391434E3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6293,
									"end": 6325,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 6293,
									"end": 6325,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 6275,
									"end": 6326,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6342,
									"end": 6360,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 6342,
									"end": 6360,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 6342,
									"end": 6360,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6335,
									"end": 6369,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 6335,
									"end": 6369,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6335,
									"end": 6369,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6385,
									"end": 6403,
									"name": "PUSH",
									"source": 20,
									"value": "44"
								},
								{
									"begin": 6385,
									"end": 6403,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 6385,
									"end": 6403,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6378,
									"end": 6412,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 6378,
									"end": 6412,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6378,
									"end": 6412,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6248,
									"end": 6266,
									"name": "PUSH",
									"source": 20,
									"value": "64"
								},
								{
									"begin": 6248,
									"end": 6266,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6386,
									"end": 6436,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "21"
								},
								{
									"begin": 6073,
									"end": 6418,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 6336,
									"end": 6451,
									"name": "tag",
									"source": 4,
									"value": "74"
								},
								{
									"begin": 6336,
									"end": 6451,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6580,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6586,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 6589,
									"end": 6608,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6589,
									"end": 6608,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6589,
									"end": 6608,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6589,
									"end": 6608,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6608,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6571,
									"end": 6608,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "tag",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 6093,
									"end": 6633,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6647,
									"end": 6663,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6647,
									"end": 6663,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "77"
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6822,
									"name": "PUSH",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6810,
									"end": 6831,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "78"
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "tag",
									"source": 4,
									"value": "77"
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7030,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7034,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7043,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7043,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7043,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7043,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7043,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 7021,
									"end": 7043,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "tag",
									"source": 4,
									"value": "78"
								},
								{
									"begin": 6643,
									"end": 7068,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 7098,
									"end": 7100,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 7092,
									"end": 7096,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "PUSH",
									"source": 4,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 7102,
									"end": 7107,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "79"
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6569,
									"end": 6594,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 6569,
									"end": 6594,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6557,
									"end": 6559,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 6542,
									"end": 6560,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6542,
									"end": 6560,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6423,
									"end": 6600,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "tag",
									"source": 4,
									"value": "79"
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 7083,
									"end": 7108,
									"name": "LOG3",
									"source": 4
								},
								{
									"begin": 6008,
									"end": 7115,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6008,
									"end": 7115,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6008,
									"end": 7115,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 6008,
									"end": 7115,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 20,
									"value": "81"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 20,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 146,
									"end": 526,
									"name": "tag",
									"source": 20,
									"value": "82"
								},
								{
									"begin": 146,
									"end": 526,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 225,
									"end": 226,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 268,
									"end": 280,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 289,
									"end": 350,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "92"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 343,
									"end": 347,
									"name": "PUSH",
									"source": 20,
									"value": "7F"
								},
								{
									"begin": 335,
									"end": 341,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 331,
									"end": 348,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 321,
									"end": 348,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 321,
									"end": 348,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 289,
									"end": 350,
									"name": "tag",
									"source": 20,
									"value": "92"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 396,
									"end": 398,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 388,
									"end": 394,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 385,
									"end": 399,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 365,
									"end": 383,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 362,
									"end": 400,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 359,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "93"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 442,
									"end": 452,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 437,
									"end": 440,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 433,
									"end": 453,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 430,
									"end": 431,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 423,
									"end": 454,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 477,
									"end": 481,
									"name": "PUSH",
									"source": 20,
									"value": "22"
								},
								{
									"begin": 474,
									"end": 475,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 482,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 505,
									"end": 509,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 502,
									"end": 503,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 495,
									"end": 510,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 359,
									"end": 520,
									"name": "tag",
									"source": 20,
									"value": "93"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 359,
									"end": 520,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 146,
									"end": 526,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 146,
									"end": 526,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "tag",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 759,
									"end": 761,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 754,
									"end": 757,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 751,
									"end": 762,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "96"
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 795,
									"end": 800,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 792,
									"end": 793,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 785,
									"end": 801,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 839,
									"end": 843,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 836,
									"end": 837,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 826,
									"end": 844,
									"name": "KECCAK256",
									"source": 20
								},
								{
									"begin": 909,
									"end": 911,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 897,
									"end": 907,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 893,
									"end": 912,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 890,
									"end": 891,
									"name": "PUSH",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 886,
									"end": 913,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 880,
									"end": 884,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 876,
									"end": 914,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 945,
									"end": 949,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 933,
									"end": 943,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 930,
									"end": 950,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 927,
									"end": 974,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 927,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "97"
								},
								{
									"begin": 927,
									"end": 974,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 968,
									"end": 972,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 927,
									"end": 974,
									"name": "tag",
									"source": 20,
									"value": "97"
								},
								{
									"begin": 927,
									"end": 974,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1023,
									"end": 1025,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 1018,
									"end": 1021,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1014,
									"end": 1026,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1011,
									"end": 1012,
									"name": "PUSH",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 1007,
									"end": 1027,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 1001,
									"end": 1005,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 997,
									"end": 1028,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 987,
									"end": 1028,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 987,
									"end": 1028,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "tag",
									"source": 20,
									"value": "98"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1096,
									"end": 1098,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1089,
									"end": 1094,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1086,
									"end": 1099,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "100"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1155,
									"end": 1156,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 1122,
									"end": 1123,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 1111,
									"end": 1124,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "98"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "tag",
									"source": 20,
									"value": "100"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1082,
									"end": 1085,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1082,
									"end": 1085,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "tag",
									"source": 20,
									"value": "96"
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 657,
									"end": 1175,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1351,
									"end": 2650,
									"name": "tag",
									"source": 20,
									"value": "10"
								},
								{
									"begin": 1351,
									"end": 2650,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1471,
									"end": 1481,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1471,
									"end": 1481,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1493,
									"end": 1523,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1493,
									"end": 1523,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 1490,
									"end": 1546,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1490,
									"end": 1546,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "104"
								},
								{
									"begin": 1490,
									"end": 1546,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "104"
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "81"
								},
								{
									"begin": 1526,
									"end": 1544,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "tag",
									"source": 20,
									"value": "104"
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "105"
								},
								{
									"begin": 1645,
									"end": 1651,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "106"
								},
								{
									"begin": 1637,
									"end": 1641,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1631,
									"end": 1642,
									"name": "SLOAD",
									"source": 20
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "82"
								},
								{
									"begin": 1605,
									"end": 1643,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "tag",
									"source": 20,
									"value": "106"
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1599,
									"end": 1603,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 1555,
									"end": 1652,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "tag",
									"source": 20,
									"value": "105"
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1701,
									"end": 1705,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1732,
									"end": 1734,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 1721,
									"end": 1735,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1721,
									"end": 1735,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 1749,
									"end": 1750,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 1744,
									"end": 2393,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1744,
									"end": 2393,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 1744,
									"end": 2393,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "108"
								},
								{
									"begin": 1744,
									"end": 2393,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2437,
									"end": 2438,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2454,
									"end": 2460,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 2451,
									"end": 2540,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2451,
									"end": 2540,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "109"
								},
								{
									"begin": 2451,
									"end": 2540,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2506,
									"end": 2525,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2506,
									"end": 2525,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2506,
									"end": 2525,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2500,
									"end": 2526,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 2451,
									"end": 2540,
									"name": "tag",
									"source": 20,
									"value": "109"
								},
								{
									"begin": 2451,
									"end": 2540,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1308,
									"end": 1309,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 1304,
									"end": 1315,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1304,
									"end": 1315,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1304,
									"end": 1315,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 1300,
									"end": 1324,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 1296,
									"end": 1325,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 1286,
									"end": 1326,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 1332,
									"end": 1333,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 1328,
									"end": 1339,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1328,
									"end": 1339,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1328,
									"end": 1339,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 1283,
									"end": 1340,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 2553,
									"end": 2634,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2553,
									"end": 2634,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 1714,
									"end": 2644,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "100"
								},
								{
									"begin": 1714,
									"end": 2644,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1744,
									"end": 2393,
									"name": "tag",
									"source": 20,
									"value": "108"
								},
								{
									"begin": 1744,
									"end": 2393,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 604,
									"end": 605,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 597,
									"end": 611,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 641,
									"end": 645,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 646,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 628,
									"end": 646,
									"name": "KECCAK256",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1780,
									"end": 1800,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1780,
									"end": 1800,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 1780,
									"end": 1800,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "tag",
									"source": 20,
									"value": "112"
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1912,
									"end": 1919,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1909,
									"end": 1910,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1906,
									"end": 1920,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "114"
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "DUP8",
									"source": 20
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1988,
									"end": 2014,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 1973,
									"end": 2015,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1973,
									"end": 2015,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 2101,
									"end": 2105,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 2086,
									"end": 2106,
									"name": "SWAP5",
									"source": 20
								},
								{
									"begin": 2086,
									"end": 2106,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 2086,
									"end": 2106,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2086,
									"end": 2106,
									"name": "SWAP5",
									"source": 20
								},
								{
									"begin": 2054,
									"end": 2055,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2042,
									"end": 2056,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2042,
									"end": 2056,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 2042,
									"end": 2056,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2042,
									"end": 2056,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1928,
									"end": 1940,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "112"
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "tag",
									"source": 20,
									"value": "114"
								},
								{
									"begin": 1898,
									"end": 2120,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1902,
									"end": 1905,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2148,
									"end": 2154,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2139,
									"end": 2146,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2136,
									"end": 2155,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 2133,
									"end": 2334,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2133,
									"end": 2334,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "115"
								},
								{
									"begin": 2133,
									"end": 2334,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2209,
									"end": 2228,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 2209,
									"end": 2228,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2209,
									"end": 2228,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2203,
									"end": 2229,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2292,
									"end": 2293,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 2288,
									"end": 2302,
									"name": "DUP8",
									"source": 20
								},
								{
									"begin": 2288,
									"end": 2302,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2288,
									"end": 2302,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2304,
									"end": 2307,
									"name": "PUSH",
									"source": 20,
									"value": "F8"
								},
								{
									"begin": 2284,
									"end": 2308,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 2280,
									"end": 2317,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 2276,
									"end": 2318,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 2261,
									"end": 2319,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 2246,
									"end": 2320,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2246,
									"end": 2320,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 2133,
									"end": 2334,
									"name": "tag",
									"source": 20,
									"value": "115"
								},
								{
									"begin": 2133,
									"end": 2334,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2380,
									"end": 2381,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2364,
									"end": 2378,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2364,
									"end": 2378,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2364,
									"end": 2378,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2360,
									"end": 2382,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2347,
									"end": 2383,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2347,
									"end": 2383,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1351,
									"end": 2650,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2863,
									"end": 2990,
									"name": "tag",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 2863,
									"end": 2990,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2924,
									"end": 2934,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 2919,
									"end": 2922,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 2915,
									"end": 2935,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2912,
									"end": 2913,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2905,
									"end": 2936,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 2955,
									"end": 2959,
									"name": "PUSH",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 2952,
									"end": 2953,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 2945,
									"end": 2960,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 2979,
									"end": 2983,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 2976,
									"end": 2977,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2969,
									"end": 2984,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "tag",
									"source": 20,
									"value": "87"
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3083,
									"end": 3084,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3101,
									"end": 3106,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "tag",
									"source": 20,
									"value": "119"
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3136,
									"end": 3137,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3126,
									"end": 3134,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3123,
									"end": 3138,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "121"
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3186,
									"end": 3190,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 3181,
									"end": 3184,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 3177,
									"end": 3191,
									"name": "DIV",
									"source": 20
								},
								{
									"begin": 3171,
									"end": 3175,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3168,
									"end": 3192,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 3165,
									"end": 3215,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3165,
									"end": 3215,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "123"
								},
								{
									"begin": 3165,
									"end": 3215,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3195,
									"end": 3213,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "123"
								},
								{
									"begin": 3195,
									"end": 3213,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 3195,
									"end": 3213,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3195,
									"end": 3213,
									"name": "tag",
									"source": 20,
									"value": "123"
								},
								{
									"begin": 3195,
									"end": 3213,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3245,
									"end": 3246,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3235,
									"end": 3243,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3231,
									"end": 3247,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3228,
									"end": 3277,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3228,
									"end": 3277,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "124"
								},
								{
									"begin": 3228,
									"end": 3277,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3259,
									"end": 3275,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3259,
									"end": 3275,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3259,
									"end": 3275,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 3259,
									"end": 3275,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3228,
									"end": 3277,
									"name": "tag",
									"source": 20,
									"value": "124"
								},
								{
									"begin": 3228,
									"end": 3277,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3342,
									"end": 3343,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3338,
									"end": 3354,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3338,
									"end": 3354,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3338,
									"end": 3354,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3338,
									"end": 3354,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 3338,
									"end": 3354,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 3298,
									"end": 3313,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 3298,
									"end": 3313,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "119"
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "tag",
									"source": 20,
									"value": "121"
								},
								{
									"begin": 3115,
									"end": 3364,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2995,
									"end": 3370,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3375,
									"end": 4277,
									"name": "tag",
									"source": 20,
									"value": "88"
								},
								{
									"begin": 3375,
									"end": 4277,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3424,
									"end": 3429,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3454,
									"end": 3462,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3444,
									"end": 3524,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "126"
								},
								{
									"begin": 3444,
									"end": 3524,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3495,
									"end": 3496,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3509,
									"end": 3514,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 3509,
									"end": 3514,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3444,
									"end": 3524,
									"name": "tag",
									"source": 20,
									"value": "126"
								},
								{
									"begin": 3444,
									"end": 3524,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3543,
									"end": 3547,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3533,
									"end": 3609,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "127"
								},
								{
									"begin": 3533,
									"end": 3609,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3580,
									"end": 3581,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3594,
									"end": 3599,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 3594,
									"end": 3599,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3533,
									"end": 3609,
									"name": "tag",
									"source": 20,
									"value": "127"
								},
								{
									"begin": 3533,
									"end": 3609,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3625,
									"end": 3629,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3643,
									"end": 3644,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3638,
									"end": 3697,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3638,
									"end": 3697,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 3638,
									"end": 3697,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "129"
								},
								{
									"begin": 3638,
									"end": 3697,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3711,
									"end": 3712,
									"name": "PUSH",
									"source": 20,
									"value": "2"
								},
								{
									"begin": 3706,
									"end": 3880,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3706,
									"end": 3880,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 3706,
									"end": 3880,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "130"
								},
								{
									"begin": 3706,
									"end": 3880,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3618,
									"end": 3880,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "128"
								},
								{
									"begin": 3618,
									"end": 3880,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3638,
									"end": 3697,
									"name": "tag",
									"source": 20,
									"value": "129"
								},
								{
									"begin": 3638,
									"end": 3697,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3668,
									"end": 3669,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3659,
									"end": 3669,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 3659,
									"end": 3669,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3682,
									"end": 3687,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3682,
									"end": 3687,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 3682,
									"end": 3687,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3706,
									"end": 3880,
									"name": "tag",
									"source": 20,
									"value": "130"
								},
								{
									"begin": 3706,
									"end": 3880,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3743,
									"end": 3746,
									"name": "PUSH",
									"source": 20,
									"value": "FF"
								},
								{
									"begin": 3733,
									"end": 3741,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3730,
									"end": 3747,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 3727,
									"end": 3770,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3727,
									"end": 3770,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "132"
								},
								{
									"begin": 3727,
									"end": 3770,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3750,
									"end": 3768,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "132"
								},
								{
									"begin": 3750,
									"end": 3768,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 3750,
									"end": 3768,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3750,
									"end": 3768,
									"name": "tag",
									"source": 20,
									"value": "132"
								},
								{
									"begin": 3750,
									"end": 3768,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3806,
									"end": 3807,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3792,
									"end": 3808,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3792,
									"end": 3808,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 3865,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 3865,
									"end": 3870,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3618,
									"end": 3880,
									"name": "tag",
									"source": 20,
									"value": "128"
								},
								{
									"begin": 3618,
									"end": 3880,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3618,
									"end": 3880,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3964,
									"end": 3966,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 3954,
									"end": 3962,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 3951,
									"end": 3967,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 3945,
									"end": 3948,
									"name": "PUSH",
									"source": 20,
									"value": "133"
								},
								{
									"begin": 3939,
									"end": 3943,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 3936,
									"end": 3949,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 3932,
									"end": 3968,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3926,
									"end": 3928,
									"name": "PUSH",
									"source": 20,
									"value": "4E"
								},
								{
									"begin": 3916,
									"end": 3924,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3913,
									"end": 3929,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 3908,
									"end": 3910,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 3902,
									"end": 3906,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3899,
									"end": 3911,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 3895,
									"end": 3930,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3892,
									"end": 3969,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 3889,
									"end": 4092,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3889,
									"end": 4092,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "133"
								},
								{
									"begin": 3889,
									"end": 4092,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4001,
									"end": 4020,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4001,
									"end": 4020,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4001,
									"end": 4020,
									"name": "EXP",
									"source": 20
								},
								{
									"begin": 4077,
									"end": 4082,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 4077,
									"end": 4082,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3889,
									"end": 4092,
									"name": "tag",
									"source": 20,
									"value": "133"
								},
								{
									"begin": 3889,
									"end": 4092,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4124,
									"end": 4166,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "134"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4149,
									"end": 4157,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4143,
									"end": 4147,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4124,
									"end": 4166,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "87"
								},
								{
									"begin": 4124,
									"end": 4166,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4124,
									"end": 4166,
									"name": "tag",
									"source": 20,
									"value": "134"
								},
								{
									"begin": 4124,
									"end": 4166,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4202,
									"end": 4208,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4198,
									"end": 4199,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 4194,
									"end": 4200,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 4190,
									"end": 4209,
									"name": "DIV",
									"source": 20
								},
								{
									"begin": 4181,
									"end": 4188,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4178,
									"end": 4210,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 4175,
									"end": 4233,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4175,
									"end": 4233,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "136"
								},
								{
									"begin": 4175,
									"end": 4233,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4213,
									"end": 4231,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "136"
								},
								{
									"begin": 4213,
									"end": 4231,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 4213,
									"end": 4231,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4213,
									"end": 4231,
									"name": "tag",
									"source": 20,
									"value": "136"
								},
								{
									"begin": 4213,
									"end": 4231,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4251,
									"end": 4271,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 4251,
									"end": 4271,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3375,
									"end": 4277,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3375,
									"end": 4277,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4282,
									"end": 4413,
									"name": "tag",
									"source": 20,
									"value": "30"
								},
								{
									"begin": 4282,
									"end": 4413,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4342,
									"end": 4347,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 4371,
									"end": 4407,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "138"
								},
								{
									"begin": 4398,
									"end": 4406,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 4392,
									"end": 4396,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 4371,
									"end": 4407,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "88"
								},
								{
									"begin": 4371,
									"end": 4407,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4371,
									"end": 4407,
									"name": "tag",
									"source": 20,
									"value": "138"
								},
								{
									"begin": 4371,
									"end": 4407,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4362,
									"end": 4407,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 4282,
									"end": 4413,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4282,
									"end": 4413,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4418,
									"end": 4586,
									"name": "tag",
									"source": 20,
									"value": "32"
								},
								{
									"begin": 4418,
									"end": 4586,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4491,
									"end": 4500,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4491,
									"end": 4500,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4491,
									"end": 4500,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 4522,
									"end": 4531,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4522,
									"end": 4531,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4539,
									"end": 4554,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4539,
									"end": 4554,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4539,
									"end": 4554,
									"name": "DIV",
									"source": 20
								},
								{
									"begin": 4533,
									"end": 4555,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4533,
									"end": 4555,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 4519,
									"end": 4556,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 4509,
									"end": 4580,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 4509,
									"end": 4580,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4560,
									"end": 4578,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 4560,
									"end": 4578,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 4560,
									"end": 4578,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4591,
									"end": 4719,
									"name": "tag",
									"source": 20,
									"value": "37"
								},
								{
									"begin": 4591,
									"end": 4719,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4658,
									"end": 4667,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4658,
									"end": 4667,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4658,
									"end": 4667,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 4679,
									"end": 4690,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4679,
									"end": 4690,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4679,
									"end": 4690,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 4676,
									"end": 4713,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4676,
									"end": 4713,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 4676,
									"end": 4713,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4693,
									"end": 4711,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 4693,
									"end": 4711,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 4693,
									"end": 4711,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 5218,
									"end": 5636,
									"name": "tag",
									"source": 20,
									"value": "65"
								},
								{
									"begin": 5218,
									"end": 5636,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 5367,
									"end": 5369,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5356,
									"end": 5365,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5349,
									"end": 5370,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5330,
									"end": 5334,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 5399,
									"end": 5405,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5393,
									"end": 5406,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5442,
									"end": 5448,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5437,
									"end": 5439,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5426,
									"end": 5435,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 5422,
									"end": 5440,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5415,
									"end": 5449,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5501,
									"end": 5507,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5496,
									"end": 5498,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5488,
									"end": 5494,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 5484,
									"end": 5499,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5479,
									"end": 5481,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 5468,
									"end": 5477,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 5464,
									"end": 5482,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5458,
									"end": 5508,
									"name": "MCOPY",
									"source": 20
								},
								{
									"begin": 5557,
									"end": 5558,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 5552,
									"end": 5554,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 5543,
									"end": 5549,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5532,
									"end": 5541,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 5528,
									"end": 5550,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5524,
									"end": 5555,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5517,
									"end": 5559,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5627,
									"end": 5629,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 5620,
									"end": 5622,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 5616,
									"end": 5623,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 5611,
									"end": 5613,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 5603,
									"end": 5609,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 5599,
									"end": 5614,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5595,
									"end": 5624,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 5584,
									"end": 5593,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 5580,
									"end": 5625,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5576,
									"end": 5630,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5568,
									"end": 5630,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5568,
									"end": 5630,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5568,
									"end": 5630,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5218,
									"end": 5636,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 5218,
									"end": 5636,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5218,
									"end": 5636,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5218,
									"end": 5636,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5218,
									"end": 5636,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 5641,
									"end": 5938,
									"name": "tag",
									"source": 20,
									"value": "67"
								},
								{
									"begin": 5641,
									"end": 5938,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 5759,
									"end": 5771,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5759,
									"end": 5771,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5806,
									"end": 5810,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5795,
									"end": 5811,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5795,
									"end": 5811,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 5795,
									"end": 5811,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5789,
									"end": 5812,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5789,
									"end": 5812,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5759,
									"end": 5771,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5824,
									"end": 5840,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5824,
									"end": 5840,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 5821,
									"end": 5932,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 5821,
									"end": 5932,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "93"
								},
								{
									"begin": 5821,
									"end": 5932,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 5898,
									"end": 5902,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5894,
									"end": 5911,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5894,
									"end": 5911,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5894,
									"end": 5911,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5894,
									"end": 5911,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 5891,
									"end": 5892,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 5887,
									"end": 5912,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 5883,
									"end": 5921,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 5872,
									"end": 5922,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 5872,
									"end": 5922,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5641,
									"end": 5938,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5641,
									"end": 5938,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 5943,
									"end": 6068,
									"name": "tag",
									"source": 20,
									"value": "72"
								},
								{
									"begin": 5943,
									"end": 6068,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 6008,
									"end": 6017,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 6008,
									"end": 6017,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 6008,
									"end": 6017,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6029,
									"end": 6039,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 6029,
									"end": 6039,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 6029,
									"end": 6039,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 6026,
									"end": 6062,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 6026,
									"end": 6062,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 6026,
									"end": 6062,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 6042,
									"end": 6060,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 6042,
									"end": 6060,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "86"
								},
								{
									"begin": 6042,
									"end": 6060,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 6423,
									"end": 6600,
									"name": "tag",
									"source": 20,
									"value": "89"
								},
								{
									"begin": 6423,
									"end": 6600,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "80"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "A0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "C0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "100"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "120"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "140"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2260"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2257"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2254"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2252"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2250"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2248"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2246"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 255,
									"end": 2107,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220678aee7add9ecb4350a1169000e7aebf707f333b394c738f5c660ca74e77e7e964736f6c634300081a0033",
									".code": [
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "7ECEBE00"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "A9059CBB"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "A9059CBB"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "17"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "B8972DB5"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "D505ACCF"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "19"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "DD62ED3E"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "F2FDE38B"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "tag",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "7ECEBE00"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "7FF9B596"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "84B0196E"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "14"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "8DA5CB5B"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "15"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "95D89B41"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "16"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "tag",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "3644E515"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "3644E515"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "3CCFD60B"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "6A61E5FC"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "70A08231"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "715018A6"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "tag",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "6FDDE03"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "95EA7B3"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "18160DDD"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "23B872DD"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "313CE567"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "6"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "tag",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 255,
											"end": 2107,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 1779,
											"end": 1868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 1779,
											"end": 1868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "tag",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3998,
											"end": 4184,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 3998,
											"end": 4184,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "tag",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1181,
											"end": 1195,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1181,
											"end": 1195,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1174,
											"end": 1196,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1156,
											"end": 1197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1156,
											"end": 1197,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1144,
											"end": 1146,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1129,
											"end": 1147,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1016,
											"end": 1203,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "tag",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2927,
											"end": 2939,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 2927,
											"end": 2939,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2849,
											"end": 2946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "tag",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 4776,
											"end": 5020,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "tag",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 4776,
											"end": 5020,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2780,
											"end": 2782,
											"name": "PUSH",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 1911,
											"end": 1947,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1911,
											"end": 1947,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1899,
											"end": 1901,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1884,
											"end": 1902,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2707,
											"end": 2789,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1769,
											"end": 1953,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "tag",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 2659,
											"end": 2771,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "tag",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "58"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "tag",
											"source": 19,
											"value": "58"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "59"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 1511,
											"end": 1664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "tag",
											"source": 19,
											"value": "59"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "STOP",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "tag",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "61"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "tag",
											"source": 19,
											"value": "61"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "59"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "63"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 1672,
											"end": 1796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "tag",
											"source": 19,
											"value": "63"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 1672,
											"end": 1796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 3004,
											"end": 3120,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3069,
											"end": 3076,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3120,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 2409,
											"end": 2552,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "tag",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 2409,
											"end": 2552,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 324,
											"end": 349,
											"name": "tag",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 324,
											"end": 349,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 324,
											"end": 349,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 324,
											"end": 349,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "tag",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 324,
											"end": 349,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "38"
										},
										{
											"begin": 324,
											"end": 349,
											"name": "PUSH",
											"source": 19,
											"value": "A"
										},
										{
											"begin": 324,
											"end": 349,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 324,
											"end": 349,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "14"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "CALLVALUE",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "84"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "84"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "85"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "86"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "85"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "28"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP8",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP7",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "88"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3939,
											"end": 3941,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 1981,
											"end": 2074,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "tag",
											"source": 19,
											"value": "17"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "98"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "tag",
											"source": 19,
											"value": "98"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "31"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "100"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "33"
										},
										{
											"begin": 1809,
											"end": 2104,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "tag",
											"source": 19,
											"value": "100"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "101"
										},
										{
											"begin": 1809,
											"end": 2104,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "tag",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "38"
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 950,
											"end": 1503,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 1683,
											"end": 2355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 1683,
											"end": 2355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "tag",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 3551,
											"end": 3691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3631,
											"end": 3638,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3668,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3691,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "tag",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1824,
											"end": 1837,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1856,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 1849,
											"end": 1861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 1849,
											"end": 1861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "tag",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1849,
											"end": 1861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1779,
											"end": 1868,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "tag",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4071,
											"end": 4075,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4125,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4141,
											"end": 4148,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4150,
											"end": 4155,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4125,
											"end": 4133,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 4125,
											"end": 4156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4125,
											"end": 4156,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 4125,
											"end": 4156,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4173,
											"end": 4177,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4166,
											"end": 4177,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4177,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4166,
											"end": 4177,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3998,
											"end": 4184,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "tag",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4863,
											"end": 4867,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4919,
											"end": 4956,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 4935,
											"end": 4939,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4950,
											"end": 4955,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4919,
											"end": 4934,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 4919,
											"end": 4956,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4919,
											"end": 4956,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 4919,
											"end": 4956,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4966,
											"end": 4992,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 4976,
											"end": 4980,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4982,
											"end": 4984,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4986,
											"end": 4991,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4966,
											"end": 4975,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 4966,
											"end": 4992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4966,
											"end": 4992,
											"name": "tag",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 4966,
											"end": 4992,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5009,
											"end": 5013,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5009,
											"end": 5013,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 4776,
											"end": 5020,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4776,
											"end": 5020,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2718,
											"end": 2725,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2744,
											"end": 2764,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 2744,
											"end": 2764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2744,
											"end": 2764,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 2744,
											"end": 2764,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2764,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2764,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2659,
											"end": 2771,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "tag",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 1511,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 2261,
											"end": 2282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1531,
											"end": 1544,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1531,
											"end": 1542,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 1531,
											"end": 1544,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1598,
											"end": 1619,
											"modifierDepth": 2,
											"name": "SELFBALANCE",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 19,
											"value": "8FC"
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1598,
											"end": 1619,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "CALL",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "153"
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1572,
											"end": 1620,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "tag",
											"source": 19,
											"value": "153"
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1572,
											"end": 1620,
											"modifierDepth": 2,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2816,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "tag",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1511,
											"end": 1664,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "tag",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 1672,
											"end": 1796,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1741,
											"end": 1751,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "A"
										},
										{
											"begin": 1741,
											"end": 1762,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": 1672,
											"end": 1796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 2409,
											"end": 2552,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2500,
											"end": 2507,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2526,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "86"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5242,
											"end": 5255,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5269,
											"end": 5287,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 5301,
											"end": 5322,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5336,
											"end": 5351,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5365,
											"end": 5390,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5404,
											"end": 5416,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5430,
											"end": 5457,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "169"
										},
										{
											"begin": 5533,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "170"
										},
										{
											"begin": 5533,
											"end": 5546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "tag",
											"source": 15,
											"value": "169"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "171"
										},
										{
											"begin": 5560,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "172"
										},
										{
											"begin": 5560,
											"end": 5576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "tag",
											"source": 15,
											"value": "171"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP12",
											"source": 15
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP11",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP9",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 15
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "SWAP8",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "SWAP7",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "tag",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 1981,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2028,
											"end": 2041,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2060,
											"end": 2067,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2053,
											"end": 2067,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2053,
											"end": 2067,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2053,
											"end": 2067,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 2053,
											"end": 2067,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2053,
											"end": 2067,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 2053,
											"end": 2067,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "tag",
											"source": 19,
											"value": "101"
										},
										{
											"begin": 1809,
											"end": 2104,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1892,
											"end": 1896,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 2261,
											"end": 2282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1909,
											"end": 1927,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1942,
											"end": 1948,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "186A0"
										},
										{
											"begin": 1930,
											"end": 1939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "187"
										},
										{
											"begin": 1930,
											"end": 1935,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1938,
											"end": 1939,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 1930,
											"end": 1939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "188"
										},
										{
											"begin": 1930,
											"end": 1939,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1930,
											"end": 1939,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "187"
										},
										{
											"begin": 1930,
											"end": 1939,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1930,
											"end": 1948,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 1930,
											"end": 1948,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1930,
											"end": 1948,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1930,
											"end": 1948,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "190"
										},
										{
											"begin": 1930,
											"end": 1948,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1930,
											"end": 1948,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 1930,
											"end": 1948,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1909,
											"end": 1948,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1909,
											"end": 1948,
											"modifierDepth": 1,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1970,
											"end": 1999,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 1976,
											"end": 1986,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 1988,
											"end": 1998,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1970,
											"end": 1975,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "192"
										},
										{
											"begin": 1970,
											"end": 1999,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1970,
											"end": 1999,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 1970,
											"end": 1999,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2058,
											"end": 2096,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 2073,
											"end": 2075,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2077,
											"end": 2095,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "194"
										},
										{
											"begin": 2085,
											"end": 2095,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2077,
											"end": 2082,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 2077,
											"end": 2095,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 2077,
											"end": 2095,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2077,
											"end": 2095,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "194"
										},
										{
											"begin": 2077,
											"end": 2095,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2058,
											"end": 2072,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 2058,
											"end": 2096,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2058,
											"end": 2096,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 2058,
											"end": 2096,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2051,
											"end": 2096,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2051,
											"end": 2096,
											"modifierDepth": 1,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2051,
											"end": 2096,
											"modifierDepth": 1,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2303,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2816,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2629,
											"end": 2838,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "tag",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1010,
											"end": 1017,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 2261,
											"end": 2280,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 2261,
											"end": 2282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "tag",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 2261,
											"end": 2282,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1051,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1038,
											"end": 1047,
											"modifierDepth": 1,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 1038,
											"end": 1051,
											"modifierDepth": 1,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "201"
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1030,
											"end": 1089,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1030,
											"end": 1089,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6565,
											"end": 6567,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1030,
											"end": 1089,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6547,
											"end": 6568,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6604,
											"end": 6606,
											"name": "PUSH",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 6584,
											"end": 6602,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6584,
											"end": 6602,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6584,
											"end": 6602,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6577,
											"end": 6607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6643,
											"end": 6677,
											"name": "PUSH",
											"source": 20,
											"value": "596F75206D7573742073656E6420457468657220746F2067657420746F6B656E"
										},
										{
											"begin": 6623,
											"end": 6641,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6623,
											"end": 6641,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6623,
											"end": 6641,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6616,
											"end": 6678,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6694,
											"end": 6712,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 6694,
											"end": 6712,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6694,
											"end": 6712,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6687,
											"end": 6718,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6735,
											"end": 6754,
											"name": "PUSH",
											"source": 20,
											"value": "84"
										},
										{
											"begin": 6735,
											"end": 6754,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "202"
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "201"
										},
										{
											"begin": 1030,
											"end": 1089,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1130,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1145,
											"end": 1155,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "A"
										},
										{
											"begin": 1145,
											"end": 1155,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1142,
											"modifierDepth": 1,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1155,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "204"
										},
										{
											"begin": 1133,
											"end": 1155,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1155,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1155,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "190"
										},
										{
											"begin": 1133,
											"end": 1155,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1155,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "204"
										},
										{
											"begin": 1133,
											"end": 1155,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1162,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "205"
										},
										{
											"begin": 1133,
											"end": 1162,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1158,
											"end": 1162,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "3E8"
										},
										{
											"begin": 1133,
											"end": 1162,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "188"
										},
										{
											"begin": 1133,
											"end": 1162,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1133,
											"end": 1162,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "205"
										},
										{
											"begin": 1133,
											"end": 1162,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1162,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1162,
											"modifierDepth": 1,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1258,
											"end": 1259,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1239,
											"end": 1255,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "B"
										},
										{
											"begin": 1239,
											"end": 1255,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 1239,
											"end": 1259,
											"modifierDepth": 1,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "206"
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1231,
											"end": 1292,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1231,
											"end": 1292,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1231,
											"end": 1292,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6967,
											"end": 6969,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1231,
											"end": 1292,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6949,
											"end": 6970,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7006,
											"end": 7008,
											"name": "PUSH",
											"source": 20,
											"value": "1C"
										},
										{
											"begin": 6986,
											"end": 7004,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6986,
											"end": 7004,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6986,
											"end": 7004,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6979,
											"end": 7009,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7045,
											"end": 7075,
											"name": "PUSH",
											"source": 20,
											"value": "4E6F206D6F726520746F6B656E732063616E206265206D696E74656400000000"
										},
										{
											"begin": 7025,
											"end": 7043,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 7025,
											"end": 7043,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7025,
											"end": 7043,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7018,
											"end": 7076,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7093,
											"end": 7111,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 7093,
											"end": 7111,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "202"
										},
										{
											"begin": 6765,
											"end": 7117,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "206"
										},
										{
											"begin": 1231,
											"end": 1292,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1373,
											"end": 1385,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1369,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "B"
										},
										{
											"begin": 1353,
											"end": 1369,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "209"
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 1353,
											"end": 1385,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "209"
										},
										{
											"begin": 1353,
											"end": 1385,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1353,
											"end": 1385,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1396,
											"end": 1427,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 1396,
											"end": 1427,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1402,
											"end": 1412,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 1414,
											"end": 1426,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1396,
											"end": 1401,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "211"
										},
										{
											"begin": 1396,
											"end": 1427,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1396,
											"end": 1427,
											"modifierDepth": 1,
											"name": "tag",
											"source": 19,
											"value": "210"
										},
										{
											"begin": 1396,
											"end": 1427,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1484,
											"end": 1494,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 3069,
											"end": 3076,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3113,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1717,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2816,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 950,
											"end": 1503,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 950,
											"end": 1503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1904,
											"end": 1912,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1886,
											"end": 1901,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 1886,
											"end": 1912,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1882,
											"end": 1979,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1882,
											"end": 1979,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 1882,
											"end": 1979,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313C8981"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1935,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1882,
											"end": 1979,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 1882,
											"end": 1979,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1989,
											"end": 2007,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1024,
											"end": 1119,
											"name": "PUSH",
											"source": 6,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2048,
											"end": 2053,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2055,
											"end": 2062,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2064,
											"end": 2069,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2087,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 2081,
											"end": 2086,
											"name": "DUP13",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 819,
											"end": 826,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2071,
											"end": 2087,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 2071,
											"end": 2087,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7409,
											"end": 7434,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 7409,
											"end": 7434,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7409,
											"end": 7434,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 7409,
											"end": 7434,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7470,
											"end": 7502,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7502,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7502,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 7450,
											"end": 7468,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7450,
											"end": 7468,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 7450,
											"end": 7468,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7443,
											"end": 7503,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7539,
											"end": 7571,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7539,
											"end": 7571,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7539,
											"end": 7571,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7539,
											"end": 7571,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 7519,
											"end": 7537,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 7519,
											"end": 7537,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 7519,
											"end": 7537,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7512,
											"end": 7572,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7588,
											"end": 7606,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 7588,
											"end": 7606,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7588,
											"end": 7606,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7581,
											"end": 7615,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7631,
											"end": 7650,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 7631,
											"end": 7650,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7631,
											"end": 7650,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7624,
											"end": 7659,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7675,
											"end": 7694,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 7675,
											"end": 7694,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7675,
											"end": 7694,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7668,
											"end": 7703,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 7668,
											"end": 7703,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7668,
											"end": 7703,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7381,
											"end": 7400,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 7381,
											"end": 7400,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2020,
											"end": 2098,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2010,
											"end": 2099,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2010,
											"end": 2099,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2010,
											"end": 2099,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2010,
											"end": 2099,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2010,
											"end": 2099,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2010,
											"end": 2099,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1989,
											"end": 2099,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1989,
											"end": 2099,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2110,
											"end": 2122,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2125,
											"end": 2153,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 2142,
											"end": 2152,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2141,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 2125,
											"end": 2153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2125,
											"end": 2153,
											"name": "tag",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 2125,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2110,
											"end": 2153,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2110,
											"end": 2153,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2164,
											"end": 2178,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2181,
											"end": 2209,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 2195,
											"end": 2199,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2201,
											"end": 2202,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2204,
											"end": 2205,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2207,
											"end": 2208,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2181,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 2181,
											"end": 2209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2181,
											"end": 2209,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 2181,
											"end": 2209,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2164,
											"end": 2209,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2164,
											"end": 2209,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2233,
											"end": 2238,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2223,
											"end": 2238,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2223,
											"end": 2229,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2223,
											"end": 2238,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2223,
											"end": 2238,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2219,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 2219,
											"end": 2307,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "25C00723"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7906,
											"end": 7938,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7906,
											"end": 7938,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 7906,
											"end": 7938,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7888,
											"end": 7939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7975,
											"end": 8007,
											"name": "DUP12",
											"source": 20
										},
										{
											"begin": 7975,
											"end": 8007,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 7955,
											"end": 7973,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 7955,
											"end": 7973,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7955,
											"end": 7973,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7948,
											"end": 8008,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7861,
											"end": 7879,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 7861,
											"end": 7879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2261,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 7714,
											"end": 8014,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2219,
											"end": 2307,
											"name": "tag",
											"source": 6,
											"value": "225"
										},
										{
											"begin": 2219,
											"end": 2307,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2317,
											"end": 2348,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 2326,
											"end": 2331,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 2333,
											"end": 2340,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 2342,
											"end": 2347,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 2317,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 2317,
											"end": 2348,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2317,
											"end": 2348,
											"name": "tag",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 2317,
											"end": 2348,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1872,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1872,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1872,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1683,
											"end": 2355,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8726,
											"end": 8854,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 8726,
											"end": 8854,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8810,
											"end": 8847,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 8819,
											"end": 8824,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8826,
											"end": 8833,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8835,
											"end": 8840,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8842,
											"end": 8846,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8810,
											"end": 8818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 8810,
											"end": 8847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8810,
											"end": 8847,
											"name": "tag",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 8810,
											"end": 8847,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8726,
											"end": 8854,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8726,
											"end": 8854,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8726,
											"end": 8854,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8726,
											"end": 8854,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10415,
											"end": 10892,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 10415,
											"end": 10892,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10514,
											"end": 10538,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3668,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3675,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3657,
											"end": 3684,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10580,
											"end": 10617,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 10576,
											"end": 10886,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 10576,
											"end": 10886,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10656,
											"end": 10661,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10637,
											"end": 10653,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10637,
											"end": 10661,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 10633,
											"end": 10763,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10633,
											"end": 10763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 10633,
											"end": 10763,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8239,
											"end": 8271,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 8239,
											"end": 8271,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8221,
											"end": 8272,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8288,
											"end": 8306,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 8288,
											"end": 8306,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8288,
											"end": 8306,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8281,
											"end": 8315,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8281,
											"end": 8315,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8281,
											"end": 8315,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8324,
											"end": 8358,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8324,
											"end": 8358,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8324,
											"end": 8358,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8194,
											"end": 8212,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 8194,
											"end": 8212,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10688,
											"end": 10748,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 8019,
											"end": 8364,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10633,
											"end": 10763,
											"name": "tag",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 10633,
											"end": 10763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10804,
											"end": 10861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 10813,
											"end": 10818,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10820,
											"end": 10827,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10848,
											"end": 10853,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10829,
											"end": 10845,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10829,
											"end": 10853,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10855,
											"end": 10860,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10804,
											"end": 10812,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 10804,
											"end": 10861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10804,
											"end": 10861,
											"name": "tag",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 10804,
											"end": 10861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10504,
											"end": 10892,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10415,
											"end": 10892,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10415,
											"end": 10892,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10415,
											"end": 10892,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10415,
											"end": 10892,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5393,
											"end": 5693,
											"name": "tag",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 5393,
											"end": 5693,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5476,
											"end": 5494,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5476,
											"end": 5494,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5472,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 5472,
											"end": 5558,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5544,
											"end": 5545,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5517,
											"end": 5547,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5472,
											"end": 5558,
											"name": "tag",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 5472,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5571,
											"end": 5587,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5571,
											"end": 5587,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5567,
											"end": 5653,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 5567,
											"end": 5653,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5639,
											"end": 5640,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5610,
											"end": 5642,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5567,
											"end": 5653,
											"name": "tag",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 5567,
											"end": 5653,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5662,
											"end": 5686,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 5670,
											"end": 5674,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5676,
											"end": 5678,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5680,
											"end": 5685,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5662,
											"end": 5669,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 5662,
											"end": 5686,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 15,
											"value": "143"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3898,
											"end": 3905,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2250"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "255"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2248"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 15
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 15,
											"value": "255"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "256"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2246"
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3845,
											"end": 4107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 15,
											"value": "256"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "142"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 15,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 9118,
											"end": 9143,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2252"
										},
										{
											"begin": 9159,
											"end": 9177,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9159,
											"end": 9177,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 9159,
											"end": 9177,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 9152,
											"end": 9186,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2254"
										},
										{
											"begin": 9202,
											"end": 9220,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 9202,
											"end": 9220,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9202,
											"end": 9220,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9195,
											"end": 9229,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 15
										},
										{
											"begin": 9245,
											"end": 9263,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 9245,
											"end": 9263,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9245,
											"end": 9263,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9238,
											"end": 9272,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 9288,
											"end": 9307,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 9288,
											"end": 9307,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9288,
											"end": 9307,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9281,
											"end": 9342,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 9090,
											"end": 9109,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 9090,
											"end": 9109,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 15
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 3,
											"value": "146"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "261"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8571,
											"end": 8573,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8553,
											"end": 8574,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8610,
											"end": 8612,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 8590,
											"end": 8608,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 8590,
											"end": 8608,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8590,
											"end": 8608,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8583,
											"end": 8613,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8649,
											"end": 8682,
											"name": "PUSH",
											"source": 20,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 8629,
											"end": 8647,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 8629,
											"end": 8647,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8629,
											"end": 8647,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8622,
											"end": 8683,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8700,
											"end": 8718,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 8700,
											"end": 8718,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 8369,
											"end": 8724,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "tag",
											"source": 3,
											"value": "261"
										},
										{
											"begin": 2460,
											"end": 2523,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2598,
											"end": 2605,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 2598,
											"end": 2616,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "tag",
											"source": 15,
											"value": "170"
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6067,
											"end": 6080,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "142"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2257"
										},
										{
											"begin": 6126,
											"end": 6139,
											"name": "PUSH",
											"source": 15,
											"value": "5"
										},
										{
											"begin": 6099,
											"end": 6125,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "275"
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "tag",
											"source": 15,
											"value": "172"
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6522,
											"end": 6535,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "142"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2260"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 15,
											"value": "6"
										},
										{
											"begin": 6554,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "275"
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 7984,
											"end": 8190,
											"name": "tag",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 7984,
											"end": 8190,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8054,
											"end": 8075,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8054,
											"end": 8075,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8050,
											"end": 8139,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "279"
										},
										{
											"begin": 8050,
											"end": 8139,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8125,
											"end": 8126,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8098,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8050,
											"end": 8139,
											"name": "tag",
											"source": 4,
											"value": "279"
										},
										{
											"begin": 8050,
											"end": 8139,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8148,
											"end": 8183,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "281"
										},
										{
											"begin": 8156,
											"end": 8163,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8173,
											"end": 8174,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8177,
											"end": 8182,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8148,
											"end": 8155,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 8148,
											"end": 8183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8148,
											"end": 8183,
											"name": "tag",
											"source": 4,
											"value": "281"
										},
										{
											"begin": 8148,
											"end": 8183,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7984,
											"end": 8190,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7984,
											"end": 8190,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7984,
											"end": 8190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3315,
											"end": 3493,
											"name": "tag",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 3315,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3384,
											"end": 3388,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3438,
											"end": 3465,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3455,
											"end": 3457,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3459,
											"end": 3464,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3438,
											"end": 3447,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 3438,
											"end": 3465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7458,
											"end": 7666,
											"name": "tag",
											"source": 4,
											"value": "211"
										},
										{
											"begin": 7458,
											"end": 7666,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7528,
											"end": 7549,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7528,
											"end": 7549,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7615,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "286"
										},
										{
											"begin": 7524,
											"end": 7615,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7601,
											"end": 7602,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7572,
											"end": 7604,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7524,
											"end": 7615,
											"name": "tag",
											"source": 4,
											"value": "286"
										},
										{
											"begin": 7524,
											"end": 7615,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7624,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "281"
										},
										{
											"begin": 7640,
											"end": 7641,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7644,
											"end": 7651,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7653,
											"end": 7658,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7624,
											"end": 7631,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 7624,
											"end": 7659,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 15,
											"value": "222"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4994,
											"end": 5001,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "128"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "292"
										},
										{
											"begin": 5053,
											"end": 5071,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "143"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 15,
											"value": "292"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5075,
											"end": 5085,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 3501,
											"end": 3505,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3495,
											"end": 3506,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3519,
											"end": 3542,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3519,
											"end": 3542,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3571,
											"end": 3575,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 3562,
											"end": 3576,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3562,
											"end": 3576,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3555,
											"end": 3594,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3555,
											"end": 3594,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3555,
											"end": 3594,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3555,
											"end": 3594,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3623,
											"end": 3627,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 3614,
											"end": 3628,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3614,
											"end": 3628,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3607,
											"end": 3641,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 3664,
											"end": 3684,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3664,
											"end": 3684,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3664,
											"end": 3684,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3326,
											"end": 3700,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6887,
											"end": 7147,
											"name": "tag",
											"source": 14,
											"value": "224"
										},
										{
											"begin": 6887,
											"end": 7147,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6972,
											"end": 6979,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6992,
											"end": 7009,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7011,
											"end": 7029,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7031,
											"end": 7047,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7051,
											"end": 7076,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "295"
										},
										{
											"begin": 7062,
											"end": 7066,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 7068,
											"end": 7069,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 7071,
											"end": 7072,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 7074,
											"end": 7075,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 7051,
											"end": 7061,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 7051,
											"end": 7076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7051,
											"end": 7076,
											"name": "tag",
											"source": 14,
											"value": "295"
										},
										{
											"begin": 7051,
											"end": 7076,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6991,
											"end": 7076,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6991,
											"end": 7076,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6991,
											"end": 7076,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6991,
											"end": 7076,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6991,
											"end": 7076,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6991,
											"end": 7076,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7086,
											"end": 7114,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 7098,
											"end": 7103,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7105,
											"end": 7113,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7086,
											"end": 7097,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "298"
										},
										{
											"begin": 7086,
											"end": 7114,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7086,
											"end": 7114,
											"name": "tag",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 7086,
											"end": 7114,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7131,
											"end": 7140,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7131,
											"end": 7140,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 6887,
											"end": 7147,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6887,
											"end": 7147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9701,
											"end": 10133,
											"name": "tag",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 9701,
											"end": 10133,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9813,
											"end": 9832,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 9813,
											"end": 9832,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9809,
											"end": 9898,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "300"
										},
										{
											"begin": 9809,
											"end": 9898,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9884,
											"end": 9885,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9855,
											"end": 9887,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9809,
											"end": 9898,
											"name": "tag",
											"source": 4,
											"value": "300"
										},
										{
											"begin": 9809,
											"end": 9898,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9911,
											"end": 9932,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9911,
											"end": 9932,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9907,
											"end": 9997,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "302"
										},
										{
											"begin": 9907,
											"end": 9997,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9983,
											"end": 9984,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9955,
											"end": 9986,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9907,
											"end": 9997,
											"name": "tag",
											"source": 4,
											"value": "302"
										},
										{
											"begin": 9907,
											"end": 9997,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10017,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10033,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10041,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10041,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10041,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 10051,
											"end": 10127,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10051,
											"end": 10127,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10051,
											"end": 10127,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 10051,
											"end": 10127,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10101,
											"end": 10108,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10094,
											"end": 10099,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "PUSH",
											"source": 4,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10110,
											"end": 10115,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "305"
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "tag",
											"source": 4,
											"value": "305"
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10085,
											"end": 10116,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 9701,
											"end": 10133,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9701,
											"end": 10133,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9701,
											"end": 10133,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9701,
											"end": 10133,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9701,
											"end": 10133,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6008,
											"end": 7115,
											"name": "tag",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 6008,
											"end": 7115,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6097,
											"end": 6115,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6097,
											"end": 6115,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "307"
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6249,
											"end": 6254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6245,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 6233,
											"end": 6245,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "308"
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 6233,
											"end": 6254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "tag",
											"source": 4,
											"value": "308"
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6233,
											"end": 6254,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "310"
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "tag",
											"source": 4,
											"value": "307"
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6285,
											"end": 6304,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6307,
											"end": 6322,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6340,
											"end": 6359,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6340,
											"end": 6359,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6340,
											"end": 6359,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6336,
											"end": 6451,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6336,
											"end": 6451,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 6336,
											"end": 6451,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8239,
											"end": 8271,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 8239,
											"end": 8271,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8221,
											"end": 8272,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8288,
											"end": 8306,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 8288,
											"end": 8306,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8288,
											"end": 8306,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8281,
											"end": 8315,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8281,
											"end": 8315,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8281,
											"end": 8315,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8324,
											"end": 8358,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 8324,
											"end": 8358,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8324,
											"end": 8358,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8194,
											"end": 8212,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 8194,
											"end": 8212,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6386,
											"end": 6436,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 8019,
											"end": 8364,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6336,
											"end": 6451,
											"name": "tag",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 6336,
											"end": 6451,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6580,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6586,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6589,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6589,
											"end": 6608,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6589,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6589,
											"end": 6608,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6571,
											"end": 6608,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "tag",
											"source": 4,
											"value": "310"
										},
										{
											"begin": 6093,
											"end": 6633,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6647,
											"end": 6663,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6647,
											"end": 6663,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6822,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6810,
											"end": 6831,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "314"
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "tag",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7030,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7034,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7043,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7043,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7043,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7043,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7043,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7021,
											"end": 7043,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "tag",
											"source": 4,
											"value": "314"
										},
										{
											"begin": 6643,
											"end": 7068,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7098,
											"end": 7100,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7092,
											"end": 7096,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7102,
											"end": 7107,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "tag",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7083,
											"end": 7108,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 6008,
											"end": 7115,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6008,
											"end": 7115,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6008,
											"end": 7115,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6008,
											"end": 7115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3358,
											"end": 3625,
											"name": "tag",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 3358,
											"end": 3625,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3452,
											"end": 3465,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3481,
											"end": 3527,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3527,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 3477,
											"end": 3619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 3477,
											"end": 3619,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3550,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 3559,
											"end": 3564,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3550,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 3550,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3550,
											"end": 3565,
											"name": "tag",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 3550,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3543,
											"end": 3565,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3543,
											"end": 3565,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3543,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 3543,
											"end": 3565,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3477,
											"end": 3619,
											"name": "tag",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 3477,
											"end": 3619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3603,
											"end": 3608,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 3596,
											"end": 3608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "tag",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 3596,
											"end": 3608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "tag",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "tag",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "tag",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 3596,
											"end": 3608,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "tag",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5329,
											"end": 5346,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5329,
											"end": 5346,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5329,
											"end": 5346,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6283,
											"end": 6349,
											"name": "PUSH",
											"source": 14,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6270,
											"end": 6349,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6270,
											"end": 6349,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6266,
											"end": 6430,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6266,
											"end": 6430,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "331"
										},
										{
											"begin": 6266,
											"end": 6430,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6381,
											"end": 6382,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6381,
											"end": 6382,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6385,
											"end": 6415,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 6385,
											"end": 6415,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6417,
											"end": 6418,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6365,
											"end": 6419,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "330"
										},
										{
											"begin": 6365,
											"end": 6419,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6266,
											"end": 6430,
											"name": "tag",
											"source": 14,
											"value": "331"
										},
										{
											"begin": 6266,
											"end": 6430,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6524,
											"end": 6538,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9580,
											"end": 9605,
											"name": "DUP11",
											"source": 20
										},
										{
											"begin": 9580,
											"end": 9605,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9580,
											"end": 9605,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9653,
											"end": 9657,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 9641,
											"end": 9658,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 9641,
											"end": 9658,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 9621,
											"end": 9639,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 9621,
											"end": 9639,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 9621,
											"end": 9639,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9614,
											"end": 9659,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 9614,
											"end": 9659,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9614,
											"end": 9659,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 9614,
											"end": 9659,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9675,
											"end": 9693,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 9675,
											"end": 9693,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 9675,
											"end": 9693,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9668,
											"end": 9702,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 9668,
											"end": 9702,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9668,
											"end": 9702,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9718,
											"end": 9736,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 9718,
											"end": 9736,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 9718,
											"end": 9736,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 9711,
											"end": 9745,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 9711,
											"end": 9745,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 9711,
											"end": 9745,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9552,
											"end": 9571,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 9552,
											"end": 9571,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "GAS",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "STATICCALL",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "335"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "tag",
											"source": 14,
											"value": "335"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6541,
											"end": 6565,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6579,
											"end": 6599,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6579,
											"end": 6599,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6575,
											"end": 6688,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 6575,
											"end": 6688,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6631,
											"end": 6632,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6631,
											"end": 6632,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6635,
											"end": 6664,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6635,
											"end": 6664,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6631,
											"end": 6632,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6631,
											"end": 6632,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6615,
											"end": 6677,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "330"
										},
										{
											"begin": 6615,
											"end": 6677,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6575,
											"end": 6688,
											"name": "tag",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 6575,
											"end": 6688,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6706,
											"end": 6712,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6714,
											"end": 6734,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6714,
											"end": 6734,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6714,
											"end": 6734,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6714,
											"end": 6734,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "tag",
											"source": 14,
											"value": "330"
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5203,
											"end": 6754,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7280,
											"end": 7812,
											"name": "tag",
											"source": 14,
											"value": "298"
										},
										{
											"begin": 7280,
											"end": 7812,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7375,
											"end": 7395,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7366,
											"end": 7371,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "340"
										},
										{
											"begin": 7366,
											"end": 7395,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "tag",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7366,
											"end": 7395,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7362,
											"end": 7806,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 7362,
											"end": 7806,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7280,
											"end": 7812,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7280,
											"end": 7812,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7280,
											"end": 7812,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7362,
											"end": 7806,
											"name": "tag",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 7362,
											"end": 7806,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7471,
											"end": 7500,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 7462,
											"end": 7467,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "340"
										},
										{
											"begin": 7462,
											"end": 7500,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "tag",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7462,
											"end": 7500,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7458,
											"end": 7806,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "349"
										},
										{
											"begin": 7458,
											"end": 7806,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F645EEDF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7523,
											"end": 7546,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 7458,
											"end": 7806,
											"name": "tag",
											"source": 14,
											"value": "349"
										},
										{
											"begin": 7458,
											"end": 7806,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7576,
											"end": 7611,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 7567,
											"end": 7572,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "354"
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "354"
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "340"
										},
										{
											"begin": 7567,
											"end": 7611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "tag",
											"source": 14,
											"value": "354"
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7567,
											"end": 7611,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7563,
											"end": 7806,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 7563,
											"end": 7806,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FCE698F7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7634,
											"end": 7680,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "202"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7563,
											"end": 7806,
											"name": "tag",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 7563,
											"end": 7806,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7710,
											"end": 7740,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7701,
											"end": 7706,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "340"
										},
										{
											"begin": 7701,
											"end": 7740,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "tag",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7740,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7697,
											"end": 7806,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 7697,
											"end": 7806,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "35E2F383"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7763,
											"end": 7795,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "202"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2078,
											"end": 2456,
											"name": "tag",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 2078,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2150,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 2162,
											"end": 2173,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "365"
										},
										{
											"begin": 2187,
											"end": 2191,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "366"
										},
										{
											"begin": 2176,
											"end": 2192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "tag",
											"source": 11,
											"value": "365"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2363,
											"end": 2379,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2363,
											"end": 2379,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2363,
											"end": 2379,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2408,
											"end": 2412,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2399,
											"end": 2413,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2399,
											"end": 2413,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2392,
											"end": 2420,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2392,
											"end": 2420,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2392,
											"end": 2420,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2392,
											"end": 2420,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2363,
											"end": 2379,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2078,
											"end": 2456,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2528,
											"end": 2773,
											"name": "tag",
											"source": 11,
											"value": "366"
										},
										{
											"begin": 2528,
											"end": 2773,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2589,
											"end": 2596,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2661,
											"end": 2665,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2625,
											"end": 2665,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2625,
											"end": 2665,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2688,
											"end": 2690,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 2679,
											"end": 2690,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2679,
											"end": 2690,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2675,
											"end": 2744,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2675,
											"end": 2744,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "128"
										},
										{
											"begin": 2675,
											"end": 2744,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2713,
											"end": 2733,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14,
											"end": 303,
											"name": "tag",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 14,
											"end": 303,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 56,
											"end": 59,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 94,
											"end": 99,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 88,
											"end": 100,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 121,
											"end": 127,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 116,
											"end": 119,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 109,
											"end": 128,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 177,
											"end": 183,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 170,
											"end": 174,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 163,
											"end": 168,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 159,
											"end": 175,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 147,
											"end": 150,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 143,
											"end": 157,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 137,
											"end": 184,
											"name": "MCOPY",
											"source": 20
										},
										{
											"begin": 229,
											"end": 230,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 222,
											"end": 226,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 213,
											"end": 219,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 208,
											"end": 211,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 204,
											"end": 220,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 200,
											"end": 227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 193,
											"end": 231,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 292,
											"end": 296,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 285,
											"end": 287,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 281,
											"end": 288,
											"name": "NOT",
											"source": 20
										},
										{
											"begin": 276,
											"end": 278,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 268,
											"end": 274,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 264,
											"end": 279,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 260,
											"end": 289,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 255,
											"end": 258,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 251,
											"end": 290,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 247,
											"end": 297,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 308,
											"end": 528,
											"name": "tag",
											"source": 20,
											"value": "29"
										},
										{
											"begin": 308,
											"end": 528,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 457,
											"end": 459,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 446,
											"end": 455,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 439,
											"end": 460,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 420,
											"end": 424,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 477,
											"end": 522,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 518,
											"end": 520,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 507,
											"end": 516,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 503,
											"end": 521,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 495,
											"end": 501,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 477,
											"end": 522,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 477,
											"end": 522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 477,
											"end": 522,
											"name": "tag",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 477,
											"end": 522,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 469,
											"end": 522,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 308,
											"end": 528,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 308,
											"end": 528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "tag",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 533,
											"end": 706,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 601,
											"end": 621,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 601,
											"end": 621,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 650,
											"end": 681,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 650,
											"end": 681,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 640,
											"end": 682,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 640,
											"end": 682,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 630,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "380"
										},
										{
											"begin": 630,
											"end": 700,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 696,
											"end": 697,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 693,
											"end": 694,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 686,
											"end": 698,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 630,
											"end": 700,
											"name": "tag",
											"source": 20,
											"value": "380"
										},
										{
											"begin": 630,
											"end": 700,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 711,
											"end": 1011,
											"name": "tag",
											"source": 20,
											"value": "33"
										},
										{
											"begin": 711,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 779,
											"end": 785,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 787,
											"end": 793,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 840,
											"end": 842,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 828,
											"end": 837,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 819,
											"end": 826,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 815,
											"end": 838,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 811,
											"end": 843,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "382"
										},
										{
											"begin": 808,
											"end": 860,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 856,
											"end": 857,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 853,
											"end": 854,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 846,
											"end": 858,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "tag",
											"source": 20,
											"value": "382"
										},
										{
											"begin": 808,
											"end": 860,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "383"
										},
										{
											"begin": 898,
											"end": 907,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 879,
											"end": 908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "tag",
											"source": 20,
											"value": "383"
										},
										{
											"begin": 879,
											"end": 908,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 869,
											"end": 908,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 977,
											"end": 979,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 949,
											"end": 981,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 949,
											"end": 981,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 711,
											"end": 1011,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "tag",
											"source": 20,
											"value": "45"
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1467,
											"end": 1473,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1481,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1483,
											"end": 1489,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1538,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1524,
											"end": 1533,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1515,
											"end": 1522,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1511,
											"end": 1534,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1507,
											"end": 1539,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "387"
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1552,
											"end": 1553,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1549,
											"end": 1550,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1542,
											"end": 1554,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "tag",
											"source": 20,
											"value": "387"
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "388"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 1575,
											"end": 1604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "tag",
											"source": 20,
											"value": "388"
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1604,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1604,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "389"
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1646,
											"end": 1655,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1642,
											"end": 1660,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 1623,
											"end": 1661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 20,
											"value": "389"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 1613,
											"end": 1661,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1613,
											"end": 1661,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1730,
											"end": 1732,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1734,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1734,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "tag",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2199,
											"end": 2205,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2252,
											"end": 2254,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2240,
											"end": 2249,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2231,
											"end": 2238,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2227,
											"end": 2250,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2223,
											"end": 2255,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "393"
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2265,
											"end": 2266,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2270,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "tag",
											"source": 20,
											"value": "393"
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2313,
											"end": 2336,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 2313,
											"end": 2336,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2140,
											"end": 2366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2371,
											"end": 2557,
											"name": "tag",
											"source": 20,
											"value": "69"
										},
										{
											"begin": 2371,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2430,
											"end": 2436,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2483,
											"end": 2485,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2471,
											"end": 2480,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2462,
											"end": 2469,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2458,
											"end": 2481,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2454,
											"end": 2486,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "395"
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2499,
											"end": 2500,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2496,
											"end": 2497,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2489,
											"end": 2501,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "tag",
											"source": 20,
											"value": "395"
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "378"
										},
										{
											"begin": 2541,
											"end": 2550,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 2522,
											"end": 2551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "tag",
											"source": 20,
											"value": "88"
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2968,
											"end": 2971,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 2963,
											"end": 2966,
											"name": "PUSH",
											"source": 20,
											"value": "F8"
										},
										{
											"begin": 2959,
											"end": 2972,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 2951,
											"end": 2957,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 2947,
											"end": 2973,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2936,
											"end": 2945,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 2974,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3010,
											"end": 3013,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2994,
											"end": 3003,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2983,
											"end": 3014,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2910,
											"end": 2914,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "398"
										},
										{
											"begin": 3078,
											"end": 3081,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 3067,
											"end": 3076,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3063,
											"end": 3082,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3055,
											"end": 3061,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 3037,
											"end": 3083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "tag",
											"source": 20,
											"value": "398"
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3131,
											"end": 3140,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3123,
											"end": 3129,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3119,
											"end": 3141,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3114,
											"end": 3116,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 3103,
											"end": 3112,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3099,
											"end": 3117,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3092,
											"end": 3142,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "399"
										},
										{
											"begin": 3191,
											"end": 3197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3183,
											"end": 3189,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "372"
										},
										{
											"begin": 3165,
											"end": 3198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "tag",
											"source": 20,
											"value": "399"
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3229,
											"end": 3231,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3278,
											"end": 3310,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 3278,
											"end": 3310,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 3272,
											"end": 3275,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 3257,
											"end": 3276,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3257,
											"end": 3276,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3250,
											"end": 3311,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3298,
											"end": 3301,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 3327,
											"end": 3346,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3327,
											"end": 3346,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3386,
											"end": 3389,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 3371,
											"end": 3390,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3371,
											"end": 3390,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3364,
											"end": 3415,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3464,
											"end": 3477,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3464,
											"end": 3477,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3536,
											"end": 3538,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "tag",
											"source": 20,
											"value": "400"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3619,
											"end": 3625,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3616,
											"end": 3617,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3613,
											"end": 3626,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "402"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 3680,
											"end": 3693,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3680,
											"end": 3693,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 3668,
											"end": 3694,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3668,
											"end": 3694,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3723,
											"end": 3725,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3641,
											"end": 3642,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 3634,
											"end": 3643,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "400"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "tag",
											"source": 20,
											"value": "402"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "SWAP12",
											"source": 20
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "SWAP11",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2562,
											"end": 3800,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "tag",
											"source": 20,
											"value": "109"
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4124,
											"end": 4130,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4140,
											"end": 4146,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4156,
											"end": 4162,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4164,
											"end": 4170,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4172,
											"end": 4178,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4225,
											"end": 4228,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 4213,
											"end": 4222,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4211,
											"name": "DUP11",
											"source": 20
										},
										{
											"begin": 4200,
											"end": 4223,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 4196,
											"end": 4229,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "405"
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4242,
											"end": 4243,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4239,
											"end": 4240,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4232,
											"end": 4244,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "tag",
											"source": 20,
											"value": "405"
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "406"
										},
										{
											"begin": 4284,
											"end": 4293,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 4265,
											"end": 4294,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "tag",
											"source": 20,
											"value": "406"
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4294,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4294,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "407"
										},
										{
											"begin": 4347,
											"end": 4349,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 4336,
											"end": 4345,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 4332,
											"end": 4350,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 4313,
											"end": 4351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "tag",
											"source": 20,
											"value": "407"
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4303,
											"end": 4351,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4420,
											"end": 4422,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 4405,
											"end": 4423,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4405,
											"end": 4423,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4392,
											"end": 4424,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4392,
											"end": 4424,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4521,
											"end": 4523,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 4506,
											"end": 4524,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4506,
											"end": 4524,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4493,
											"end": 4525,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4493,
											"end": 4525,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4603,
											"end": 4606,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4575,
											"end": 4608,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4652,
											"end": 4656,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 4627,
											"end": 4658,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4627,
											"end": 4658,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "408"
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4672,
											"end": 4673,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4669,
											"end": 4670,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4662,
											"end": 4674,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "tag",
											"source": 20,
											"value": "408"
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP10",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP9",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 4695,
											"end": 4702,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 4775,
											"end": 4778,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 4760,
											"end": 4779,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 4760,
											"end": 4779,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4747,
											"end": 4780,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4747,
											"end": 4780,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4879,
											"end": 4882,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 4864,
											"end": 4883,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4864,
											"end": 4883,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4864,
											"end": 4883,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4851,
											"end": 4884,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4851,
											"end": 4884,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4013,
											"end": 4916,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "tag",
											"source": 20,
											"value": "114"
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4989,
											"end": 4995,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4997,
											"end": 5003,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5052,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 5038,
											"end": 5047,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5029,
											"end": 5036,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 5025,
											"end": 5048,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5021,
											"end": 5053,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "410"
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5063,
											"end": 5064,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5056,
											"end": 5068,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "tag",
											"source": 20,
											"value": "410"
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "411"
										},
										{
											"begin": 5108,
											"end": 5117,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 5089,
											"end": 5118,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "tag",
											"source": 20,
											"value": "411"
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5079,
											"end": 5118,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5079,
											"end": 5118,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "412"
										},
										{
											"begin": 5171,
											"end": 5173,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5160,
											"end": 5169,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 5156,
											"end": 5174,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "373"
										},
										{
											"begin": 5137,
											"end": 5175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "tag",
											"source": 20,
											"value": "412"
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5127,
											"end": 5175,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5127,
											"end": 5175,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "tag",
											"source": 20,
											"value": "123"
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5265,
											"end": 5266,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "SHR",
											"source": 20
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5308,
											"end": 5320,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5308,
											"end": 5320,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5308,
											"end": 5320,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "414"
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5383,
											"end": 5387,
											"name": "PUSH",
											"source": 20,
											"value": "7F"
										},
										{
											"begin": 5375,
											"end": 5381,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5371,
											"end": 5388,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5361,
											"end": 5388,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5361,
											"end": 5388,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "tag",
											"source": 20,
											"value": "414"
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5436,
											"end": 5438,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5428,
											"end": 5434,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5425,
											"end": 5439,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 5405,
											"end": 5423,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5402,
											"end": 5440,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "415"
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5482,
											"end": 5492,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 5477,
											"end": 5480,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 5473,
											"end": 5493,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 5470,
											"end": 5471,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5463,
											"end": 5494,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5517,
											"end": 5521,
											"name": "PUSH",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 5514,
											"end": 5515,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 5507,
											"end": 5522,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5545,
											"end": 5549,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 5542,
											"end": 5543,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5535,
											"end": 5550,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "tag",
											"source": 20,
											"value": "415"
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5703,
											"end": 5830,
											"name": "tag",
											"source": 20,
											"value": "374"
										},
										{
											"begin": 5703,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5764,
											"end": 5774,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 5759,
											"end": 5762,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 5755,
											"end": 5775,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 5752,
											"end": 5753,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5745,
											"end": 5776,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5795,
											"end": 5799,
											"name": "PUSH",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 5792,
											"end": 5793,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 5785,
											"end": 5800,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5819,
											"end": 5823,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 5816,
											"end": 5817,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5809,
											"end": 5824,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5835,
											"end": 6003,
											"name": "tag",
											"source": 20,
											"value": "188"
										},
										{
											"begin": 5835,
											"end": 6003,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5908,
											"end": 5917,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5908,
											"end": 5917,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5908,
											"end": 5917,
											"name": "MUL",
											"source": 20
										},
										{
											"begin": 5939,
											"end": 5948,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5939,
											"end": 5948,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5956,
											"end": 5971,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5956,
											"end": 5971,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5956,
											"end": 5971,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 5950,
											"end": 5972,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 5950,
											"end": 5972,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 5936,
											"end": 5973,
											"name": "OR",
											"source": 20
										},
										{
											"begin": 5926,
											"end": 5997,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "128"
										},
										{
											"begin": 5926,
											"end": 5997,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5977,
											"end": 5995,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "128"
										},
										{
											"begin": 5977,
											"end": 5995,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "374"
										},
										{
											"begin": 5977,
											"end": 5995,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6008,
											"end": 6225,
											"name": "tag",
											"source": 20,
											"value": "190"
										},
										{
											"begin": 6008,
											"end": 6225,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6048,
											"end": 6049,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6074,
											"end": 6075,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6064,
											"end": 6196,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "422"
										},
										{
											"begin": 6064,
											"end": 6196,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 6118,
											"end": 6128,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 6113,
											"end": 6116,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 6109,
											"end": 6129,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 6106,
											"end": 6107,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6099,
											"end": 6130,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6153,
											"end": 6157,
											"name": "PUSH",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 6150,
											"end": 6151,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 6143,
											"end": 6158,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6181,
											"end": 6185,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6178,
											"end": 6179,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 6171,
											"end": 6186,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 6064,
											"end": 6196,
											"name": "tag",
											"source": 20,
											"value": "422"
										},
										{
											"begin": 6064,
											"end": 6196,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6210,
											"end": 6219,
											"name": "DIV",
											"source": 20
										},
										{
											"begin": 6210,
											"end": 6219,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6008,
											"end": 6225,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6230,
											"end": 6358,
											"name": "tag",
											"source": 20,
											"value": "195"
										},
										{
											"begin": 6230,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 6297,
											"end": 6306,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6297,
											"end": 6306,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6297,
											"end": 6306,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 6318,
											"end": 6329,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6318,
											"end": 6329,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6318,
											"end": 6329,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 6315,
											"end": 6352,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 6315,
											"end": 6352,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "128"
										},
										{
											"begin": 6315,
											"end": 6352,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 6332,
											"end": 6350,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "128"
										},
										{
											"begin": 6332,
											"end": 6350,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "374"
										},
										{
											"begin": 6332,
											"end": 6350,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8729,
											"end": 8854,
											"name": "tag",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 8729,
											"end": 8854,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8794,
											"end": 8803,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 8794,
											"end": 8803,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8794,
											"end": 8803,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8815,
											"end": 8825,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 8815,
											"end": 8825,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 8815,
											"end": 8825,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 8812,
											"end": 8848,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 8812,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "128"
										},
										{
											"begin": 8812,
											"end": 8848,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 8828,
											"end": 8846,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "128"
										},
										{
											"begin": 8828,
											"end": 8846,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "374"
										},
										{
											"begin": 8828,
											"end": 8846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 9756,
											"end": 9883,
											"name": "tag",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 9756,
											"end": 9883,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 9817,
											"end": 9827,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 9812,
											"end": 9815,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 9808,
											"end": 9828,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 9805,
											"end": 9806,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9798,
											"end": 9829,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9848,
											"end": 9852,
											"name": "PUSH",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 9845,
											"end": 9846,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 9838,
											"end": 9853,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 9872,
											"end": 9876,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 9869,
											"end": 9870,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 9862,
											"end": 9877,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/CSDP.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"sendToken()": "b8972db5",
							"setTokenPrice(uint256)": "6a61e5fc",
							"symbol()": "95d89b41",
							"tokenPrice()": "7ff9b596",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CSDP.sol\":\"CSDP\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e0968705bad99747a8e5288aa008678c2be2f471f919dce3925a3cc4f1dee09\",\"dweb:/ipfs/QmbAFnCQfo4tw6ssfQSjhA5LzwHWNNryXN8bX7ty8jiqqn\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ee931d4e832385765967efe6366dcc6d00d6a2d794f9c66ee38283c03882de9c\",\"dweb:/ipfs/QmR6SkuJGYxpQeLz38rBdghqaWqEPfzUsL9kBoXgEXKtbD\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3\",\"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65e38fb76b6add407d4557753ae83dd1268e8261195dbe5c19a580d5ba6e4e9a\",\"dweb:/ipfs/QmTkGSJtaQrqjcyWM4AgemeEmKgtDydKPPVRajsUJRQSrK\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e41287d40b0c46982f1083d40d32de2761f009c5c51627fe79a7feb0ab1cf5c\",\"dweb:/ipfs/Qme7dbh6HX3ZvUJdbQAcVqXkmyXyfcLiUZRhhon3cU6K8p\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/CSDP.sol\":{\"keccak256\":\"0x40732448de2a2a728d3aa3e6620c39c4c38605f16d9a2aec653cc6c67d9e7ba9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c74c96254a075b05619099a08181a466f47bf379e54ed638fce968abf8b42b0\",\"dweb:/ipfs/QmdgGLW5vwshgn5ij6NrqLZeJt28998CFnE7LSsDhryNHd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 397,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 403,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 405,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 407,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 409,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2262,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2264,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1227,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 8,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_owner",
								"offset": 0,
								"slot": "8",
								"type": "t_address"
							},
							{
								"astId": 320,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "_status",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							},
							{
								"astId": 3700,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "tokenPrice",
								"offset": 0,
								"slot": "10",
								"type": "t_uint256"
							},
							{
								"astId": 3702,
								"contract": "contracts/CSDP.sol:CSDP",
								"label": "totalTokenSupply",
								"offset": 0,
								"slot": "11",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1213
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1214,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1213,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1213,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1213
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1195,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1195,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							172
						]
					},
					"id": 173,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 172,
							"linearizedBaseContracts": [
								172
							],
							"name": "IERC5267",
							"nameLocation": "143:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:1",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 152,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:1"
									},
									"src": "247:28:1"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:1",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:1"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "510:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 155,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "537:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 157,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "569:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "604:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "633:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "672:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 165,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "698:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 167,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 168,
													"nodeType": "ArrayTypeName",
													"src": "698:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:1"
									},
									"scope": 172,
									"src": "426:310:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 173,
							"src": "133:605:1",
							"usedErrors": [],
							"usedEvents": [
								152
							]
						}
					],
					"src": "107:632:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							309
						],
						"IERC20Errors": [
							214
						],
						"IERC721Errors": [
							262
						]
					},
					"id": 310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 174,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 175,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:2",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 214,
							"linearizedBaseContracts": [
								214
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 184,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "652:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "668:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "685:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:2"
									},
									"src": "621:80:2"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 189,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "889:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:2"
									},
									"src": "864:41:2"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 194,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "1102:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:2"
									},
									"src": "1075:45:2"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:2",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 203,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1509:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1526:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1545:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:2"
									},
									"src": "1476:85:2"
								},
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 208,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1773:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:2"
									},
									"src": "1746:45:2"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 213,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2023:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:2"
									},
									"src": "1997:43:2"
								}
							],
							"scope": 310,
							"src": "278:1764:2",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 215,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:2",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 262,
							"linearizedBaseContracts": [
								262
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 220,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "2465:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:2"
									},
									"src": "2440:40:2"
								},
								{
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 225,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2652:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:2"
									},
									"src": "2623:46:2"
								},
								{
									"documentation": {
										"id": 226,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 234,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "2996:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3012:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3029:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:2"
									},
									"src": "2969:75:2"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 239,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "3233:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:2"
									},
									"src": "3207:42:2"
								},
								{
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 244,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "3447:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:2"
									},
									"src": "3419:46:2"
								},
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 251,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3756:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3774:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:2"
									},
									"src": "3723:68:2"
								},
								{
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 256,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "4004:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:2"
									},
									"src": "3976:46:2"
								},
								{
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 261,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "4258:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:2"
									},
									"src": "4230:46:2"
								}
							],
							"scope": 310,
							"src": "2186:2092:2",
							"usedErrors": [
								220,
								225,
								234,
								239,
								244,
								251,
								256,
								261
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 263,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:2",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 309,
							"linearizedBaseContracts": [
								309
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 274,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4854:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4870:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4887:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4903:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:2"
									},
									"src": "4821:99:2"
								},
								{
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 279,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "5110:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:2"
									},
									"src": "5083:43:2"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 284,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "5325:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:2"
									},
									"src": "5296:47:2"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 291,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5645:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5663:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:2"
									},
									"src": "5610:68:2"
								},
								{
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 296,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "5892:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:2"
									},
									"src": "5863:47:2"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 301,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "6147:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:2"
									},
									"src": "6118:47:2"
								},
								{
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 308,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6488:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6507:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:2"
									},
									"src": "6456:73:2"
								}
							],
							"scope": 310,
							"src": "4424:2107:2",
							"usedErrors": [
								274,
								279,
								284,
								291,
								296,
								301,
								308
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							374
						]
					},
					"id": 375,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 311,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 312,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:3",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 374,
							"linearizedBaseContracts": [
								374
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 315,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "1676:41:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 313,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 314,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:3",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 318,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "1723:37:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 316,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 317,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:3",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 320,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "1767:23:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 319,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1811:39:3",
										"statements": [
											{
												"expression": {
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 323,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "1821:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 324,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 315,
														"src": "1831:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:3"
											}
										]
									},
									"id": 328,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:3"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:3"
									},
									"scope": 374,
									"src": "1797:53:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 338,
										"nodeType": "Block",
										"src": "2251:79:3",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 331,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "2261:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 333,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:3"
											},
											{
												"id": 334,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:3"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 335,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 362,
														"src": "2303:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:3"
											}
										]
									},
									"documentation": {
										"id": 329,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:3",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 339,
									"name": "nonReentrant",
									"nameLocation": "2236:12:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:3"
									},
									"src": "2227:103:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2375:248:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 343,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 320,
																"src": "2468:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 344,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 318,
																"src": "2479:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 342,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 348,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:3"
											},
											{
												"expression": {
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 349,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "2598:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 350,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "2608:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 352,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:3"
											}
										]
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:3"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:3"
									},
									"scope": 374,
									"src": "2336:287:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 361,
										"nodeType": "Block",
										"src": "2667:171:3",
										"statements": [
											{
												"expression": {
													"id": 359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 357,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "2809:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 358,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 315,
														"src": "2819:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 360,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:3"
											}
										]
									},
									"id": 362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:3"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:3"
									},
									"scope": 374,
									"src": "2629:209:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 372,
										"nodeType": "Block",
										"src": "3081:43:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 368,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "3098:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 369,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "3109:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 367,
												"id": 371,
												"nodeType": "Return",
												"src": "3091:26:3"
											}
										]
									},
									"documentation": {
										"id": 363,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:3",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 373,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:3"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "3075:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 365,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:3"
									},
									"scope": 374,
									"src": "3017:107:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 375,
							"src": "888:2238:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:3015:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1213
						],
						"ERC20": [
							889
						],
						"IERC20": [
							967
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1147
						]
					},
					"id": 890,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 376,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 378,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 890,
							"sourceUnit": 968,
							"src": "131:36:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 377,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 967,
										"src": "139:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 380,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 890,
							"sourceUnit": 1148,
							"src": "168:63:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 379,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1147,
										"src": "176:14:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 382,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 890,
							"sourceUnit": 1214,
							"src": "232:48:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 381,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1213,
										"src": "240:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 384,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 890,
							"sourceUnit": 310,
							"src": "281:65:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 383,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 214,
										"src": "289:12:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 386,
										"name": "Context",
										"nameLocations": [
											"1133:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1213,
										"src": "1133:7:4"
									},
									"id": 387,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:4"
								},
								{
									"baseName": {
										"id": 388,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 967,
										"src": "1142:6:4"
									},
									"id": 389,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:4"
								},
								{
									"baseName": {
										"id": 390,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1147,
										"src": "1150:14:4"
									},
									"id": 391,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:4"
								},
								{
									"baseName": {
										"id": 392,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "1166:12:4"
									},
									"id": 393,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:4"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 385,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:4",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 889,
							"linearizedBaseContracts": [
								889,
								214,
								1147,
								967,
								1213
							],
							"name": "ERC20",
							"nameLocation": "1124:5:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 397,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:4",
									"nodeType": "VariableDeclaration",
									"scope": 889,
									"src": "1185:53:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 396,
										"keyName": "account",
										"keyNameLocation": "1201:7:4",
										"keyType": {
											"id": 394,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 395,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 403,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 889,
									"src": "1245:83:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 402,
										"keyName": "account",
										"keyNameLocation": "1261:7:4",
										"keyType": {
											"id": 398,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 401,
											"keyName": "spender",
											"keyNameLocation": "1288:7:4",
											"keyType": {
												"id": 399,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:4",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 400,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 405,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 889,
									"src": "1335:28:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 404,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 407,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 889,
									"src": "1370:20:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 406,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 409,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 889,
									"src": "1396:22:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 408,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "1657:57:4",
										"statements": [
											{
												"expression": {
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 417,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "1667:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 418,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 412,
														"src": "1675:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1667:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "1667:13:4"
											},
											{
												"expression": {
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 421,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "1690:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 422,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "1700:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1690:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "1690:17:4"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "1425:171:4",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 426,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1627:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "1613:19:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 411,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1613:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1648:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "1634:21:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 413,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1634:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1612:44:4"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1657:0:4"
									},
									"scope": 889,
									"src": "1601:113:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1134
									],
									"body": {
										"id": 434,
										"nodeType": "Block",
										"src": "1839:29:4",
										"statements": [
											{
												"expression": {
													"id": 432,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 407,
													"src": "1856:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 431,
												"id": 433,
												"nodeType": "Return",
												"src": "1849:12:4"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "1720:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 435,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1788:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:2:4"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "1824:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 429,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1824:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:15:4"
									},
									"scope": 889,
									"src": "1779:89:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1140
									],
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "2043:31:4",
										"statements": [
											{
												"expression": {
													"id": 441,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 409,
													"src": "2060:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 440,
												"id": 442,
												"nodeType": "Return",
												"src": "2053:14:4"
											}
										]
									},
									"documentation": {
										"id": 436,
										"nodeType": "StructuredDocumentation",
										"src": "1874:102:4",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1990:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1996:2:4"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "2028:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 438,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2028:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:4"
									},
									"scope": 889,
									"src": "1981:93:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1146
									],
									"body": {
										"id": 452,
										"nodeType": "Block",
										"src": "2763:26:4",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 450,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2780:2:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 449,
												"id": 451,
												"nodeType": "Return",
												"src": "2773:9:4"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "2080:622:4",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 453,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2716:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:2:4"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 453,
												"src": "2756:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 447,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2756:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2755:7:4"
									},
									"scope": 889,
									"src": "2707:82:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										916
									],
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "2910:36:4",
										"statements": [
											{
												"expression": {
													"id": 459,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 405,
													"src": "2927:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 458,
												"id": 460,
												"nodeType": "Return",
												"src": "2920:19:4"
											}
										]
									},
									"documentation": {
										"id": 454,
										"nodeType": "StructuredDocumentation",
										"src": "2795:49:4",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2858:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2869:2:4"
									},
									"returnParameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "2901:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2901:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2900:9:4"
									},
									"scope": 889,
									"src": "2849:97:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										924
									],
									"body": {
										"id": 474,
										"nodeType": "Block",
										"src": "3078:42:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 470,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 397,
														"src": "3095:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 472,
													"indexExpression": {
														"id": 471,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 465,
														"src": "3105:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3095:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 469,
												"id": 473,
												"nodeType": "Return",
												"src": "3088:25:4"
											}
										]
									},
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "2952:47:4",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3013:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3031:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "3023:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 464,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3023:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3022:17:4"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "3069:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3068:9:4"
									},
									"scope": 889,
									"src": "3004:116:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										934
									],
									"body": {
										"id": 498,
										"nodeType": "Block",
										"src": "3390:103:4",
										"statements": [
											{
												"assignments": [
													486
												],
												"declarations": [
													{
														"constant": false,
														"id": 486,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3408:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 498,
														"src": "3400:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 485,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3400:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 489,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 487,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "3416:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3416:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3400:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 491,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 486,
															"src": "3448:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 492,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "3455:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 493,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "3459:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 490,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 619,
														"src": "3438:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3438:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 495,
												"nodeType": "ExpressionStatement",
												"src": "3438:27:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 484,
												"id": 497,
												"nodeType": "Return",
												"src": "3475:11:4"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "3126:184:4",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 499,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3324:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3341:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 499,
												"src": "3333:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3333:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3353:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 499,
												"src": "3345:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3345:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:27:4"
									},
									"returnParameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 499,
												"src": "3384:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3384:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:6:4"
									},
									"scope": 889,
									"src": "3315:178:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										944
									],
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "3640:51:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 509,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 403,
															"src": "3657:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 511,
														"indexExpression": {
															"id": 510,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "3669:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3657:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 513,
													"indexExpression": {
														"id": 512,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 504,
														"src": "3676:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3657:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 508,
												"id": 514,
												"nodeType": "Return",
												"src": "3650:34:4"
											}
										]
									},
									"documentation": {
										"id": 500,
										"nodeType": "StructuredDocumentation",
										"src": "3499:47:4",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3560:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3578:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "3570:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3593:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "3585:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3585:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3569:32:4"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "3631:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3631:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3630:9:4"
									},
									"scope": 889,
									"src": "3551:140:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										954
									],
									"body": {
										"id": 539,
										"nodeType": "Block",
										"src": "4077:107:4",
										"statements": [
											{
												"assignments": [
													527
												],
												"declarations": [
													{
														"constant": false,
														"id": 527,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4095:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 539,
														"src": "4087:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 526,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4087:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 530,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 528,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "4103:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4103:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4087:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 532,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "4134:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 533,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "4141:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 534,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "4150:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 531,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															780,
															840
														],
														"referencedDeclaration": 780,
														"src": "4125:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4125:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 536,
												"nodeType": "ExpressionStatement",
												"src": "4125:31:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4173:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 525,
												"id": 538,
												"nodeType": "Return",
												"src": "4166:11:4"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "3697:296:4",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4007:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4023:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "4015:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4015:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4040:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "4032:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 520,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4014:32:4"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "4071:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 523,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4071:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4070:6:4"
									},
									"scope": 889,
									"src": "3998:186:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										966
									],
									"body": {
										"id": 571,
										"nodeType": "Block",
										"src": "4869:151:4",
										"statements": [
											{
												"assignments": [
													553
												],
												"declarations": [
													{
														"constant": false,
														"id": 553,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4887:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 571,
														"src": "4879:15:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 552,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4879:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 556,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 554,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "4897:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4879:30:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 558,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "4935:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 559,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 553,
															"src": "4941:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 560,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "4950:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 557,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "4919:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4919:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 562,
												"nodeType": "ExpressionStatement",
												"src": "4919:37:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 564,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "4976:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 565,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 545,
															"src": "4982:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 566,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "4986:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 563,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 619,
														"src": "4966:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4966:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 568,
												"nodeType": "ExpressionStatement",
												"src": "4966:26:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5009:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 551,
												"id": 570,
												"nodeType": "Return",
												"src": "5002:11:4"
											}
										]
									},
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "4190:581:4",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4785:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4806:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "4798:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4820:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "4812:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4832:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "4824:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 546,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4824:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4797:41:4"
									},
									"returnParameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "4863:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 549,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4862:6:4"
									},
									"scope": 889,
									"src": "4776:244:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 618,
										"nodeType": "Block",
										"src": "5462:231:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 582,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 575,
														"src": "5476:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 585,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5492:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5484:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 583,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5484:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 586,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5484:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5476:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 596,
												"nodeType": "IfStatement",
												"src": "5472:86:4",
												"trueBody": {
													"id": 595,
													"nodeType": "Block",
													"src": "5496:62:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 591,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5544:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 590,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5536:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 589,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5536:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 592,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5536:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 588,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "5517:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5517:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 594,
															"nodeType": "RevertStatement",
															"src": "5510:37:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 597,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "5571:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 600,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5585:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5577:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 598,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5577:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 601,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5577:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5571:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 611,
												"nodeType": "IfStatement",
												"src": "5567:86:4",
												"trueBody": {
													"id": 610,
													"nodeType": "Block",
													"src": "5589:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 606,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5639:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 605,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5631:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 604,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5631:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 607,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5631:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 603,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "5610:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 608,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5610:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 609,
															"nodeType": "RevertStatement",
															"src": "5603:39:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 613,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "5670:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 614,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "5676:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 615,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "5680:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 612,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "5662:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5662:24:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 617,
												"nodeType": "ExpressionStatement",
												"src": "5662:24:4"
											}
										]
									},
									"documentation": {
										"id": 573,
										"nodeType": "StructuredDocumentation",
										"src": "5026:362:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 619,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5402:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "5412:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5412:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5434:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "5426:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5446:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "5438:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5438:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5411:41:4"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5462:0:4"
									},
									"scope": 889,
									"src": "5393:300:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "6083:1032:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 629,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 622,
														"src": "6097:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 632,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6113:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 631,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6105:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 630,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6105:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 633,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6105:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6097:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 666,
													"nodeType": "Block",
													"src": "6271:362:4",
													"statements": [
														{
															"assignments": [
																641
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 641,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6293:11:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 666,
																	"src": "6285:19:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 640,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6285:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 645,
															"initialValue": {
																"baseExpression": {
																	"id": 642,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 397,
																	"src": "6307:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 644,
																"indexExpression": {
																	"id": 643,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 622,
																	"src": "6317:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6307:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6285:37:4"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 648,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 646,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 641,
																	"src": "6340:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 647,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 626,
																	"src": "6354:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6340:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 656,
															"nodeType": "IfStatement",
															"src": "6336:115:4",
															"trueBody": {
																"id": 655,
																"nodeType": "Block",
																"src": "6361:90:4",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 650,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 622,
																					"src": "6411:4:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 651,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 641,
																					"src": "6417:11:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 652,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 626,
																					"src": "6430:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 649,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 184,
																				"src": "6386:24:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 653,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6386:50:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 654,
																		"nodeType": "RevertStatement",
																		"src": "6379:57:4"
																	}
																]
															}
														},
														{
															"id": 665,
															"nodeType": "UncheckedBlock",
															"src": "6464:159:4",
															"statements": [
																{
																	"expression": {
																		"id": 663,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 657,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 397,
																				"src": "6571:9:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 659,
																			"indexExpression": {
																				"id": 658,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 622,
																				"src": "6581:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6571:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 662,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 660,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 641,
																				"src": "6589:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 661,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 626,
																				"src": "6603:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6589:19:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6571:37:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 664,
																	"nodeType": "ExpressionStatement",
																	"src": "6571:37:4"
																}
															]
														}
													]
												},
												"id": 667,
												"nodeType": "IfStatement",
												"src": "6093:540:4",
												"trueBody": {
													"id": 639,
													"nodeType": "Block",
													"src": "6117:148:4",
													"statements": [
														{
															"expression": {
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 635,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 405,
																	"src": "6233:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 636,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 626,
																	"src": "6249:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6233:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 638,
															"nodeType": "ExpressionStatement",
															"src": "6233:21:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 668,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 624,
														"src": "6647:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6661:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6653:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 669,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6653:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 672,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6653:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6647:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 687,
													"nodeType": "Block",
													"src": "6862:206:4",
													"statements": [
														{
															"id": 686,
															"nodeType": "UncheckedBlock",
															"src": "6876:182:4",
															"statements": [
																{
																	"expression": {
																		"id": 684,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 680,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 397,
																				"src": "7021:9:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 682,
																			"indexExpression": {
																				"id": 681,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 624,
																				"src": "7031:2:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7021:13:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 683,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "7038:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7021:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 685,
																	"nodeType": "ExpressionStatement",
																	"src": "7021:22:4"
																}
															]
														}
													]
												},
												"id": 688,
												"nodeType": "IfStatement",
												"src": "6643:425:4",
												"trueBody": {
													"id": 679,
													"nodeType": "Block",
													"src": "6665:191:4",
													"statements": [
														{
															"id": 678,
															"nodeType": "UncheckedBlock",
															"src": "6679:167:4",
															"statements": [
																{
																	"expression": {
																		"id": 676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 674,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 405,
																			"src": "6810:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 675,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "6826:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6810:21:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 677,
																	"nodeType": "ExpressionStatement",
																	"src": "6810:21:4"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 690,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "7092:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 691,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "7098:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 692,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "7102:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 689,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 901,
														"src": "7083:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7083:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 694,
												"nodeType": "EmitStatement",
												"src": "7078:30:4"
											}
										]
									},
									"documentation": {
										"id": 620,
										"nodeType": "StructuredDocumentation",
										"src": "5699:304:4",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6017:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6033:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "6025:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 621,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6025:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6047:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "6039:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6059:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "6051:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6051:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6024:41:4"
									},
									"returnParameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6083:0:4"
									},
									"scope": 889,
									"src": "6008:1107:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 728,
										"nodeType": "Block",
										"src": "7514:152:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 704,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 699,
														"src": "7528:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 707,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7547:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7539:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 705,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7539:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 708,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7539:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7528:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 718,
												"nodeType": "IfStatement",
												"src": "7524:91:4",
												"trueBody": {
													"id": 717,
													"nodeType": "Block",
													"src": "7551:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 713,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7601:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 712,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7593:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 711,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7593:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7593:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 710,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "7572:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 715,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7572:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 716,
															"nodeType": "RevertStatement",
															"src": "7565:39:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 722,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7640:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 721,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7632:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 720,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7632:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7632:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 724,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 699,
															"src": "7644:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 725,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 701,
															"src": "7653:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 719,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "7624:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7624:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 727,
												"nodeType": "ExpressionStatement",
												"src": "7624:35:4"
											}
										]
									},
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "7121:332:4",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 729,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7467:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7481:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 729,
												"src": "7473:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7473:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7498:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 729,
												"src": "7490:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7490:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7472:32:4"
									},
									"returnParameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7514:0:4"
									},
									"scope": 889,
									"src": "7458:208:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "8040:150:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 737,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 732,
														"src": "8054:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 740,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8073:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8065:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 738,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8065:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 741,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8065:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8054:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 751,
												"nodeType": "IfStatement",
												"src": "8050:89:4",
												"trueBody": {
													"id": 750,
													"nodeType": "Block",
													"src": "8077:62:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 746,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8125:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 745,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8117:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 744,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8117:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 747,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8117:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 743,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "8098:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 748,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8098:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 749,
															"nodeType": "RevertStatement",
															"src": "8091:37:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 753,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "8156:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8173:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 755,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8165:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 754,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8165:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 757,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8165:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 758,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 734,
															"src": "8177:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 752,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "8148:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8148:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 760,
												"nodeType": "ExpressionStatement",
												"src": "8148:35:4"
											}
										]
									},
									"documentation": {
										"id": 730,
										"nodeType": "StructuredDocumentation",
										"src": "7672:307:4",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7993:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8007:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "7999:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7999:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8024:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "8016:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8016:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7998:32:4"
									},
									"returnParameters": {
										"id": 736,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8040:0:4"
									},
									"scope": 889,
									"src": "7984:206:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 779,
										"nodeType": "Block",
										"src": "8800:54:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 773,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "8819:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 774,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "8826:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 775,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "8835:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 776,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8842:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 772,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															780,
															840
														],
														"referencedDeclaration": 840,
														"src": "8810:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8810:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 778,
												"nodeType": "ExpressionStatement",
												"src": "8810:37:4"
											}
										]
									},
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "8196:525:4",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8735:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8752:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "8744:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8744:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8767:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "8759:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8759:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8784:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "8776:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8776:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8743:47:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8800:0:4"
									},
									"scope": 889,
									"src": "8726:128:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "9799:334:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 792,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "9813:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 795,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9830:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9822:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 793,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9822:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 796,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9822:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9813:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 806,
												"nodeType": "IfStatement",
												"src": "9809:89:4",
												"trueBody": {
													"id": 805,
													"nodeType": "Block",
													"src": "9834:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 801,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9884:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 800,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9876:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 799,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9876:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 802,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9876:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 798,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 208,
																	"src": "9855:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9855:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 804,
															"nodeType": "RevertStatement",
															"src": "9848:39:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 807,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 785,
														"src": "9911:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 810,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9930:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9922:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 808,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9922:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9922:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9911:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 821,
												"nodeType": "IfStatement",
												"src": "9907:90:4",
												"trueBody": {
													"id": 820,
													"nodeType": "Block",
													"src": "9934:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 816,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9983:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 815,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9975:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 814,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9975:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 817,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9975:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 813,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "9955:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 818,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9955:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 819,
															"nodeType": "RevertStatement",
															"src": "9948:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 822,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 403,
																"src": "10006:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 825,
															"indexExpression": {
																"id": 823,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "10018:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10006:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 826,
														"indexExpression": {
															"id": 824,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "10025:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10006:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 827,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 787,
														"src": "10036:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10006:35:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 829,
												"nodeType": "ExpressionStatement",
												"src": "10006:35:4"
											},
											{
												"condition": {
													"id": 830,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 789,
													"src": "10055:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 838,
												"nodeType": "IfStatement",
												"src": "10051:76:4",
												"trueBody": {
													"id": 837,
													"nodeType": "Block",
													"src": "10066:61:4",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 832,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 783,
																		"src": "10094:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 833,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 785,
																		"src": "10101:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 834,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "10110:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 831,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 910,
																	"src": "10085:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10085:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 836,
															"nodeType": "EmitStatement",
															"src": "10080:36:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "8860:836:4",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 840,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9710:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9727:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "9719:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9719:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9742:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "9734:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9734:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9759:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "9751:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9751:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9771:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "9766:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 788,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9766:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9718:63:4"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9799:0:4"
									},
									"scope": 889,
									"src": "9701:432:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 887,
										"nodeType": "Block",
										"src": "10504:388:4",
										"statements": [
											{
												"assignments": [
													851
												],
												"declarations": [
													{
														"constant": false,
														"id": 851,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10522:16:4",
														"nodeType": "VariableDeclaration",
														"scope": 887,
														"src": "10514:24:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 850,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10514:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 856,
												"initialValue": {
													"arguments": [
														{
															"id": 853,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "10551:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 854,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "10558:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 852,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "10541:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10541:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10514:52:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 857,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 851,
														"src": "10580:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10605:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 859,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10605:7:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 858,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10600:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10600:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 862,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10614:3:4",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10600:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10580:37:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 886,
												"nodeType": "IfStatement",
												"src": "10576:310:4",
												"trueBody": {
													"id": 885,
													"nodeType": "Block",
													"src": "10619:267:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 866,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 864,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 851,
																	"src": "10637:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 865,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 847,
																	"src": "10656:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10637:24:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 874,
															"nodeType": "IfStatement",
															"src": "10633:130:4",
															"trueBody": {
																"id": 873,
																"nodeType": "Block",
																"src": "10663:100:4",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 868,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 845,
																					"src": "10715:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 869,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 851,
																					"src": "10724:16:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 870,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 847,
																					"src": "10742:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 867,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 203,
																				"src": "10688:26:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 871,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10688:60:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 872,
																		"nodeType": "RevertStatement",
																		"src": "10681:67:4"
																	}
																]
															}
														},
														{
															"id": 884,
															"nodeType": "UncheckedBlock",
															"src": "10776:100:4",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 876,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 843,
																				"src": "10813:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 877,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 845,
																				"src": "10820:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 880,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 878,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 851,
																					"src": "10829:16:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 879,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 847,
																					"src": "10848:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10829:24:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 881,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10855:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 875,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				780,
																				840
																			],
																			"referencedDeclaration": 840,
																			"src": "10804:8:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10804:57:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 883,
																	"nodeType": "ExpressionStatement",
																	"src": "10804:57:4"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 841,
										"nodeType": "StructuredDocumentation",
										"src": "10139:271:4",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 888,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10424:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10448:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "10440:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10440:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10463:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "10455:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10455:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10480:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "10472:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 846,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10472:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10439:47:4"
									},
									"returnParameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10504:0:4"
									},
									"scope": 889,
									"src": "10415:477:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 890,
							"src": "1106:9788:4",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": [
								901,
								910
							]
						}
					],
					"src": "105:10790:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							967
						]
					},
					"id": 968,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 891,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 892,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:5",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 967,
							"linearizedBaseContracts": [
								967
							],
							"name": "IERC20",
							"nameLocation": "214:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 893,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:5",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 901,
									"name": "Transfer",
									"nameLocation": "396:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "405:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 894,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "427:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "447:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:5"
									},
									"src": "390:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:5",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 910,
									"name": "Approval",
									"nameLocation": "627:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "636:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 903,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 906,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "659:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "684:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:5"
									},
									"src": "621:78:5"
								},
								{
									"documentation": {
										"id": 911,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:5",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 916,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:5"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "821:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:5"
									},
									"scope": 967,
									"src": "775:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:5",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 924,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "931:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 918,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:5"
									},
									"returnParameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "971:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:5"
									},
									"scope": 967,
									"src": "912:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:5",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 934,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "1222:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "1234:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:5"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "1267:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 931,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:5"
									},
									"scope": 967,
									"src": "1204:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 935,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:5",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "1567:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 936,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "1582:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:5"
									},
									"returnParameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "1622:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:5"
									},
									"scope": 967,
									"src": "1548:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:5",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 954,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "2326:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "2343:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:5"
									},
									"returnParameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "2376:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 951,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:5"
									},
									"scope": 967,
									"src": "2309:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 955,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "2712:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 956,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "2726:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 958,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "2738:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:5"
									},
									"returnParameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "2771:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 963,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:5"
									},
									"scope": 967,
									"src": "2690:87:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 968,
							"src": "204:2575:5",
							"usedErrors": [],
							"usedEvents": [
								901,
								910
							]
						}
					],
					"src": "106:2674:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"ECDSA": [
							2225
						],
						"EIP712": [
							2452
						],
						"ERC20": [
							889
						],
						"ERC20Permit": [
							1121
						],
						"IERC20Permit": [
							1183
						],
						"Nonces": [
							1281
						]
					},
					"id": 1122,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 969,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 971,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 1184,
							"src": "148:48:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 970,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1183,
										"src": "156:12:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 973,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 890,
							"src": "197:35:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 972,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 889,
										"src": "205:5:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 975,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 2226,
							"src": "233:60:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 974,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2225,
										"src": "241:5:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 977,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 2453,
							"src": "294:62:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 976,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2452,
										"src": "302:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
							"file": "../../../utils/Nonces.sol",
							"id": 979,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 1282,
							"src": "357:49:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 978,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1281,
										"src": "365:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 981,
										"name": "ERC20",
										"nameLocations": [
											"931:5:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 889,
										"src": "931:5:6"
									},
									"id": 982,
									"nodeType": "InheritanceSpecifier",
									"src": "931:5:6"
								},
								{
									"baseName": {
										"id": 983,
										"name": "IERC20Permit",
										"nameLocations": [
											"938:12:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1183,
										"src": "938:12:6"
									},
									"id": 984,
									"nodeType": "InheritanceSpecifier",
									"src": "938:12:6"
								},
								{
									"baseName": {
										"id": 985,
										"name": "EIP712",
										"nameLocations": [
											"952:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2452,
										"src": "952:6:6"
									},
									"id": 986,
									"nodeType": "InheritanceSpecifier",
									"src": "952:6:6"
								},
								{
									"baseName": {
										"id": 987,
										"name": "Nonces",
										"nameLocations": [
											"960:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1281,
										"src": "960:6:6"
									},
									"id": 988,
									"nodeType": "InheritanceSpecifier",
									"src": "960:6:6"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 980,
								"nodeType": "StructuredDocumentation",
								"src": "408:489:6",
								"text": " @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 1121,
							"linearizedBaseContracts": [
								1121,
								1281,
								2452,
								172,
								1183,
								889,
								214,
								1147,
								967,
								1213
							],
							"name": "ERC20Permit",
							"nameLocation": "916:11:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 993,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "998:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 1121,
									"src": "973:146:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 989,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "973:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 991,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1034:84:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 990,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1024:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 992,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1024:95:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 994,
										"nodeType": "StructuredDocumentation",
										"src": "1126:52:6",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 998,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1189:23:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1221:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "1213:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 995,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1213:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1212:18:6"
									},
									"src": "1183:48:6"
								},
								{
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "1237:45:6",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 1005,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1293:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1322:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "1314:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1314:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1338:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "1330:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1330:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1313:31:6"
									},
									"src": "1287:58:6"
								},
								{
									"body": {
										"id": 1015,
										"nodeType": "Block",
										"src": "1627:2:6",
										"statements": []
									},
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "1351:221:6",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC-20 token name."
									},
									"id": 1016,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1011,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1008,
													"src": "1616:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 1012,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1622:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 1013,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1010,
												"name": "EIP712",
												"nameLocations": [
													"1609:6:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2452,
												"src": "1609:6:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1609:17:6"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1603:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "1589:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1007,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1589:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1588:20:6"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1627:0:6"
									},
									"scope": 1121,
									"src": "1577:52:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1168
									],
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "1872:483:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1037,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1034,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1886:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1035,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1892:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1886:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1036,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1025,
														"src": "1904:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1886:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1043,
												"nodeType": "IfStatement",
												"src": "1882:97:6",
												"trueBody": {
													"id": 1042,
													"nodeType": "Block",
													"src": "1914:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1039,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1025,
																		"src": "1959:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1038,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 998,
																	"src": "1935:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 1040,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1935:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1041,
															"nodeType": "RevertStatement",
															"src": "1928:40:6"
														}
													]
												}
											},
											{
												"assignments": [
													1045
												],
												"declarations": [
													{
														"constant": false,
														"id": 1045,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "1997:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1092,
														"src": "1989:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1044,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1989:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1059,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1049,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 993,
																	"src": "2031:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1050,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1019,
																	"src": "2048:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1051,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1021,
																	"src": "2055:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1052,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1023,
																	"src": "2064:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1054,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1019,
																			"src": "2081:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1053,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1255,
																		"src": "2071:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1055,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2071:16:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1056,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1025,
																	"src": "2089:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1047,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2020:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1048,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2024:6:6",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2020:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1057,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2020:78:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1046,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2010:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2010:89:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1989:110:6"
											},
											{
												"assignments": [
													1061
												],
												"declarations": [
													{
														"constant": false,
														"id": 1061,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2118:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1092,
														"src": "2110:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1060,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2110:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1065,
												"initialValue": {
													"arguments": [
														{
															"id": 1063,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "2142:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1062,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2385,
														"src": "2125:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2125:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2110:43:6"
											},
											{
												"assignments": [
													1067
												],
												"declarations": [
													{
														"constant": false,
														"id": 1067,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2172:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1092,
														"src": "2164:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1066,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2164:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1075,
												"initialValue": {
													"arguments": [
														{
															"id": 1070,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "2195:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1071,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1027,
															"src": "2201:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1072,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1029,
															"src": "2204:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1073,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1031,
															"src": "2207:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1068,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2225,
															"src": "2181:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2225_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1069,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2187:7:6",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2175,
														"src": "2181:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1074,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2181:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2164:45:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1076,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1067,
														"src": "2223:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1077,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "2233:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2223:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1085,
												"nodeType": "IfStatement",
												"src": "2219:88:6",
												"trueBody": {
													"id": 1084,
													"nodeType": "Block",
													"src": "2240:67:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1080,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1067,
																		"src": "2282:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1081,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1019,
																		"src": "2290:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1079,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1005,
																	"src": "2261:20:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 1082,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2261:35:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1083,
															"nodeType": "RevertStatement",
															"src": "2254:42:6"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1087,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1019,
															"src": "2326:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1088,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "2333:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1089,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1023,
															"src": "2342:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1086,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															780,
															840
														],
														"referencedDeclaration": 780,
														"src": "2317:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1091,
												"nodeType": "ExpressionStatement",
												"src": "2317:31:6"
											}
										]
									},
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "1635:43:6",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1692:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1716:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1708:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1739:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1731:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1731:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1764:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1756:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1787:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1779:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1811:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1805:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1026,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1805:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1830:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1822:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1028,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1822:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1849:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1841:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1030,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1841:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1698:158:6"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1872:0:6"
									},
									"scope": 1121,
									"src": "1683:672:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1176,
										1240
									],
									"body": {
										"id": 1109,
										"nodeType": "Block",
										"src": "2509:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1106,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1096,
															"src": "2539:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1104,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2526:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$1121_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 1105,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2532:6:6",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1240,
														"src": "2526:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2526:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1103,
												"id": 1108,
												"nodeType": "Return",
												"src": "2519:26:6"
											}
										]
									},
									"documentation": {
										"id": 1094,
										"nodeType": "StructuredDocumentation",
										"src": "2361:43:6",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 1110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2418:6:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1100,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1098,
												"name": "IERC20Permit",
												"nameLocations": [
													"2469:12:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1183,
												"src": "2469:12:6"
											},
											{
												"id": 1099,
												"name": "Nonces",
												"nameLocations": [
													"2483:6:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1281,
												"src": "2483:6:6"
											}
										],
										"src": "2460:30:6"
									},
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2433:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1110,
												"src": "2425:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:6"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1110,
												"src": "2500:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2500:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2499:9:6"
									},
									"scope": 1121,
									"src": "2409:143:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1182
									],
									"body": {
										"id": 1119,
										"nodeType": "Block",
										"src": "2727:44:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1116,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2348,
														"src": "2744:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2744:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1115,
												"id": 1118,
												"nodeType": "Return",
												"src": "2737:27:6"
											}
										]
									},
									"documentation": {
										"id": 1111,
										"nodeType": "StructuredDocumentation",
										"src": "2558:43:6",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2668:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2684:2:6"
									},
									"returnParameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "2718:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1113,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2718:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2717:9:6"
									},
									"scope": 1121,
									"src": "2659:112:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 1122,
							"src": "898:1875:6",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213,
								998,
								1005,
								1223,
								1295,
								1297,
								1888,
								1893,
								1898
							],
							"usedEvents": [
								152,
								901,
								910
							]
						}
					],
					"src": "122:2652:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							967
						],
						"IERC20Metadata": [
							1147
						]
					},
					"id": 1148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1123,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1125,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1148,
							"sourceUnit": 968,
							"src": "151:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1124,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 967,
										"src": "159:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1127,
										"name": "IERC20",
										"nameLocations": [
											"306:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 967,
										"src": "306:6:7"
									},
									"id": 1128,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:7"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1126,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:7",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 1147,
							"linearizedBaseContracts": [
								1147,
								967
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:7"
									},
									"returnParameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "417:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1131,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:7"
									},
									"scope": 1147,
									"src": "378:54:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1135,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:7",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:7"
									},
									"returnParameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1140,
												"src": "540:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1137,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:7"
									},
									"scope": 1147,
									"src": "499:56:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1141,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:7",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:7"
									},
									"returnParameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "674:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:7"
									},
									"scope": 1147,
									"src": "631:50:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1148,
							"src": "278:405:7",
							"usedErrors": [],
							"usedEvents": [
								901,
								910
							]
						}
					],
					"src": "125:559:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1183
						]
					},
					"id": 1184,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1150,
								"nodeType": "StructuredDocumentation",
								"src": "149:1965:8",
								"text": " @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1183,
							"linearizedBaseContracts": [
								1183
							],
							"name": "IERC20Permit",
							"nameLocation": "2125:12:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1151,
										"nodeType": "StructuredDocumentation",
										"src": "2144:850:8",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3008:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3032:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3024:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3024:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3055:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3047:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3047:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3080:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3072:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3072:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3103:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3095:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3095:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3127:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3121:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1160,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3121:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3146:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3138:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1162,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3165:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3157:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1164,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3157:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3014:158:8"
									},
									"returnParameters": {
										"id": 1167,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:0:8"
									},
									"scope": 1183,
									"src": "2999:183:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "3188:294:8",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3496:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3511:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "3503:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3503:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3502:15:8"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "3541:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3541:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:9:8"
									},
									"scope": 1183,
									"src": "3487:63:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "3556:128:8",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3751:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3767:2:8"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "3793:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1179,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3793:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3792:9:8"
									},
									"scope": 1183,
									"src": "3742:60:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1184,
							"src": "2115:1689:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3682:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1213
						]
					},
					"id": 1214,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1185,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1186,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:9",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1213,
							"linearizedBaseContracts": [
								1213
							],
							"name": "Context",
							"nameLocation": "642:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "718:34:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1191,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:9",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1190,
												"id": 1193,
												"nodeType": "Return",
												"src": "728:17:9"
											}
										]
									},
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:9"
									},
									"returnParameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "709:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:9"
									},
									"scope": 1213,
									"src": "656:96:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1203,
										"nodeType": "Block",
										"src": "825:32:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1200,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:9",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1199,
												"id": 1202,
												"nodeType": "Return",
												"src": "835:15:9"
											}
										]
									},
									"id": 1204,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:9"
									},
									"returnParameters": {
										"id": 1199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "809:14:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:9"
									},
									"scope": 1213,
									"src": "758:99:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1211,
										"nodeType": "Block",
										"src": "935:25:9",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1208,
												"id": 1210,
												"nodeType": "Return",
												"src": "945:8:9"
											}
										]
									},
									"id": 1212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1205,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:9"
									},
									"returnParameters": {
										"id": 1208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "926:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1206,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:9"
									},
									"scope": 1213,
									"src": "863:97:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1214,
							"src": "624:338:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							1281
						]
					},
					"id": 1282,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1215,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1216,
								"nodeType": "StructuredDocumentation",
								"src": "125:83:10",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1281,
							"linearizedBaseContracts": [
								1281
							],
							"name": "Nonces",
							"nameLocation": "227:6:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1217,
										"nodeType": "StructuredDocumentation",
										"src": "240:90:10",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1223,
									"name": "InvalidAccountNonce",
									"nameLocation": "341:19:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1219,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "369:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "361:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "386:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "378:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:39:10"
									},
									"src": "335:65:10"
								},
								{
									"constant": false,
									"id": 1227,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "450:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1281,
									"src": "406:51:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1226,
										"keyName": "account",
										"keyNameLocation": "422:7:10",
										"keyType": {
											"id": 1224,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "414:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "406:35:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1225,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "433:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1239,
										"nodeType": "Block",
										"src": "607:38:10",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1235,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1227,
														"src": "624:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1237,
													"indexExpression": {
														"id": 1236,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1230,
														"src": "632:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "624:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1234,
												"id": 1238,
												"nodeType": "Return",
												"src": "617:21:10"
											}
										]
									},
									"documentation": {
										"id": 1228,
										"nodeType": "StructuredDocumentation",
										"src": "464:69:10",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "547:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "562:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "554:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "554:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:15:10"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "598:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:9:10"
									},
									"scope": 1281,
									"src": "538:107:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "828:326:10",
										"statements": [
											{
												"id": 1253,
												"nodeType": "UncheckedBlock",
												"src": "1031:117:10",
												"statements": [
													{
														"expression": {
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1121:16:10",
															"subExpression": {
																"baseExpression": {
																	"id": 1248,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1227,
																	"src": "1121:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1250,
																"indexExpression": {
																	"id": 1249,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1243,
																	"src": "1129:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1121:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1247,
														"id": 1252,
														"nodeType": "Return",
														"src": "1114:23:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "651:103:10",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "768:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "786:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "778:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:15:10"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "819:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:10"
									},
									"scope": 1281,
									"src": "759:395:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1279,
										"nodeType": "Block",
										"src": "1338:149:10",
										"statements": [
											{
												"assignments": [
													1264
												],
												"declarations": [
													{
														"constant": false,
														"id": 1264,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1356:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1279,
														"src": "1348:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1263,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1348:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1268,
												"initialValue": {
													"arguments": [
														{
															"id": 1266,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1258,
															"src": "1376:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1265,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "1366:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:16:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1348:34:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1269,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1260,
														"src": "1396:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1270,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1264,
														"src": "1405:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1278,
												"nodeType": "IfStatement",
												"src": "1392:89:10",
												"trueBody": {
													"id": 1277,
													"nodeType": "Block",
													"src": "1414:67:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1273,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1258,
																		"src": "1455:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1274,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1264,
																		"src": "1462:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1272,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1223,
																	"src": "1435:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256) pure returns (error)"
																	}
																},
																"id": 1275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:35:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1276,
															"nodeType": "RevertStatement",
															"src": "1428:42:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "1160:100:10",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1280,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1274:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1299:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1280,
												"src": "1291:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1291:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1314:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1280,
												"src": "1306:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1290:30:10"
									},
									"returnParameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:0:10"
									},
									"scope": 1281,
									"src": "1265:222:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1282,
							"src": "209:1280:10",
							"usedErrors": [
								1223
							],
							"usedEvents": []
						}
					],
					"src": "99:1391:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1287
						],
						"ShortStrings": [
							1498
						],
						"StorageSlot": [
							1622
						]
					},
					"id": 1499,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1283,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 1623,
							"src": "132:46:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1284,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1622,
										"src": "140:11:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1287,
							"name": "ShortString",
							"nameLocation": "353:11:11",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "348:28:11",
							"underlyingType": {
								"id": 1286,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "368:7:11",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1288,
								"nodeType": "StructuredDocumentation",
								"src": "378:876:11",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1498,
							"linearizedBaseContracts": [
								1498
							],
							"name": "ShortStrings",
							"nameLocation": "1263:12:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1291,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1370:17:11",
									"nodeType": "VariableDeclaration",
									"scope": 1498,
									"src": "1345:111:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1289,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1345:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1290,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1390:66:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1295,
									"name": "StringTooLong",
									"nameLocation": "1469:13:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1490:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1483:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1292,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1483:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:12:11"
									},
									"src": "1463:32:11"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1297,
									"name": "InvalidShortString",
									"nameLocation": "1506:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1524:2:11"
									},
									"src": "1500:27:11"
								},
								{
									"body": {
										"id": 1340,
										"nodeType": "Block",
										"src": "1786:208:11",
										"statements": [
											{
												"assignments": [
													1307
												],
												"declarations": [
													{
														"constant": false,
														"id": 1307,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1809:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 1340,
														"src": "1796:17:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1306,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1796:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1312,
												"initialValue": {
													"arguments": [
														{
															"id": 1310,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "1822:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1309,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1816:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1308,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1816:5:11",
															"typeDescriptions": {}
														}
													},
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1816:10:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1796:30:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1313,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1307,
															"src": "1840:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1314,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1845:6:11",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1840:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1315,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1854:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1840:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1322,
												"nodeType": "IfStatement",
												"src": "1836:72:11",
												"trueBody": {
													"id": 1321,
													"nodeType": "Block",
													"src": "1858:50:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1318,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "1893:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1317,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1295,
																	"src": "1879:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (string memory) pure returns (error)"
																	}
																},
																"id": 1319,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:18:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1320,
															"nodeType": "RevertStatement",
															"src": "1872:25:11"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1331,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1307,
																						"src": "1965:4:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1330,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1957:7:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1329,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1957:7:11",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1332,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1957:13:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1328,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1949:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1327,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1949:7:11",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1333,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1949:22:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1334,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1307,
																			"src": "1974:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1335,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1979:6:11",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1974:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1949:36:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1941:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1325,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1941:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1941:45:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1323,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1287,
															"src": "1924:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1287_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1324,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1936:4:11",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1924:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1287_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1924:63:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1305,
												"id": 1339,
												"nodeType": "Return",
												"src": "1917:70:11"
											}
										]
									},
									"documentation": {
										"id": 1298,
										"nodeType": "StructuredDocumentation",
										"src": "1533:170:11",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1717:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1745:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "1731:17:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1299,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:19:11"
									},
									"returnParameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "1773:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1303,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1302,
														"name": "ShortString",
														"nameLocations": [
															"1773:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1287,
														"src": "1773:11:11"
													},
													"referencedDeclaration": 1287,
													"src": "1773:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:13:11"
									},
									"scope": 1498,
									"src": "1708:286:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1366,
										"nodeType": "Block",
										"src": "2152:304:11",
										"statements": [
											{
												"assignments": [
													1351
												],
												"declarations": [
													{
														"constant": false,
														"id": 1351,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2170:3:11",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "2162:11:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1350,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2162:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1355,
												"initialValue": {
													"arguments": [
														{
															"id": 1353,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1345,
															"src": "2187:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																"typeString": "ShortString"
															}
														],
														"id": 1352,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1399,
														"src": "2176:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1287_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:16:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2162:30:11"
											},
											{
												"assignments": [
													1357
												],
												"declarations": [
													{
														"constant": false,
														"id": 1357,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2294:3:11",
														"nodeType": "VariableDeclaration",
														"scope": 1366,
														"src": "2280:17:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1356,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2280:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1362,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1360,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2311:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1359,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2300:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1358,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2304:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1361,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2280:34:11"
											},
											{
												"AST": {
													"nativeSrc": "2349:81:11",
													"nodeType": "YulBlock",
													"src": "2349:81:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nativeSrc": "2370:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2370:3:11"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "2375:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2375:3:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2363:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2363:6:11"
																},
																"nativeSrc": "2363:16:11",
																"nodeType": "YulFunctionCall",
																"src": "2363:16:11"
															},
															"nativeSrc": "2363:16:11",
															"nodeType": "YulExpressionStatement",
															"src": "2363:16:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nativeSrc": "2403:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "2403:3:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2408:4:11",
																				"nodeType": "YulLiteral",
																				"src": "2408:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2399:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2399:3:11"
																		},
																		"nativeSrc": "2399:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2399:14:11"
																	},
																	{
																		"name": "sstr",
																		"nativeSrc": "2415:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "2415:4:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2392:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2392:6:11"
																},
																"nativeSrc": "2392:28:11",
																"nodeType": "YulFunctionCall",
																"src": "2392:28:11"
															},
															"nativeSrc": "2392:28:11",
															"nodeType": "YulExpressionStatement",
															"src": "2392:28:11"
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1351,
														"isOffset": false,
														"isSlot": false,
														"src": "2375:3:11",
														"valueSize": 1
													},
													{
														"declaration": 1345,
														"isOffset": false,
														"isSlot": false,
														"src": "2415:4:11",
														"valueSize": 1
													},
													{
														"declaration": 1357,
														"isOffset": false,
														"isSlot": false,
														"src": "2370:3:11",
														"valueSize": 1
													},
													{
														"declaration": 1357,
														"isOffset": false,
														"isSlot": false,
														"src": "2403:3:11",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1363,
												"nodeType": "InlineAssembly",
												"src": "2324:106:11"
											},
											{
												"expression": {
													"id": 1364,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1357,
													"src": "2446:3:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1349,
												"id": 1365,
												"nodeType": "Return",
												"src": "2439:10:11"
											}
										]
									},
									"documentation": {
										"id": 1342,
										"nodeType": "StructuredDocumentation",
										"src": "2000:73:11",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2087:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2108:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "2096:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1344,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1343,
														"name": "ShortString",
														"nameLocations": [
															"2096:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1287,
														"src": "2096:11:11"
													},
													"referencedDeclaration": 1287,
													"src": "2096:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:18:11"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "2137:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1347,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2137:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:15:11"
									},
									"scope": 1498,
									"src": "2078:378:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1398,
										"nodeType": "Block",
										"src": "2598:175:11",
										"statements": [
											{
												"assignments": [
													1377
												],
												"declarations": [
													{
														"constant": false,
														"id": 1377,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2616:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1398,
														"src": "2608:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1376,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2608:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1387,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1382,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1371,
																		"src": "2652:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1380,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1287,
																		"src": "2633:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1287_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2645:6:11",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2633:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1287_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2633:24:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2625:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1378,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2625:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1384,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2625:33:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1385,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2661:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2625:40:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2608:57:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1388,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1377,
														"src": "2679:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2679:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1395,
												"nodeType": "IfStatement",
												"src": "2675:69:11",
												"trueBody": {
													"id": 1394,
													"nodeType": "Block",
													"src": "2692:52:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1391,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1297,
																	"src": "2713:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2713:20:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1393,
															"nodeType": "RevertStatement",
															"src": "2706:27:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1396,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1377,
													"src": "2760:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1375,
												"id": 1397,
												"nodeType": "Return",
												"src": "2753:13:11"
											}
										]
									},
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "2462:61:11",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1399,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2537:10:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2560:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "2548:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1370,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1369,
														"name": "ShortString",
														"nameLocations": [
															"2548:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1287,
														"src": "2548:11:11"
													},
													"referencedDeclaration": 1287,
													"src": "2548:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2547:18:11"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "2589:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2589:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2588:9:11"
									},
									"scope": 1498,
									"src": "2528:245:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1438,
										"nodeType": "Block",
										"src": "2996:231:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1412,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1402,
																	"src": "3016:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1411,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3010:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1410,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3010:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3010:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1414,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3023:6:11",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3010:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1415,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3032:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3010:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1436,
													"nodeType": "Block",
													"src": "3094:127:11",
													"statements": [
														{
															"expression": {
																"id": 1429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1425,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1404,
																				"src": "3134:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1422,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1622,
																				"src": "3108:11:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1622_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3120:13:11",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1599,
																			"src": "3108:25:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1519_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1426,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3108:32:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1519_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1427,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3141:5:11",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1518,
																	"src": "3108:38:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1428,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1402,
																	"src": "3149:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3108:46:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1430,
															"nodeType": "ExpressionStatement",
															"src": "3108:46:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1433,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1291,
																		"src": "3192:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1431,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1287,
																		"src": "3175:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1287_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1432,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3187:4:11",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3175:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1287_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1434,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3175:35:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1409,
															"id": 1435,
															"nodeType": "Return",
															"src": "3168:42:11"
														}
													]
												},
												"id": 1437,
												"nodeType": "IfStatement",
												"src": "3006:215:11",
												"trueBody": {
													"id": 1421,
													"nodeType": "Block",
													"src": "3036:52:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1418,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1402,
																		"src": "3071:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1417,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1341,
																	"src": "3057:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1287_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1419,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3057:20:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1409,
															"id": 1420,
															"nodeType": "Return",
															"src": "3050:27:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1400,
										"nodeType": "StructuredDocumentation",
										"src": "2779:103:11",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1439,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2896:25:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1402,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2936:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "2922:19:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1401,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2922:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2958:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "2943:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1403,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2943:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2921:43:11"
									},
									"returnParameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1439,
												"src": "2983:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1407,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1406,
														"name": "ShortString",
														"nameLocations": [
															"2983:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1287,
														"src": "2983:11:11"
													},
													"referencedDeclaration": 1287,
													"src": "2983:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2982:13:11"
									},
									"scope": 1498,
									"src": "2887:340:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1465,
										"nodeType": "Block",
										"src": "3467:158:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1452,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1443,
																"src": "3500:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1450,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1287,
																"src": "3481:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1287_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1451,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3493:6:11",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3481:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1287_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3481:25:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1454,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "3510:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3481:46:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1463,
													"nodeType": "Block",
													"src": "3582:37:11",
													"statements": [
														{
															"expression": {
																"id": 1461,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1445,
																"src": "3603:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1449,
															"id": 1462,
															"nodeType": "Return",
															"src": "3596:12:11"
														}
													]
												},
												"id": 1464,
												"nodeType": "IfStatement",
												"src": "3477:142:11",
												"trueBody": {
													"id": 1460,
													"nodeType": "Block",
													"src": "3529:47:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1457,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1443,
																		"src": "3559:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1456,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1367,
																	"src": "3550:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1287_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1458,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3550:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1449,
															"id": 1459,
															"nodeType": "Return",
															"src": "3543:22:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1440,
										"nodeType": "StructuredDocumentation",
										"src": "3233:120:11",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3367:20:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3400:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1466,
												"src": "3388:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1442,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1441,
														"name": "ShortString",
														"nameLocations": [
															"3388:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1287,
														"src": "3388:11:11"
													},
													"referencedDeclaration": 1287,
													"src": "3388:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3422:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1466,
												"src": "3407:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1444,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3407:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3387:41:11"
									},
									"returnParameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1466,
												"src": "3452:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1447,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3452:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3451:15:11"
									},
									"scope": 1498,
									"src": "3358:267:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "4105:174:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1479,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1470,
																"src": "4138:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1477,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1287,
																"src": "4119:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1287_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1478,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4131:6:11",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4119:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1287_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4119:25:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1481,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "4148:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4119:46:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1494,
													"nodeType": "Block",
													"src": "4222:51:11",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1490,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1472,
																			"src": "4249:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4243:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1488,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4243:5:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4243:12:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4256:6:11",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4243:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1476,
															"id": 1493,
															"nodeType": "Return",
															"src": "4236:26:11"
														}
													]
												},
												"id": 1495,
												"nodeType": "IfStatement",
												"src": "4115:158:11",
												"trueBody": {
													"id": 1487,
													"nodeType": "Block",
													"src": "4167:49:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1484,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1470,
																		"src": "4199:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1483,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1399,
																	"src": "4188:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1287_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1485,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4188:17:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1476,
															"id": 1486,
															"nodeType": "Return",
															"src": "4181:24:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1467,
										"nodeType": "StructuredDocumentation",
										"src": "3631:364:11",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4009:22:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4044:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "4032:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1469,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1468,
														"name": "ShortString",
														"nameLocations": [
															"4032:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1287,
														"src": "4032:11:11"
													},
													"referencedDeclaration": 1287,
													"src": "4032:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4066:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "4051:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1471,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4051:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4031:41:11"
									},
									"returnParameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "4096:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4096:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4095:9:11"
									},
									"scope": 1498,
									"src": "4000:279:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1499,
							"src": "1255:3026:11",
							"usedErrors": [
								1295,
								1297
							],
							"usedEvents": []
						}
					],
					"src": "106:4176:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1622
						]
					},
					"id": 1623,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1500,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "193:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1501,
								"nodeType": "StructuredDocumentation",
								"src": "219:1187:12",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."
							},
							"fullyImplemented": true,
							"id": 1622,
							"linearizedBaseContracts": [
								1622
							],
							"name": "StorageSlot",
							"nameLocation": "1415:11:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1504,
									"members": [
										{
											"constant": false,
											"id": 1503,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1470:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1504,
											"src": "1462:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1502,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1462:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1440:11:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1433:49:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1507,
									"members": [
										{
											"constant": false,
											"id": 1506,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1522:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1507,
											"src": "1517:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1505,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1517:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1495:11:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1488:46:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1510,
									"members": [
										{
											"constant": false,
											"id": 1509,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1577:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1510,
											"src": "1569:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1508,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1569:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1547:11:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1540:49:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1513,
									"members": [
										{
											"constant": false,
											"id": 1512,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1632:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "1624:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1511,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1624:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1602:11:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1595:49:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Int256Slot",
									"id": 1516,
									"members": [
										{
											"constant": false,
											"id": 1515,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1685:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1516,
											"src": "1678:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int256",
												"typeString": "int256"
											},
											"typeName": {
												"id": 1514,
												"name": "int256",
												"nodeType": "ElementaryTypeName",
												"src": "1678:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Int256Slot",
									"nameLocation": "1657:10:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1650:47:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1519,
									"members": [
										{
											"constant": false,
											"id": 1518,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1738:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1519,
											"src": "1731:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1517,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1731:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1710:10:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1703:47:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1522,
									"members": [
										{
											"constant": false,
											"id": 1521,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1789:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1522,
											"src": "1783:11:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1520,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1783:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1763:9:12",
									"nodeType": "StructDefinition",
									"scope": 1622,
									"src": "1756:45:12",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1532,
										"nodeType": "Block",
										"src": "1983:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2018:38:12",
													"nodeType": "YulBlock",
													"src": "2018:38:12",
													"statements": [
														{
															"nativeSrc": "2032:14:12",
															"nodeType": "YulAssignment",
															"src": "2032:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2042:4:12",
																"nodeType": "YulIdentifier",
																"src": "2042:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2032:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2032:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1529,
														"isOffset": false,
														"isSlot": true,
														"src": "2032:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1525,
														"isOffset": false,
														"isSlot": false,
														"src": "2042:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1531,
												"nodeType": "InlineAssembly",
												"src": "1993:63:12"
											}
										]
									},
									"documentation": {
										"id": 1523,
										"nodeType": "StructuredDocumentation",
										"src": "1807:87:12",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1908:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1525,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1931:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "1923:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1524,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1923:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1922:14:12"
									},
									"returnParameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1980:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "1960:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1504_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1528,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1527,
														"name": "AddressSlot",
														"nameLocations": [
															"1960:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1504,
														"src": "1960:11:12"
													},
													"referencedDeclaration": 1504,
													"src": "1960:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1504_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1959:23:12"
									},
									"scope": 1622,
									"src": "1899:163:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1543,
										"nodeType": "Block",
										"src": "2243:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2278:38:12",
													"nodeType": "YulBlock",
													"src": "2278:38:12",
													"statements": [
														{
															"nativeSrc": "2292:14:12",
															"nodeType": "YulAssignment",
															"src": "2292:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2302:4:12",
																"nodeType": "YulIdentifier",
																"src": "2302:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2292:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2292:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1540,
														"isOffset": false,
														"isSlot": true,
														"src": "2292:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1536,
														"isOffset": false,
														"isSlot": false,
														"src": "2302:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1542,
												"nodeType": "InlineAssembly",
												"src": "2253:63:12"
											}
										]
									},
									"documentation": {
										"id": 1534,
										"nodeType": "StructuredDocumentation",
										"src": "2068:86:12",
										"text": " @dev Returns a `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1544,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "2168:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2191:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "2183:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1535,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:14:12"
									},
									"returnParameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2240:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "2220:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1507_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1538,
														"name": "BooleanSlot",
														"nameLocations": [
															"2220:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1507,
														"src": "2220:11:12"
													},
													"referencedDeclaration": 1507,
													"src": "2220:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1507_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2219:23:12"
									},
									"scope": 1622,
									"src": "2159:163:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1554,
										"nodeType": "Block",
										"src": "2503:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2538:38:12",
													"nodeType": "YulBlock",
													"src": "2538:38:12",
													"statements": [
														{
															"nativeSrc": "2552:14:12",
															"nodeType": "YulAssignment",
															"src": "2552:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2562:4:12",
																"nodeType": "YulIdentifier",
																"src": "2562:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2552:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2552:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1551,
														"isOffset": false,
														"isSlot": true,
														"src": "2552:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1547,
														"isOffset": false,
														"isSlot": false,
														"src": "2562:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1553,
												"nodeType": "InlineAssembly",
												"src": "2513:63:12"
											}
										]
									},
									"documentation": {
										"id": 1545,
										"nodeType": "StructuredDocumentation",
										"src": "2328:86:12",
										"text": " @dev Returns a `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2428:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2451:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "2443:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1546,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2443:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2442:14:12"
									},
									"returnParameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2500:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "2480:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1510_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1550,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1549,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2480:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1510,
														"src": "2480:11:12"
													},
													"referencedDeclaration": 1510,
													"src": "2480:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1510_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2479:23:12"
									},
									"scope": 1622,
									"src": "2419:163:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "2763:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2798:38:12",
													"nodeType": "YulBlock",
													"src": "2798:38:12",
													"statements": [
														{
															"nativeSrc": "2812:14:12",
															"nodeType": "YulAssignment",
															"src": "2812:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2822:4:12",
																"nodeType": "YulIdentifier",
																"src": "2822:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2812:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2812:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1562,
														"isOffset": false,
														"isSlot": true,
														"src": "2812:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1558,
														"isOffset": false,
														"isSlot": false,
														"src": "2822:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1564,
												"nodeType": "InlineAssembly",
												"src": "2773:63:12"
											}
										]
									},
									"documentation": {
										"id": 1556,
										"nodeType": "StructuredDocumentation",
										"src": "2588:86:12",
										"text": " @dev Returns a `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2688:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2711:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "2703:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1557,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2702:14:12"
									},
									"returnParameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2760:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "2740:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1513_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1561,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1560,
														"name": "Uint256Slot",
														"nameLocations": [
															"2740:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1513,
														"src": "2740:11:12"
													},
													"referencedDeclaration": 1513,
													"src": "2740:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1513_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2739:23:12"
									},
									"scope": 1622,
									"src": "2679:163:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1576,
										"nodeType": "Block",
										"src": "3020:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3055:38:12",
													"nodeType": "YulBlock",
													"src": "3055:38:12",
													"statements": [
														{
															"nativeSrc": "3069:14:12",
															"nodeType": "YulAssignment",
															"src": "3069:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "3079:4:12",
																"nodeType": "YulIdentifier",
																"src": "3079:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3069:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3069:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1573,
														"isOffset": false,
														"isSlot": true,
														"src": "3069:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1569,
														"isOffset": false,
														"isSlot": false,
														"src": "3079:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1575,
												"nodeType": "InlineAssembly",
												"src": "3030:63:12"
											}
										]
									},
									"documentation": {
										"id": 1567,
										"nodeType": "StructuredDocumentation",
										"src": "2848:85:12",
										"text": " @dev Returns a `Int256Slot` with member `value` located at `slot`."
									},
									"id": 1577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getInt256Slot",
									"nameLocation": "2947:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2969:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "2961:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1568,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2961:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2960:14:12"
									},
									"returnParameters": {
										"id": 1574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1573,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3017:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "2998:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Int256Slot_$1516_storage_ptr",
													"typeString": "struct StorageSlot.Int256Slot"
												},
												"typeName": {
													"id": 1572,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1571,
														"name": "Int256Slot",
														"nameLocations": [
															"2998:10:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1516,
														"src": "2998:10:12"
													},
													"referencedDeclaration": 1516,
													"src": "2998:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Int256Slot_$1516_storage_ptr",
														"typeString": "struct StorageSlot.Int256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2997:22:12"
									},
									"scope": 1622,
									"src": "2938:161:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1587,
										"nodeType": "Block",
										"src": "3277:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3312:38:12",
													"nodeType": "YulBlock",
													"src": "3312:38:12",
													"statements": [
														{
															"nativeSrc": "3326:14:12",
															"nodeType": "YulAssignment",
															"src": "3326:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "3336:4:12",
																"nodeType": "YulIdentifier",
																"src": "3336:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3326:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3326:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1584,
														"isOffset": false,
														"isSlot": true,
														"src": "3326:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1580,
														"isOffset": false,
														"isSlot": false,
														"src": "3336:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1586,
												"nodeType": "InlineAssembly",
												"src": "3287:63:12"
											}
										]
									},
									"documentation": {
										"id": 1578,
										"nodeType": "StructuredDocumentation",
										"src": "3105:85:12",
										"text": " @dev Returns a `StringSlot` with member `value` located at `slot`."
									},
									"id": 1588,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3204:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3226:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "3218:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1579,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3218:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3217:14:12"
									},
									"returnParameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3274:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "3255:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1519_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1583,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1582,
														"name": "StringSlot",
														"nameLocations": [
															"3255:10:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1519,
														"src": "3255:10:12"
													},
													"referencedDeclaration": 1519,
													"src": "3255:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1519_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3254:22:12"
									},
									"scope": 1622,
									"src": "3195:161:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1598,
										"nodeType": "Block",
										"src": "3558:85:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3593:44:12",
													"nodeType": "YulBlock",
													"src": "3593:44:12",
													"statements": [
														{
															"nativeSrc": "3607:20:12",
															"nodeType": "YulAssignment",
															"src": "3607:20:12",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3617:10:12",
																"nodeType": "YulIdentifier",
																"src": "3617:10:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3607:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3607:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1595,
														"isOffset": false,
														"isSlot": true,
														"src": "3607:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1591,
														"isOffset": false,
														"isSlot": true,
														"src": "3617:10:12",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1597,
												"nodeType": "InlineAssembly",
												"src": "3568:69:12"
											}
										]
									},
									"documentation": {
										"id": 1589,
										"nodeType": "StructuredDocumentation",
										"src": "3362:101:12",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3477:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3506:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "3491:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1590,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3491:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3490:22:12"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3555:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "3536:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1519_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1594,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1593,
														"name": "StringSlot",
														"nameLocations": [
															"3536:10:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1519,
														"src": "3536:10:12"
													},
													"referencedDeclaration": 1519,
													"src": "3536:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1519_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3535:22:12"
									},
									"scope": 1622,
									"src": "3468:175:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1609,
										"nodeType": "Block",
										"src": "3818:79:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3853:38:12",
													"nodeType": "YulBlock",
													"src": "3853:38:12",
													"statements": [
														{
															"nativeSrc": "3867:14:12",
															"nodeType": "YulAssignment",
															"src": "3867:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "3877:4:12",
																"nodeType": "YulIdentifier",
																"src": "3877:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3867:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3867:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1606,
														"isOffset": false,
														"isSlot": true,
														"src": "3867:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1602,
														"isOffset": false,
														"isSlot": false,
														"src": "3877:4:12",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1608,
												"nodeType": "InlineAssembly",
												"src": "3828:63:12"
											}
										]
									},
									"documentation": {
										"id": 1600,
										"nodeType": "StructuredDocumentation",
										"src": "3649:84:12",
										"text": " @dev Returns a `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1610,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3747:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3768:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1610,
												"src": "3760:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1601,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:14:12"
									},
									"returnParameters": {
										"id": 1607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1606,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3815:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1610,
												"src": "3797:19:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1522_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1605,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1604,
														"name": "BytesSlot",
														"nameLocations": [
															"3797:9:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1522,
														"src": "3797:9:12"
													},
													"referencedDeclaration": 1522,
													"src": "3797:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1522_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:21:12"
									},
									"scope": 1622,
									"src": "3738:159:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1620,
										"nodeType": "Block",
										"src": "4094:85:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "4129:44:12",
													"nodeType": "YulBlock",
													"src": "4129:44:12",
													"statements": [
														{
															"nativeSrc": "4143:20:12",
															"nodeType": "YulAssignment",
															"src": "4143:20:12",
															"value": {
																"name": "store.slot",
																"nativeSrc": "4153:10:12",
																"nodeType": "YulIdentifier",
																"src": "4153:10:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "4143:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "4143:6:12"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1617,
														"isOffset": false,
														"isSlot": true,
														"src": "4143:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1613,
														"isOffset": false,
														"isSlot": true,
														"src": "4153:10:12",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1619,
												"nodeType": "InlineAssembly",
												"src": "4104:69:12"
											}
										]
									},
									"documentation": {
										"id": 1611,
										"nodeType": "StructuredDocumentation",
										"src": "3903:99:12",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "4016:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4043:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "4029:19:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4029:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4028:21:12"
									},
									"returnParameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4091:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "4073:19:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1522_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1616,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1615,
														"name": "BytesSlot",
														"nameLocations": [
															"4073:9:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1522,
														"src": "4073:9:12"
													},
													"referencedDeclaration": 1522,
													"src": "4073:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1522_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4072:21:12"
									},
									"scope": 1622,
									"src": "4007:172:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1623,
							"src": "1407:2774:12",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "193:3989:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3580
						],
						"SignedMath": [
							3685
						],
						"Strings": [
							1877
						]
					},
					"id": 1878,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1624,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1626,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1878,
							"sourceUnit": 3581,
							"src": "127:37:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1625,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3580,
										"src": "135:4:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1628,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1878,
							"sourceUnit": 3686,
							"src": "165:49:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1627,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3685,
										"src": "173:10:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1629,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:13",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1877,
							"linearizedBaseContracts": [
								1877
							],
							"name": "Strings",
							"nameLocation": "259:7:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1632,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:13",
									"nodeType": "VariableDeclaration",
									"scope": 1877,
									"src": "273:56:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1630,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1631,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:13",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1635,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 1877,
									"src": "335:42:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1633,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1634,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:13",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1636,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:13",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1642,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1642,
												"src": "505:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1642,
												"src": "520:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:13"
									},
									"src": "470:66:13"
								},
								{
									"body": {
										"id": 1689,
										"nodeType": "Block",
										"src": "708:627:13",
										"statements": [
											{
												"id": 1688,
												"nodeType": "UncheckedBlock",
												"src": "718:611:13",
												"statements": [
													{
														"assignments": [
															1651
														],
														"declarations": [
															{
																"constant": false,
																"id": 1651,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:13",
																"nodeType": "VariableDeclaration",
																"scope": 1688,
																"src": "742:14:13",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1650,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1658,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1657,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1654,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1645,
																		"src": "770:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1652,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3580,
																		"src": "759:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3580_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1653,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:13",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3400,
																	"src": "759:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:13"
													},
													{
														"assignments": [
															1660
														],
														"declarations": [
															{
																"constant": false,
																"id": 1660,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:13",
																"nodeType": "VariableDeclaration",
																"scope": 1688,
																"src": "794:20:13",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1659,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1665,
														"initialValue": {
															"arguments": [
																{
																	"id": 1663,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1651,
																	"src": "828:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1661,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1664,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:13"
													},
													{
														"assignments": [
															1667
														],
														"declarations": [
															{
																"constant": false,
																"id": 1667,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:13",
																"nodeType": "VariableDeclaration",
																"scope": 1688,
																"src": "849:11:13",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1666,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1668,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:13"
													},
													{
														"AST": {
															"nativeSrc": "930:67:13",
															"nodeType": "YulBlock",
															"src": "930:67:13",
															"statements": [
																{
																	"nativeSrc": "948:35:13",
																	"nodeType": "YulAssignment",
																	"src": "948:35:13",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "959:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "971:2:13",
																						"nodeType": "YulLiteral",
																						"src": "971:2:13",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "975:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "967:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:13"
																				},
																				"nativeSrc": "967:15:13",
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "955:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:13"
																		},
																		"nativeSrc": "955:28:13",
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:13"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "948:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:13"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1660,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:13",
																"valueSize": 1
															},
															{
																"declaration": 1651,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:13",
																"valueSize": 1
															},
															{
																"declaration": 1667,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:13",
																"valueSize": 1
															}
														],
														"id": 1669,
														"nodeType": "InlineAssembly",
														"src": "921:76:13"
													},
													{
														"body": {
															"id": 1684,
															"nodeType": "Block",
															"src": "1023:269:13",
															"statements": [
																{
																	"expression": {
																		"id": 1672,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:13",
																		"subExpression": {
																			"id": 1671,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1667,
																			"src": "1041:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1673,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:13"
																},
																{
																	"AST": {
																		"nativeSrc": "1124:86:13",
																		"nodeType": "YulBlock",
																		"src": "1124:86:13",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1154:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:13"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1168:5:13",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:13"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1175:2:13",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:13",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1164:3:13",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:13"
																									},
																									"nativeSrc": "1164:14:13",
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:13"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1180:10:13",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:13"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1159:4:13",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:13"
																							},
																							"nativeSrc": "1159:32:13",
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:13"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1146:7:13",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:13"
																					},
																					"nativeSrc": "1146:46:13",
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:13"
																				},
																				"nativeSrc": "1146:46:13",
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:13"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "cancun",
																	"externalReferences": [
																		{
																			"declaration": 1632,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:13",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1667,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:13",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1645,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:13",
																			"valueSize": 1
																		}
																	],
																	"id": 1674,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:13"
																},
																{
																	"expression": {
																		"id": 1677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1675,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1645,
																			"src": "1227:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1676,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1678,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:13"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1679,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1645,
																			"src": "1260:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1683,
																	"nodeType": "IfStatement",
																	"src": "1256:21:13",
																	"trueBody": {
																		"id": 1682,
																		"nodeType": "Break",
																		"src": "1272:5:13"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1685,
														"nodeType": "WhileStatement",
														"src": "1010:282:13"
													},
													{
														"expression": {
															"id": 1686,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1660,
															"src": "1312:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1649,
														"id": 1687,
														"nodeType": "Return",
														"src": "1305:13:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1643,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:13",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "655:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:13"
									},
									"returnParameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "693:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1647,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:13"
									},
									"scope": 1877,
									"src": "637:698:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1715,
										"nodeType": "Block",
										"src": "1511:92:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1701,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1693,
																	"src": "1542:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:13",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1704,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1710,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1693,
																			"src": "1588:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1708,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3685,
																			"src": "1573:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3685_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:13",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3684,
																		"src": "1573:14:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1711,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1707,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1690,
																"src": "1564:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1712,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1699,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1698,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:13",
																"typeDescriptions": {}
															}
														},
														"id": 1700,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:13",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1697,
												"id": 1714,
												"nodeType": "Return",
												"src": "1521:75:13"
											}
										]
									},
									"documentation": {
										"id": 1691,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:13",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "1459:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1692,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:13"
									},
									"returnParameters": {
										"id": 1697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "1496:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1695,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:13"
									},
									"scope": 1877,
									"src": "1435:168:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1735,
										"nodeType": "Block",
										"src": "1782:100:13",
										"statements": [
											{
												"id": 1734,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:13",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1725,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1719,
																	"src": "1835:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1731,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1728,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1719,
																				"src": "1854:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1726,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3580,
																				"src": "1842:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3580_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1727,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:13",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3522,
																			"src": "1842:11:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1729,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1730,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1724,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1736,
																	1819,
																	1839
																],
																"referencedDeclaration": 1819,
																"src": "1823:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1732,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1723,
														"id": 1733,
														"nodeType": "Return",
														"src": "1816:49:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1717,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:13",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1736,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "1729:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:13"
									},
									"returnParameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "1767:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1721,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:13"
									},
									"scope": 1877,
									"src": "1708:174:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1818,
										"nodeType": "Block",
										"src": "2095:435:13",
										"statements": [
											{
												"assignments": [
													1747
												],
												"declarations": [
													{
														"constant": false,
														"id": 1747,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 1818,
														"src": "2105:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1746,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1749,
												"initialValue": {
													"id": 1748,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1739,
													"src": "2126:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:13"
											},
											{
												"assignments": [
													1751
												],
												"declarations": [
													{
														"constant": false,
														"id": 1751,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 1818,
														"src": "2141:19:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1750,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1760,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1756,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1755,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1741,
																	"src": "2177:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1757,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1753,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1752,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:13"
											},
											{
												"expression": {
													"id": 1765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1761,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "2198:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1763,
														"indexExpression": {
															"hexValue": "30",
															"id": 1762,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1764,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1766,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:13"
											},
											{
												"expression": {
													"id": 1771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1767,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "2223:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1769,
														"indexExpression": {
															"hexValue": "31",
															"id": 1768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1770,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1772,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:13"
											},
											{
												"body": {
													"id": 1801,
													"nodeType": "Block",
													"src": "2293:95:13",
													"statements": [
														{
															"expression": {
																"id": 1795,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1787,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1751,
																		"src": "2307:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1789,
																	"indexExpression": {
																		"id": 1788,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1774,
																		"src": "2314:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1790,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1632,
																		"src": "2319:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1794,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1793,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1791,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1747,
																			"src": "2330:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1792,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1796,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:13"
														},
														{
															"expression": {
																"id": 1799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1797,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1747,
																	"src": "2361:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1798,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1800,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:13"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1781,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1774,
														"src": "2281:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1782,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1802,
												"initializationExpression": {
													"assignments": [
														1774
													],
													"declarations": [
														{
															"constant": false,
															"id": 1774,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:13",
															"nodeType": "VariableDeclaration",
															"scope": 1802,
															"src": "2253:9:13",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1773,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1780,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1775,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1776,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1741,
																"src": "2269:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:13"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 1785,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:13",
														"subExpression": {
															"id": 1784,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1774,
															"src": "2290:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1786,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:13"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1803,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1747,
														"src": "2401:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1804,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1812,
												"nodeType": "IfStatement",
												"src": "2397:96:13",
												"trueBody": {
													"id": 1811,
													"nodeType": "Block",
													"src": "2418:75:13",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1807,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1739,
																		"src": "2468:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1808,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1741,
																		"src": "2475:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1806,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1642,
																	"src": "2439:28:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1810,
															"nodeType": "RevertStatement",
															"src": "2432:50:13"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1815,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "2516:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1814,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1813,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:13",
															"typeDescriptions": {}
														}
													},
													"id": 1816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1745,
												"id": 1817,
												"nodeType": "Return",
												"src": "2502:21:13"
											}
										]
									},
									"documentation": {
										"id": 1737,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:13",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1819,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1739,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2026:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2041:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1740,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:13"
									},
									"returnParameters": {
										"id": 1745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1744,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2080:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1743,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:13"
									},
									"scope": 1877,
									"src": "2005:525:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1838,
										"nodeType": "Block",
										"src": "2762:75:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1832,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1822,
																			"src": "2807:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1831,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1830,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1829,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1828,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1835,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "2815:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1827,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1736,
															1819,
															1839
														],
														"referencedDeclaration": 1819,
														"src": "2779:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1826,
												"id": 1837,
												"nodeType": "Return",
												"src": "2772:58:13"
											}
										]
									},
									"documentation": {
										"id": 1820,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:13",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1822,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "2710:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1821,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:13"
									},
									"returnParameters": {
										"id": 1826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "2747:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1824,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:13"
									},
									"scope": 1877,
									"src": "2689:148:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1875,
										"nodeType": "Block",
										"src": "2992:104:13",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1851,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1842,
																		"src": "3015:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1849,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1853,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:13",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1856,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1844,
																		"src": "3034:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1854,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1857,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:13",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1872,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1863,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1842,
																			"src": "3063:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1862,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1861,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1860,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1865,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1869,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1844,
																			"src": "3086:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1868,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1867,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1866,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1871,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1848,
												"id": 1874,
												"nodeType": "Return",
												"src": "3002:87:13"
											}
										]
									},
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:13",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1876,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1876,
												"src": "2929:15:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1841,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1876,
												"src": "2946:15:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1843,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:13"
									},
									"returnParameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1876,
												"src": "2986:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1846,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:13"
									},
									"scope": 1877,
									"src": "2914:182:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1878,
							"src": "251:2847:13",
							"usedErrors": [
								1642
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2225
						]
					},
					"id": 2226,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1879,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1880,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:14",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2225,
							"linearizedBaseContracts": [
								2225
							],
							"name": "ECDSA",
							"nameLocation": "352:5:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1885,
									"members": [
										{
											"id": 1881,
											"name": "NoError",
											"nameLocation": "392:7:14",
											"nodeType": "EnumValue",
											"src": "392:7:14"
										},
										{
											"id": 1882,
											"name": "InvalidSignature",
											"nameLocation": "409:16:14",
											"nodeType": "EnumValue",
											"src": "409:16:14"
										},
										{
											"id": 1883,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:14",
											"nodeType": "EnumValue",
											"src": "435:22:14"
										},
										{
											"id": 1884,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:14",
											"nodeType": "EnumValue",
											"src": "467:17:14"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:14",
									"nodeType": "EnumDefinition",
									"src": "364:126:14"
								},
								{
									"documentation": {
										"id": 1886,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:14",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 1888,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1887,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:14"
									},
									"src": "564:30:14"
								},
								{
									"documentation": {
										"id": 1889,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:14",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 1893,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1891,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1893,
												"src": "699:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:14"
									},
									"src": "665:50:14"
								},
								{
									"documentation": {
										"id": 1894,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:14",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 1898,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "840:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1895,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:14"
									},
									"src": "811:40:14"
								},
								{
									"body": {
										"id": 1950,
										"nodeType": "Block",
										"src": "2285:622:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1913,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1903,
															"src": "2299:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1914,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2309:6:14",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2299:16:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1915,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2319:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2299:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1948,
													"nodeType": "Block",
													"src": "2793:108:14",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1937,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2823:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1936,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2815:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1935,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2815:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1938,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2815:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1939,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1885,
																			"src": "2827:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1940,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2840:22:14",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1883,
																		"src": "2827:35:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1885",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1943,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1903,
																					"src": "2872:9:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1944,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2882:6:14",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2872:16:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1942,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2864:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1941,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2864:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2864:25:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1946,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2814:76:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1912,
															"id": 1947,
															"nodeType": "Return",
															"src": "2807:83:14"
														}
													]
												},
												"id": 1949,
												"nodeType": "IfStatement",
												"src": "2295:606:14",
												"trueBody": {
													"id": 1934,
													"nodeType": "Block",
													"src": "2323:464:14",
													"statements": [
														{
															"assignments": [
																1918
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1918,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2345:1:14",
																	"nodeType": "VariableDeclaration",
																	"scope": 1934,
																	"src": "2337:9:14",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1917,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2337:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1919,
															"nodeType": "VariableDeclarationStatement",
															"src": "2337:9:14"
														},
														{
															"assignments": [
																1921
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1921,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2368:1:14",
																	"nodeType": "VariableDeclaration",
																	"scope": 1934,
																	"src": "2360:9:14",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1920,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2360:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1922,
															"nodeType": "VariableDeclarationStatement",
															"src": "2360:9:14"
														},
														{
															"assignments": [
																1924
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1924,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2389:1:14",
																	"nodeType": "VariableDeclaration",
																	"scope": 1934,
																	"src": "2383:7:14",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1923,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2383:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1925,
															"nodeType": "VariableDeclarationStatement",
															"src": "2383:7:14"
														},
														{
															"AST": {
																"nativeSrc": "2560:171:14",
																"nodeType": "YulBlock",
																"src": "2560:171:14",
																"statements": [
																	{
																		"nativeSrc": "2578:32:14",
																		"nodeType": "YulAssignment",
																		"src": "2578:32:14",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2593:9:14",
																							"nodeType": "YulIdentifier",
																							"src": "2593:9:14"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2604:4:14",
																							"nodeType": "YulLiteral",
																							"src": "2604:4:14",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2589:3:14",
																						"nodeType": "YulIdentifier",
																						"src": "2589:3:14"
																					},
																					"nativeSrc": "2589:20:14",
																					"nodeType": "YulFunctionCall",
																					"src": "2589:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2583:5:14",
																				"nodeType": "YulIdentifier",
																				"src": "2583:5:14"
																			},
																			"nativeSrc": "2583:27:14",
																			"nodeType": "YulFunctionCall",
																			"src": "2583:27:14"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2578:1:14",
																				"nodeType": "YulIdentifier",
																				"src": "2578:1:14"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2627:32:14",
																		"nodeType": "YulAssignment",
																		"src": "2627:32:14",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2642:9:14",
																							"nodeType": "YulIdentifier",
																							"src": "2642:9:14"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2653:4:14",
																							"nodeType": "YulLiteral",
																							"src": "2653:4:14",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2638:3:14",
																						"nodeType": "YulIdentifier",
																						"src": "2638:3:14"
																					},
																					"nativeSrc": "2638:20:14",
																					"nodeType": "YulFunctionCall",
																					"src": "2638:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2632:5:14",
																				"nodeType": "YulIdentifier",
																				"src": "2632:5:14"
																			},
																			"nativeSrc": "2632:27:14",
																			"nodeType": "YulFunctionCall",
																			"src": "2632:27:14"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2627:1:14",
																				"nodeType": "YulIdentifier",
																				"src": "2627:1:14"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2676:41:14",
																		"nodeType": "YulAssignment",
																		"src": "2676:41:14",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2686:1:14",
																					"nodeType": "YulLiteral",
																					"src": "2686:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2699:9:14",
																									"nodeType": "YulIdentifier",
																									"src": "2699:9:14"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2710:4:14",
																									"nodeType": "YulLiteral",
																									"src": "2710:4:14",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2695:3:14",
																								"nodeType": "YulIdentifier",
																								"src": "2695:3:14"
																							},
																							"nativeSrc": "2695:20:14",
																							"nodeType": "YulFunctionCall",
																							"src": "2695:20:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2689:5:14",
																						"nodeType": "YulIdentifier",
																						"src": "2689:5:14"
																					},
																					"nativeSrc": "2689:27:14",
																					"nodeType": "YulFunctionCall",
																					"src": "2689:27:14"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2681:4:14",
																				"nodeType": "YulIdentifier",
																				"src": "2681:4:14"
																			},
																			"nativeSrc": "2681:36:14",
																			"nodeType": "YulFunctionCall",
																			"src": "2681:36:14"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2676:1:14",
																				"nodeType": "YulIdentifier",
																				"src": "2676:1:14"
																			}
																		]
																	}
																]
															},
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 1918,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2578:1:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1921,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2627:1:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1903,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2593:9:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1903,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2642:9:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1903,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2699:9:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1924,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2676:1:14",
																	"valueSize": 1
																}
															],
															"flags": [
																"memory-safe"
															],
															"id": 1926,
															"nodeType": "InlineAssembly",
															"src": "2535:196:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1928,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1901,
																		"src": "2762:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1929,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1924,
																		"src": "2768:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1930,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1918,
																		"src": "2771:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1931,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1921,
																		"src": "2774:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1927,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1951,
																		2031,
																		2139
																	],
																	"referencedDeclaration": 2139,
																	"src": "2751:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 1932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2751:25:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1912,
															"id": 1933,
															"nodeType": "Return",
															"src": "2744:32:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1899,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:14",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 1951,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2166:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2158:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1900,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2158:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2193:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2180:22:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1902,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:60:14"
									},
									"returnParameters": {
										"id": 1912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "recovered",
												"nameLocation": "2240:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2232:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2232:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1909,
												"mutability": "mutable",
												"name": "err",
												"nameLocation": "2264:3:14",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2251:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1885",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1908,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1907,
														"name": "RecoverError",
														"nameLocations": [
															"2251:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1885,
														"src": "2251:12:14"
													},
													"referencedDeclaration": 1885,
													"src": "2251:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1885",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1911,
												"mutability": "mutable",
												"name": "errArg",
												"nameLocation": "2277:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "2269:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1910,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2269:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2231:53:14"
									},
									"scope": 2225,
									"src": "2129:778:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1980,
										"nodeType": "Block",
										"src": "3801:168:14",
										"statements": [
											{
												"assignments": [
													1962,
													1965,
													1967
												],
												"declarations": [
													{
														"constant": false,
														"id": 1962,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3820:9:14",
														"nodeType": "VariableDeclaration",
														"scope": 1980,
														"src": "3812:17:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1961,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3812:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1965,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3844:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 1980,
														"src": "3831:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1885",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1964,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1963,
																"name": "RecoverError",
																"nameLocations": [
																	"3831:12:14"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1885,
																"src": "3831:12:14"
															},
															"referencedDeclaration": 1885,
															"src": "3831:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1967,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3859:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 1980,
														"src": "3851:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1966,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3851:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1972,
												"initialValue": {
													"arguments": [
														{
															"id": 1969,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1954,
															"src": "3882:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1970,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1956,
															"src": "3888:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1968,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1951,
															2031,
															2139
														],
														"referencedDeclaration": 1951,
														"src": "3871:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3871:27:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3811:87:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1974,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1965,
															"src": "3920:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1975,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1967,
															"src": "3927:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1973,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2224,
														"src": "3908:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1885_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3908:28:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1977,
												"nodeType": "ExpressionStatement",
												"src": "3908:28:14"
											},
											{
												"expression": {
													"id": 1978,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1962,
													"src": "3953:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1960,
												"id": 1979,
												"nodeType": "Return",
												"src": "3946:16:14"
											}
										]
									},
									"documentation": {
										"id": 1952,
										"nodeType": "StructuredDocumentation",
										"src": "2913:796:14",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 1981,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3723:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1954,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3739:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1981,
												"src": "3731:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1953,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3731:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1956,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3758:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1981,
												"src": "3745:22:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1955,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3745:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3730:38:14"
									},
									"returnParameters": {
										"id": 1960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1959,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1981,
												"src": "3792:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1958,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3792:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3791:9:14"
									},
									"scope": 2225,
									"src": "3714:255:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2030,
										"nodeType": "Block",
										"src": "4348:342:14",
										"statements": [
											{
												"id": 2029,
												"nodeType": "UncheckedBlock",
												"src": "4358:326:14",
												"statements": [
													{
														"assignments": [
															1999
														],
														"declarations": [
															{
																"constant": false,
																"id": 1999,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4390:1:14",
																"nodeType": "VariableDeclaration",
																"scope": 2029,
																"src": "4382:9:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1998,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4382:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2006,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2000,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1988,
																"src": "4394:2:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 2003,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4407:66:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 2002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4399:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 2001,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4399:7:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2004,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4399:75:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4394:80:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4382:92:14"
													},
													{
														"assignments": [
															2008
														],
														"declarations": [
															{
																"constant": false,
																"id": 2008,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4591:1:14",
																"nodeType": "VariableDeclaration",
																"scope": 2029,
																"src": "4585:7:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 2007,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4585:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2021,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2019,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2016,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 2013,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1988,
																							"src": "4610:2:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 2012,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4602:7:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2011,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4602:7:14",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2014,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4602:11:14",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 2015,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4617:3:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4602:18:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2017,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4601:20:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 2018,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4624:2:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4601:25:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4595:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 2009,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4595:5:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4595:32:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4585:42:14"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2023,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1984,
																	"src": "4659:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2024,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2008,
																	"src": "4665:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 2025,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1986,
																	"src": "4668:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2026,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1999,
																	"src": "4671:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 2022,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1951,
																	2031,
																	2139
																],
																"referencedDeclaration": 2139,
																"src": "4648:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 2027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4648:25:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 1997,
														"id": 2028,
														"nodeType": "Return",
														"src": "4641:32:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1982,
										"nodeType": "StructuredDocumentation",
										"src": "3975:205:14",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]"
									},
									"id": 2031,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4194:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1984,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4222:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4214:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1983,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4214:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1986,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4244:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4236:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1985,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4263:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4255:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1987,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4255:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4204:67:14"
									},
									"returnParameters": {
										"id": 1997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1991,
												"mutability": "mutable",
												"name": "recovered",
												"nameLocation": "4303:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4295:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4295:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1994,
												"mutability": "mutable",
												"name": "err",
												"nameLocation": "4327:3:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4314:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1885",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1993,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1992,
														"name": "RecoverError",
														"nameLocations": [
															"4314:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1885,
														"src": "4314:12:14"
													},
													"referencedDeclaration": 1885,
													"src": "4314:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1885",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "errArg",
												"nameLocation": "4340:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4332:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1995,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4332:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4294:53:14"
									},
									"scope": 2225,
									"src": "4185:505:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2063,
										"nodeType": "Block",
										"src": "4903:164:14",
										"statements": [
											{
												"assignments": [
													2044,
													2047,
													2049
												],
												"declarations": [
													{
														"constant": false,
														"id": 2044,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4922:9:14",
														"nodeType": "VariableDeclaration",
														"scope": 2063,
														"src": "4914:17:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2043,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4914:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2047,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4946:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2063,
														"src": "4933:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1885",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2046,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2045,
																"name": "RecoverError",
																"nameLocations": [
																	"4933:12:14"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1885,
																"src": "4933:12:14"
															},
															"referencedDeclaration": 1885,
															"src": "4933:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2049,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4961:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 2063,
														"src": "4953:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2048,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4953:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2055,
												"initialValue": {
													"arguments": [
														{
															"id": 2051,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "4984:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2052,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2036,
															"src": "4990:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2053,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2038,
															"src": "4993:2:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2050,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1951,
															2031,
															2139
														],
														"referencedDeclaration": 2031,
														"src": "4973:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2054,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4973:23:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4913:83:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2057,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2047,
															"src": "5018:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2058,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "5025:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2056,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2224,
														"src": "5006:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1885_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5006:28:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2060,
												"nodeType": "ExpressionStatement",
												"src": "5006:28:14"
											},
											{
												"expression": {
													"id": 2061,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2044,
													"src": "5051:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2042,
												"id": 2062,
												"nodeType": "Return",
												"src": "5044:16:14"
											}
										]
									},
									"documentation": {
										"id": 2032,
										"nodeType": "StructuredDocumentation",
										"src": "4696:116:14",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 2064,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4826:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4842:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "4834:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2033,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4834:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2036,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4856:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "4848:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2035,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4848:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4867:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "4859:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2037,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4859:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4833:37:14"
									},
									"returnParameters": {
										"id": 2042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2064,
												"src": "4894:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4894:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4893:9:14"
									},
									"scope": 2225,
									"src": "4817:250:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2138,
										"nodeType": "Block",
										"src": "5382:1372:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2085,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2073,
																"src": "6278:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2084,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6270:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2083,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6270:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 2086,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6270:10:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2087,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6283:66:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6270:79:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2099,
												"nodeType": "IfStatement",
												"src": "6266:164:14",
												"trueBody": {
													"id": 2098,
													"nodeType": "Block",
													"src": "6351:79:14",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2091,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6381:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2090,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6373:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2089,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6373:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2092,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6373:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2093,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1885,
																			"src": "6385:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2094,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6398:17:14",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1884,
																		"src": "6385:30:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1885",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 2095,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2073,
																		"src": "6417:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2096,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6372:47:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2082,
															"id": 2097,
															"nodeType": "Return",
															"src": "6365:54:14"
														}
													]
												}
											},
											{
												"assignments": [
													2101
												],
												"declarations": [
													{
														"constant": false,
														"id": 2101,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6532:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2138,
														"src": "6524:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2100,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6524:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2108,
												"initialValue": {
													"arguments": [
														{
															"id": 2103,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2067,
															"src": "6551:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2104,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2069,
															"src": "6557:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2105,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2071,
															"src": "6560:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2106,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2073,
															"src": "6563:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2102,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6541:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6541:24:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6524:41:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2109,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2101,
														"src": "6579:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2112,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6597:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2111,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6589:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2110,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6589:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 2113,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6589:10:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6579:20:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2128,
												"nodeType": "IfStatement",
												"src": "6575:113:14",
												"trueBody": {
													"id": 2127,
													"nodeType": "Block",
													"src": "6601:87:14",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2117,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6631:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2116,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6623:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2115,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6623:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6623:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2119,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1885,
																			"src": "6635:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6648:16:14",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1882,
																		"src": "6635:29:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1885",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2123,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6674:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6666:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2121,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6666:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6666:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2125,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6622:55:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2082,
															"id": 2126,
															"nodeType": "Return",
															"src": "6615:62:14"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2129,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2101,
															"src": "6706:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2130,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1885,
																"src": "6714:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6727:7:14",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1881,
															"src": "6714:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6744:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2133,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6736:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2132,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6736:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2135,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6736:10:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 2136,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6705:42:14",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 2082,
												"id": 2137,
												"nodeType": "Return",
												"src": "6698:49:14"
											}
										]
									},
									"documentation": {
										"id": 2065,
										"nodeType": "StructuredDocumentation",
										"src": "5073:125:14",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5212:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2067,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5240:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5232:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2066,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5232:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2069,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5260:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5254:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2068,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5254:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2071,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5279:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5271:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2070,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5271:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2073,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5298:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5290:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2072,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5290:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5222:83:14"
									},
									"returnParameters": {
										"id": 2082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "recovered",
												"nameLocation": "5337:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5329:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5329:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2079,
												"mutability": "mutable",
												"name": "err",
												"nameLocation": "5361:3:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5348:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1885",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2078,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2077,
														"name": "RecoverError",
														"nameLocations": [
															"5348:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1885,
														"src": "5348:12:14"
													},
													"referencedDeclaration": 1885,
													"src": "5348:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1885",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "errArg",
												"nameLocation": "5374:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "5366:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2080,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5366:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5328:53:14"
									},
									"scope": 2225,
									"src": "5203:1551:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2174,
										"nodeType": "Block",
										"src": "6981:166:14",
										"statements": [
											{
												"assignments": [
													2154,
													2157,
													2159
												],
												"declarations": [
													{
														"constant": false,
														"id": 2154,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "7000:9:14",
														"nodeType": "VariableDeclaration",
														"scope": 2174,
														"src": "6992:17:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2153,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6992:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2157,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "7024:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2174,
														"src": "7011:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1885",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2156,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2155,
																"name": "RecoverError",
																"nameLocations": [
																	"7011:12:14"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1885,
																"src": "7011:12:14"
															},
															"referencedDeclaration": 1885,
															"src": "7011:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2159,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "7039:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 2174,
														"src": "7031:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2158,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "7031:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2166,
												"initialValue": {
													"arguments": [
														{
															"id": 2161,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2142,
															"src": "7062:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2162,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2144,
															"src": "7068:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2163,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2146,
															"src": "7071:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2164,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2148,
															"src": "7074:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2160,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1951,
															2031,
															2139
														],
														"referencedDeclaration": 2139,
														"src": "7051:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7051:25:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1885_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6991:85:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2168,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2157,
															"src": "7098:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2169,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2159,
															"src": "7105:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2167,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2224,
														"src": "7086:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1885_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7086:28:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2171,
												"nodeType": "ExpressionStatement",
												"src": "7086:28:14"
											},
											{
												"expression": {
													"id": 2172,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2154,
													"src": "7131:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2152,
												"id": 2173,
												"nodeType": "Return",
												"src": "7124:16:14"
											}
										]
									},
									"documentation": {
										"id": 2140,
										"nodeType": "StructuredDocumentation",
										"src": "6760:122:14",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6896:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2142,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6912:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "6904:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6904:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6924:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "6918:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6918:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2146,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6935:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "6927:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2145,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6927:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2148,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6946:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "6938:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2147,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6938:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6903:45:14"
									},
									"returnParameters": {
										"id": 2152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2175,
												"src": "6972:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6972:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6971:9:14"
									},
									"scope": 2225,
									"src": "6887:260:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2223,
										"nodeType": "Block",
										"src": "7352:460:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1885",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 2187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2184,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2179,
														"src": "7366:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1885",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2185,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1885,
															"src": "7375:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 2186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7388:7:14",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1881,
														"src": "7375:20:14",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1885",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7366:29:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1885",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 2193,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2190,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2179,
															"src": "7462:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2191,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1885,
																"src": "7471:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7484:16:14",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1882,
															"src": "7471:29:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7462:38:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1885",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 2201,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2198,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2179,
																"src": "7567:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1885",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2199,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "7576:12:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 2200,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7589:22:14",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1883,
																"src": "7576:35:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1885",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7567:44:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1885",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 2213,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2210,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2179,
																	"src": "7701:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1885",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 2211,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1885,
																		"src": "7710:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1885_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 2212,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7723:17:14",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1884,
																	"src": "7710:30:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1885",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7701:39:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2219,
															"nodeType": "IfStatement",
															"src": "7697:109:14",
															"trueBody": {
																"id": 2218,
																"nodeType": "Block",
																"src": "7742:64:14",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2215,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2181,
																					"src": "7786:8:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2214,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1898,
																				"src": "7763:22:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 2216,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7763:32:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2217,
																		"nodeType": "RevertStatement",
																		"src": "7756:39:14"
																	}
																]
															}
														},
														"id": 2220,
														"nodeType": "IfStatement",
														"src": "7563:243:14",
														"trueBody": {
															"id": 2209,
															"nodeType": "Block",
															"src": "7613:78:14",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 2205,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2181,
																						"src": "7670:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 2204,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7662:7:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2203,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7662:7:14",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2206,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7662:17:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2202,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1893,
																			"src": "7634:27:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 2207,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7634:46:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2208,
																	"nodeType": "RevertStatement",
																	"src": "7627:53:14"
																}
															]
														}
													},
													"id": 2221,
													"nodeType": "IfStatement",
													"src": "7458:348:14",
													"trueBody": {
														"id": 2197,
														"nodeType": "Block",
														"src": "7502:55:14",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2194,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1888,
																		"src": "7523:21:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 2195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7523:23:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 2196,
																"nodeType": "RevertStatement",
																"src": "7516:30:14"
															}
														]
													}
												},
												"id": 2222,
												"nodeType": "IfStatement",
												"src": "7362:444:14",
												"trueBody": {
													"id": 2189,
													"nodeType": "Block",
													"src": "7397:55:14",
													"statements": [
														{
															"functionReturnParameters": 2183,
															"id": 2188,
															"nodeType": "Return",
															"src": "7411:7:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2176,
										"nodeType": "StructuredDocumentation",
										"src": "7153:122:14",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 2224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7289:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2179,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7314:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2224,
												"src": "7301:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1885",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2178,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2177,
														"name": "RecoverError",
														"nameLocations": [
															"7301:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1885,
														"src": "7301:12:14"
													},
													"referencedDeclaration": 1885,
													"src": "7301:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1885",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2181,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7329:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2224,
												"src": "7321:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2180,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7321:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7300:38:14"
									},
									"returnParameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7352:0:14"
									},
									"scope": 2225,
									"src": "7280:532:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2226,
							"src": "344:7470:14",
							"usedErrors": [
								1888,
								1893,
								1898
							],
							"usedEvents": []
						}
					],
					"src": "112:7703:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2452
						],
						"IERC5267": [
							172
						],
						"MessageHashUtils": [
							2526
						],
						"ShortString": [
							1287
						],
						"ShortStrings": [
							1498
						]
					},
					"id": 2453,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2227,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:15"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 2229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2453,
							"sourceUnit": 2527,
							"src": "139:56:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2228,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2526,
										"src": "147:16:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2232,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2453,
							"sourceUnit": 1499,
							"src": "196:62:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2230,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1498,
										"src": "204:12:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2231,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1287,
										"src": "218:11:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2234,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2453,
							"sourceUnit": 173,
							"src": "259:55:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2233,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 172,
										"src": "267:8:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2236,
										"name": "IERC5267",
										"nameLocations": [
											"1988:8:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 172,
										"src": "1988:8:15"
									},
									"id": 2237,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:8:15"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2235,
								"nodeType": "StructuredDocumentation",
								"src": "316:1643:15",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2452,
							"linearizedBaseContracts": [
								2452,
								172
							],
							"name": "EIP712",
							"nameLocation": "1978:6:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2239,
									"libraryName": {
										"id": 2238,
										"name": "ShortStrings",
										"nameLocations": [
											"2009:12:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1498,
										"src": "2009:12:15"
									},
									"nodeType": "UsingForDirective",
									"src": "2003:25:15"
								},
								{
									"constant": true,
									"id": 2244,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2059:9:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2034:140:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2240,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2034:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2242,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2089:84:15",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2241,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2079:9:15",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2243,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2079:95:15",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2246,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2399:22:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2373:48:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2245,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2373:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2248,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2453:14:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2427:40:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2247,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2427:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2250,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2499:11:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2473:37:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2249,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2473:7:15",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2252,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2543:11:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2517:37:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2251,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2254,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2586:14:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2560:40:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2253,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2560:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2257,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2637:5:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2607:35:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2256,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2255,
											"name": "ShortString",
											"nameLocations": [
												"2607:11:15"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1287,
											"src": "2607:11:15"
										},
										"referencedDeclaration": 1287,
										"src": "2607:11:15",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2260,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2678:8:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2648:38:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2259,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2258,
											"name": "ShortString",
											"nameLocations": [
												"2648:11:15"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1287,
											"src": "2648:11:15"
										},
										"referencedDeclaration": 1287,
										"src": "2648:11:15",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2262,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2707:13:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2692:28:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2261,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2692:6:15",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2264,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2741:16:15",
									"nodeType": "VariableDeclaration",
									"scope": 2452,
									"src": "2726:31:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2263,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2726:6:15",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2321,
										"nodeType": "Block",
										"src": "3383:376:15",
										"statements": [
											{
												"expression": {
													"id": 2277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2272,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2257,
														"src": "3393:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2275,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2262,
																"src": "3432:13:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2273,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2267,
																"src": "3401:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3406:25:15",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1439,
															"src": "3401:30:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1287_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3401:45:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
															"typeString": "ShortString"
														}
													},
													"src": "3393:53:15",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"id": 2278,
												"nodeType": "ExpressionStatement",
												"src": "3393:53:15"
											},
											{
												"expression": {
													"id": 2284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2279,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2260,
														"src": "3456:8:15",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2282,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2264,
																"src": "3501:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2280,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2269,
																"src": "3467:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3475:25:15",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1439,
															"src": "3467:33:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1287_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2283,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:51:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
															"typeString": "ShortString"
														}
													},
													"src": "3456:62:15",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
														"typeString": "ShortString"
													}
												},
												"id": 2285,
												"nodeType": "ExpressionStatement",
												"src": "3456:62:15"
											},
											{
												"expression": {
													"id": 2293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2286,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2252,
														"src": "3528:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2290,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2267,
																		"src": "3558:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2289,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3552:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2288,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3552:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2291,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3552:11:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2287,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3542:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2292,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:22:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3528:36:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2294,
												"nodeType": "ExpressionStatement",
												"src": "3528:36:15"
											},
											{
												"expression": {
													"id": 2302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2295,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2254,
														"src": "3574:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2299,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2269,
																		"src": "3607:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2298,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3601:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2297,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3601:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2300,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3601:14:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2296,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3591:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2301,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:25:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3574:42:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2303,
												"nodeType": "ExpressionStatement",
												"src": "3574:42:15"
											},
											{
												"expression": {
													"id": 2307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2304,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2248,
														"src": "3627:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2305,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3644:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2306,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3650:7:15",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3644:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3627:30:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2308,
												"nodeType": "ExpressionStatement",
												"src": "3627:30:15"
											},
											{
												"expression": {
													"id": 2312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2309,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2246,
														"src": "3667:22:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2310,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2369,
															"src": "3692:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3692:23:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3667:48:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2313,
												"nodeType": "ExpressionStatement",
												"src": "3667:48:15"
											},
											{
												"expression": {
													"id": 2319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2314,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2250,
														"src": "3725:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2317,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3747:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2452",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2452",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3739:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2315,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3739:7:15",
																"typeDescriptions": {}
															}
														},
														"id": 2318,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3739:13:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3725:27:15",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2320,
												"nodeType": "ExpressionStatement",
												"src": "3725:27:15"
											}
										]
									},
									"documentation": {
										"id": 2265,
										"nodeType": "StructuredDocumentation",
										"src": "2764:559:15",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2322,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2267,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3354:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2322,
												"src": "3340:18:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3340:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2269,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3374:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2322,
												"src": "3360:21:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2268,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3360:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:43:15"
									},
									"returnParameters": {
										"id": 2271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3383:0:15"
									},
									"scope": 2452,
									"src": "3328:431:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2347,
										"nodeType": "Block",
										"src": "3907:200:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2330,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3929:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2452",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2452",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2329,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3921:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2328,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3921:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3921:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2332,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2250,
															"src": "3938:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3921:28:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2334,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3953:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3959:7:15",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3953:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2336,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2248,
															"src": "3970:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3953:31:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3921:63:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2345,
													"nodeType": "Block",
													"src": "4046:55:15",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2342,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2369,
																	"src": "4067:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4067:23:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2327,
															"id": 2344,
															"nodeType": "Return",
															"src": "4060:30:15"
														}
													]
												},
												"id": 2346,
												"nodeType": "IfStatement",
												"src": "3917:184:15",
												"trueBody": {
													"id": 2341,
													"nodeType": "Block",
													"src": "3986:54:15",
													"statements": [
														{
															"expression": {
																"id": 2339,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2246,
																"src": "4007:22:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2327,
															"id": 2340,
															"nodeType": "Return",
															"src": "4000:29:15"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2323,
										"nodeType": "StructuredDocumentation",
										"src": "3765:75:15",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3854:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3872:2:15"
									},
									"returnParameters": {
										"id": 2327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2326,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "3898:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2325,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3898:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3897:9:15"
									},
									"scope": 2452,
									"src": "3845:262:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2368,
										"nodeType": "Block",
										"src": "4177:115:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2356,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "4215:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2357,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2252,
																	"src": "4226:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2358,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2254,
																	"src": "4239:14:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2359,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4255:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4261:7:15",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4255:13:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2363,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4278:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2452",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2452",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2361,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:7:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2364,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:13:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2354,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4204:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4208:6:15",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4204:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4204:80:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2353,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4194:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4194:91:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2352,
												"id": 2367,
												"nodeType": "Return",
												"src": "4187:98:15"
											}
										]
									},
									"id": 2369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4122:21:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4143:2:15"
									},
									"returnParameters": {
										"id": 2352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2369,
												"src": "4168:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2350,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4167:9:15"
									},
									"scope": 2452,
									"src": "4113:179:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2384,
										"nodeType": "Block",
										"src": "5003:90:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2379,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2348,
																"src": "5053:18:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5053:20:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2381,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2372,
															"src": "5075:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2377,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2526,
															"src": "5020:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2526_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5037:15:15",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2525,
														"src": "5020:32:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:66:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2376,
												"id": 2383,
												"nodeType": "Return",
												"src": "5013:73:15"
											}
										]
									},
									"documentation": {
										"id": 2370,
										"nodeType": "StructuredDocumentation",
										"src": "4298:614:15",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4926:16:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2372,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4951:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2385,
												"src": "4943:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2371,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4943:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:20:15"
									},
									"returnParameters": {
										"id": 2376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2385,
												"src": "4994:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2374,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:9:15"
									},
									"scope": 2452,
									"src": "4917:176:15",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										171
									],
									"body": {
										"id": 2426,
										"nodeType": "Block",
										"src": "5472:229:15",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2404,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5503:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2405,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2439,
																"src": "5533:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5533:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2407,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2451,
																"src": "5560:14:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5560:16:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2409,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5590:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5596:7:15",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5590:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2413,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5625:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2452",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2452",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2412,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5617:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2411,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5617:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5652:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2416,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5644:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2415,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5644:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2418,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5644:10:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2422,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5682:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2421,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5668:13:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2419,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5672:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2420,
																	"nodeType": "ArrayTypeName",
																	"src": "5672:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5668:16:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2424,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5489:205:15",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2403,
												"id": 2425,
												"nodeType": "Return",
												"src": "5482:212:15"
											}
										]
									},
									"documentation": {
										"id": 2386,
										"nodeType": "StructuredDocumentation",
										"src": "5099:40:15",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5153:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5165:2:15"
									},
									"returnParameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2389,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5249:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5242:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2388,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5242:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2391,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5283:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5269:18:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2390,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5269:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2393,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5315:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5301:21:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2392,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5301:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2395,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5344:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5336:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2397,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5373:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5365:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2399,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5412:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5404:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2398,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5404:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5447:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2427,
												"src": "5430:27:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2400,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5430:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2401,
													"nodeType": "ArrayTypeName",
													"src": "5430:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:239:15"
									},
									"scope": 2452,
									"src": "5144:557:15",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2438,
										"nodeType": "Block",
										"src": "6082:65:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2435,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2262,
															"src": "6126:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2433,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2257,
															"src": "6099:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																"typeString": "ShortString"
															}
														},
														"id": 2434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6105:20:15",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1466,
														"src": "6099:26:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1287_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1287_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:41:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2432,
												"id": 2437,
												"nodeType": "Return",
												"src": "6092:48:15"
											}
										]
									},
									"documentation": {
										"id": 2428,
										"nodeType": "StructuredDocumentation",
										"src": "5707:256:15",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2439,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6030:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6041:2:15"
									},
									"returnParameters": {
										"id": 2432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2439,
												"src": "6067:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2430,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6067:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6066:15:15"
									},
									"scope": 2452,
									"src": "6021:126:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2450,
										"nodeType": "Block",
										"src": "6537:71:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2447,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2264,
															"src": "6584:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2445,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2260,
															"src": "6554:8:15",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1287",
																"typeString": "ShortString"
															}
														},
														"id": 2446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6563:20:15",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1466,
														"src": "6554:29:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1287_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1287_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6554:47:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2444,
												"id": 2449,
												"nodeType": "Return",
												"src": "6547:54:15"
											}
										]
									},
									"documentation": {
										"id": 2440,
										"nodeType": "StructuredDocumentation",
										"src": "6153:262:15",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2451,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6482:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6496:2:15"
									},
									"returnParameters": {
										"id": 2444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2443,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2451,
												"src": "6522:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2442,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6522:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:15:15"
									},
									"scope": 2452,
									"src": "6473:135:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2453,
							"src": "1960:4650:15",
							"usedErrors": [
								1295,
								1297
							],
							"usedEvents": [
								152
							]
						}
					],
					"src": "113:6498:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2526
						],
						"Strings": [
							1877
						]
					},
					"id": 2527,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2454,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2456,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2527,
							"sourceUnit": 1878,
							"src": "149:39:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2455,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1877,
										"src": "157:7:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2457,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:16",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2526,
							"linearizedBaseContracts": [
								2526
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2466,
										"nodeType": "Block",
										"src": "1314:341:16",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1349:300:16",
													"nodeType": "YulBlock",
													"src": "1349:300:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1370:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1370:4:16",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1376:34:16",
																		"nodeType": "YulLiteral",
																		"src": "1376:34:16",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1363:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "1363:6:16"
																},
																"nativeSrc": "1363:48:16",
																"nodeType": "YulFunctionCall",
																"src": "1363:48:16"
															},
															"nativeSrc": "1363:48:16",
															"nodeType": "YulExpressionStatement",
															"src": "1363:48:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1472:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1472:4:16",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1478:11:16",
																		"nodeType": "YulIdentifier",
																		"src": "1478:11:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1465:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "1465:6:16"
																},
																"nativeSrc": "1465:25:16",
																"nodeType": "YulFunctionCall",
																"src": "1465:25:16"
															},
															"nativeSrc": "1465:25:16",
															"nodeType": "YulExpressionStatement",
															"src": "1465:25:16"
														},
														{
															"nativeSrc": "1544:31:16",
															"nodeType": "YulAssignment",
															"src": "1544:31:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1564:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1564:4:16",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1570:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1570:4:16",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1554:9:16",
																	"nodeType": "YulIdentifier",
																	"src": "1554:9:16"
																},
																"nativeSrc": "1554:21:16",
																"nodeType": "YulFunctionCall",
																"src": "1554:21:16"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1544:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "1544:6:16"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2463,
														"isOffset": false,
														"isSlot": false,
														"src": "1544:6:16",
														"valueSize": 1
													},
													{
														"declaration": 2460,
														"isOffset": false,
														"isSlot": false,
														"src": "1478:11:16",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 2465,
												"nodeType": "InlineAssembly",
												"src": "1324:325:16"
											}
										]
									},
									"documentation": {
										"id": 2458,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:16",
										"text": " @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2460,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2467,
												"src": "1254:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2459,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:16"
									},
									"returnParameters": {
										"id": 2464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2463,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2467,
												"src": "1298:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:16"
									},
									"scope": 2526,
									"src": "1222:433:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2492,
										"nodeType": "Block",
										"src": "2207:143:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2259:32:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2484,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2470,
																						"src": "2316:7:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2485,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2324:6:16",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2316:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2482,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1877,
																					"src": "2299:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$1877_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2483,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2307:8:16",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1690,
																				"src": "2299:16:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2486,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2299:32:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2293:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2480,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2293:5:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2293:39:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2488,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2470,
																	"src": "2334:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2246:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2476,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2246:5:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2252:6:16",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2246:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2489,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2246:96:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2475,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2236:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2236:107:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2474,
												"id": 2491,
												"nodeType": "Return",
												"src": "2217:126:16"
											}
										]
									},
									"documentation": {
										"id": 2468,
										"nodeType": "StructuredDocumentation",
										"src": "1661:455:16",
										"text": " @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2130:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2470,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2166:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2493,
												"src": "2153:20:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2469,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2153:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2152:22:16"
									},
									"returnParameters": {
										"id": 2474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2493,
												"src": "2198:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2472,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2198:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2197:9:16"
									},
									"scope": 2526,
									"src": "2121:229:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2512,
										"nodeType": "Block",
										"src": "2804:80:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2848:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2507,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2496,
																	"src": "2860:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2508,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2498,
																	"src": "2871:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2504,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2831:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2505,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2835:12:16",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2831:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2831:45:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2503,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2821:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2821:56:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2502,
												"id": 2511,
												"nodeType": "Return",
												"src": "2814:63:16"
											}
										]
									},
									"documentation": {
										"id": 2494,
										"nodeType": "StructuredDocumentation",
										"src": "2356:332:16",
										"text": " @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2702:31:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2742:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2513,
												"src": "2734:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2734:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2498,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2766:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2513,
												"src": "2753:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2497,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2753:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2733:38:16"
									},
									"returnParameters": {
										"id": 2502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2513,
												"src": "2795:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2500,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2795:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2794:9:16"
									},
									"scope": 2526,
									"src": "2693:191:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2524,
										"nodeType": "Block",
										"src": "3435:265:16",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3470:224:16",
													"nodeType": "YulBlock",
													"src": "3470:224:16",
													"statements": [
														{
															"nativeSrc": "3484:22:16",
															"nodeType": "YulVariableDeclaration",
															"src": "3484:22:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3501:4:16",
																		"nodeType": "YulLiteral",
																		"src": "3501:4:16",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3495:5:16",
																	"nodeType": "YulIdentifier",
																	"src": "3495:5:16"
																},
																"nativeSrc": "3495:11:16",
																"nodeType": "YulFunctionCall",
																"src": "3495:11:16"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3488:3:16",
																	"nodeType": "YulTypedName",
																	"src": "3488:3:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3526:3:16",
																		"nodeType": "YulIdentifier",
																		"src": "3526:3:16"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3531:10:16",
																		"nodeType": "YulLiteral",
																		"src": "3531:10:16",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3519:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3519:6:16"
																},
																"nativeSrc": "3519:23:16",
																"nodeType": "YulFunctionCall",
																"src": "3519:23:16"
															},
															"nativeSrc": "3519:23:16",
															"nodeType": "YulExpressionStatement",
															"src": "3519:23:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3566:3:16",
																				"nodeType": "YulIdentifier",
																				"src": "3566:3:16"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3571:4:16",
																				"nodeType": "YulLiteral",
																				"src": "3571:4:16",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3562:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "3562:3:16"
																		},
																		"nativeSrc": "3562:14:16",
																		"nodeType": "YulFunctionCall",
																		"src": "3562:14:16"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3578:15:16",
																		"nodeType": "YulIdentifier",
																		"src": "3578:15:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3555:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3555:6:16"
																},
																"nativeSrc": "3555:39:16",
																"nodeType": "YulFunctionCall",
																"src": "3555:39:16"
															},
															"nativeSrc": "3555:39:16",
															"nodeType": "YulExpressionStatement",
															"src": "3555:39:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3618:3:16",
																				"nodeType": "YulIdentifier",
																				"src": "3618:3:16"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3623:4:16",
																				"nodeType": "YulLiteral",
																				"src": "3623:4:16",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3614:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "3614:3:16"
																		},
																		"nativeSrc": "3614:14:16",
																		"nodeType": "YulFunctionCall",
																		"src": "3614:14:16"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3630:10:16",
																		"nodeType": "YulIdentifier",
																		"src": "3630:10:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3607:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3607:6:16"
																},
																"nativeSrc": "3607:34:16",
																"nodeType": "YulFunctionCall",
																"src": "3607:34:16"
															},
															"nativeSrc": "3607:34:16",
															"nodeType": "YulExpressionStatement",
															"src": "3607:34:16"
														},
														{
															"nativeSrc": "3654:30:16",
															"nodeType": "YulAssignment",
															"src": "3654:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3674:3:16",
																		"nodeType": "YulIdentifier",
																		"src": "3674:3:16"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3679:4:16",
																		"nodeType": "YulLiteral",
																		"src": "3679:4:16",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3664:9:16",
																	"nodeType": "YulIdentifier",
																	"src": "3664:9:16"
																},
																"nativeSrc": "3664:20:16",
																"nodeType": "YulFunctionCall",
																"src": "3664:20:16"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3654:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3654:6:16"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2521,
														"isOffset": false,
														"isSlot": false,
														"src": "3654:6:16",
														"valueSize": 1
													},
													{
														"declaration": 2516,
														"isOffset": false,
														"isSlot": false,
														"src": "3578:15:16",
														"valueSize": 1
													},
													{
														"declaration": 2518,
														"isOffset": false,
														"isSlot": false,
														"src": "3630:10:16",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 2523,
												"nodeType": "InlineAssembly",
												"src": "3445:249:16"
											}
										]
									},
									"documentation": {
										"id": 2514,
										"nodeType": "StructuredDocumentation",
										"src": "2890:431:16",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3335:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2516,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3359:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "3351:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2515,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3351:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2518,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3384:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "3376:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2517,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3376:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3350:45:16"
									},
									"returnParameters": {
										"id": 2522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2521,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3427:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "3419:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2520,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3419:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3418:16:16"
									},
									"scope": 2526,
									"src": "3326:374:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2527,
							"src": "521:3181:16",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3580:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3580
						]
					},
					"id": 3581,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2528,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2529,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:17",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3580,
							"linearizedBaseContracts": [
								3580
							],
							"name": "Math",
							"nameLocation": "211:4:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2530,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:17",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2532,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2531,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:17"
									},
									"src": "277:29:17"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2537,
									"members": [
										{
											"id": 2533,
											"name": "Floor",
											"nameLocation": "336:5:17",
											"nodeType": "EnumValue",
											"src": "336:5:17"
										},
										{
											"id": 2534,
											"name": "Ceil",
											"nameLocation": "379:4:17",
											"nodeType": "EnumValue",
											"src": "379:4:17"
										},
										{
											"id": 2535,
											"name": "Trunc",
											"nameLocation": "421:5:17",
											"nodeType": "EnumValue",
											"src": "421:5:17"
										},
										{
											"id": 2536,
											"name": "Expand",
											"nameLocation": "451:6:17",
											"nodeType": "EnumValue",
											"src": "451:6:17"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:17",
									"nodeType": "EnumDefinition",
									"src": "312:169:17"
								},
								{
									"body": {
										"id": 2568,
										"nodeType": "Block",
										"src": "661:140:17",
										"statements": [
											{
												"id": 2567,
												"nodeType": "UncheckedBlock",
												"src": "671:124:17",
												"statements": [
													{
														"assignments": [
															2550
														],
														"declarations": [
															{
																"constant": false,
																"id": 2550,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:17",
																"nodeType": "VariableDeclaration",
																"scope": 2567,
																"src": "695:9:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2549,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2554,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2553,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2551,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2540,
																"src": "707:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2552,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2542,
																"src": "711:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2555,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2550,
																"src": "730:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2556,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2540,
																"src": "734:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2562,
														"nodeType": "IfStatement",
														"src": "726:28:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2558,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2559,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2560,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2548,
															"id": 2561,
															"nodeType": "Return",
															"src": "737:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2564,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2550,
																	"src": "782:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2565,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2548,
														"id": 2566,
														"nodeType": "Return",
														"src": "768:16:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2538,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:17",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2569,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "601:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2542,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "612:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:17"
									},
									"returnParameters": {
										"id": 2548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "646:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2544,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "652:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2546,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:17"
									},
									"scope": 3580,
									"src": "585:216:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2596,
										"nodeType": "Block",
										"src": "984:113:17",
										"statements": [
											{
												"id": 2595,
												"nodeType": "UncheckedBlock",
												"src": "994:97:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2581,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2574,
																"src": "1022:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2582,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2572,
																"src": "1026:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2588,
														"nodeType": "IfStatement",
														"src": "1018:28:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2586,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2580,
															"id": 2587,
															"nodeType": "Return",
															"src": "1029:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2590,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2572,
																		"src": "1074:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2591,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2574,
																		"src": "1078:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2593,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2580,
														"id": 2594,
														"nodeType": "Return",
														"src": "1060:20:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2570,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:17",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2572,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "924:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2574,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "935:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2573,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:17"
									},
									"returnParameters": {
										"id": 2580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2577,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "969:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2576,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2579,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "975:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:17"
									},
									"scope": 3580,
									"src": "908:189:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2638,
										"nodeType": "Block",
										"src": "1283:417:17",
										"statements": [
											{
												"id": 2637,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2611,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2609,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2600,
																"src": "1551:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2610,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2616,
														"nodeType": "IfStatement",
														"src": "1547:28:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2613,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2614,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2608,
															"id": 2615,
															"nodeType": "Return",
															"src": "1559:16:17"
														}
													},
													{
														"assignments": [
															2618
														],
														"declarations": [
															{
																"constant": false,
																"id": 2618,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:17",
																"nodeType": "VariableDeclaration",
																"scope": 2637,
																"src": "1589:9:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2617,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2622,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2619,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2600,
																"src": "1601:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2620,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2602,
																"src": "1605:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2623,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2618,
																	"src": "1624:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2624,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2600,
																	"src": "1628:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2626,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2602,
																"src": "1633:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2632,
														"nodeType": "IfStatement",
														"src": "1620:33:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2628,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2629,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2630,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2608,
															"id": 2631,
															"nodeType": "Return",
															"src": "1636:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2633,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2634,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2618,
																	"src": "1681:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2635,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2608,
														"id": 2636,
														"nodeType": "Return",
														"src": "1667:16:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2598,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:17",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2600,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2639,
												"src": "1223:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2602,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2639,
												"src": "1234:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:17"
									},
									"returnParameters": {
										"id": 2608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2605,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2639,
												"src": "1268:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2604,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2639,
												"src": "1274:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:17"
									},
									"scope": 3580,
									"src": "1207:493:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2666,
										"nodeType": "Block",
										"src": "1887:114:17",
										"statements": [
											{
												"id": 2665,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2651,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2644,
																"src": "1925:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2652,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2658,
														"nodeType": "IfStatement",
														"src": "1921:29:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2654,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2655,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2656,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2650,
															"id": 2657,
															"nodeType": "Return",
															"src": "1933:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2659,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2660,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2642,
																		"src": "1978:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2661,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2644,
																		"src": "1982:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2663,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2650,
														"id": 2664,
														"nodeType": "Return",
														"src": "1964:20:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2640,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:17",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2642,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1827:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2644,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1838:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:17"
									},
									"returnParameters": {
										"id": 2650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1872:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2646,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2649,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2667,
												"src": "1878:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:17"
									},
									"scope": 3580,
									"src": "1811:190:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2694,
										"nodeType": "Block",
										"src": "2198:114:17",
										"statements": [
											{
												"id": 2693,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2681,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2679,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2672,
																"src": "2236:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2680,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2686,
														"nodeType": "IfStatement",
														"src": "2232:29:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2683,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2684,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2678,
															"id": 2685,
															"nodeType": "Return",
															"src": "2244:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2688,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2670,
																		"src": "2289:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2689,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2672,
																		"src": "2293:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2691,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2678,
														"id": 2692,
														"nodeType": "Return",
														"src": "2275:20:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2668,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:17",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2695,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2670,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2138:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2672,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2149:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:17"
									},
									"returnParameters": {
										"id": 2678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2183:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2674,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2677,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2695,
												"src": "2189:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:17"
									},
									"scope": 3580,
									"src": "2122:190:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2712,
										"nodeType": "Block",
										"src": "2449:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2707,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2705,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2698,
															"src": "2466:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2706,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2700,
															"src": "2470:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2709,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2700,
														"src": "2478:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:17",
													"trueExpression": {
														"id": 2708,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2698,
														"src": "2474:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2704,
												"id": 2711,
												"nodeType": "Return",
												"src": "2459:20:17"
											}
										]
									},
									"documentation": {
										"id": 2696,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:17",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2698,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "2395:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2700,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "2406:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:17"
									},
									"returnParameters": {
										"id": 2704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2703,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2713,
												"src": "2440:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:17"
									},
									"scope": 3580,
									"src": "2382:104:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2730,
										"nodeType": "Block",
										"src": "2624:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2725,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2723,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2716,
															"src": "2641:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2724,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2718,
															"src": "2645:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2727,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2718,
														"src": "2653:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:17",
													"trueExpression": {
														"id": 2726,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2716,
														"src": "2649:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2722,
												"id": 2729,
												"nodeType": "Return",
												"src": "2634:20:17"
											}
										]
									},
									"documentation": {
										"id": 2714,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:17",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2716,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "2570:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2718,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "2581:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:17"
									},
									"returnParameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2721,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2731,
												"src": "2615:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:17"
									},
									"scope": 3580,
									"src": "2557:104:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2753,
										"nodeType": "Block",
										"src": "2845:82:17",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2741,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2734,
																	"src": "2900:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2742,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2736,
																	"src": "2904:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2744,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2750,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2747,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2745,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2734,
																		"src": "2910:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2746,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2736,
																		"src": "2914:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2748,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2740,
												"id": 2752,
												"nodeType": "Return",
												"src": "2892:28:17"
											}
										]
									},
									"documentation": {
										"id": 2732,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:17",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2734,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2754,
												"src": "2791:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2736,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2754,
												"src": "2802:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:17"
									},
									"returnParameters": {
										"id": 2740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2739,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2754,
												"src": "2836:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:17"
									},
									"scope": 3580,
									"src": "2774:153:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2787,
										"nodeType": "Block",
										"src": "3219:260:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2764,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2759,
														"src": "3233:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2772,
												"nodeType": "IfStatement",
												"src": "3229:127:17",
												"trueBody": {
													"id": 2771,
													"nodeType": "Block",
													"src": "3241:115:17",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2767,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2757,
																	"src": "3340:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2768,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2759,
																	"src": "3344:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2763,
															"id": 2770,
															"nodeType": "Return",
															"src": "3333:12:17"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2775,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2773,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2757,
															"src": "3444:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2784,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2782,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2779,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2777,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2757,
																			"src": "3458:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2778,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2780,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2781,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2759,
																"src": "3467:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2783,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2785,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:17",
													"trueExpression": {
														"hexValue": "30",
														"id": 2776,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2763,
												"id": 2786,
												"nodeType": "Return",
												"src": "3437:35:17"
											}
										]
									},
									"documentation": {
										"id": 2755,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:17",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2788,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2757,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2788,
												"src": "3165:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2759,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2788,
												"src": "3176:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:17"
									},
									"returnParameters": {
										"id": 2763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2788,
												"src": "3210:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:17"
									},
									"scope": 3580,
									"src": "3148:331:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2913,
										"nodeType": "Block",
										"src": "3901:4018:17",
										"statements": [
											{
												"id": 2912,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:17",
												"statements": [
													{
														"assignments": [
															2801
														],
														"declarations": [
															{
																"constant": false,
																"id": 2801,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:17",
																"nodeType": "VariableDeclaration",
																"scope": 2912,
																"src": "4232:13:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2800,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2805,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2802,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2791,
																"src": "4248:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2803,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2793,
																"src": "4252:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:17"
													},
													{
														"assignments": [
															2807
														],
														"declarations": [
															{
																"constant": false,
																"id": 2807,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:17",
																"nodeType": "VariableDeclaration",
																"scope": 2912,
																"src": "4312:13:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2806,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2808,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:17"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:17",
															"nodeType": "YulBlock",
															"src": "4392:122:17",
															"statements": [
																{
																	"nativeSrc": "4410:30:17",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:17"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:17"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:17",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:17",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:17",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:17"
																				},
																				"nativeSrc": "4433:6:17",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:17"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:17",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:17"
																		},
																		"nativeSrc": "4420:20:17",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:17"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:17",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:17",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:17",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:17"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:17"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:17",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:17"
																				},
																				"nativeSrc": "4470:14:17",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:17",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:17"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:17"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:17",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:17"
																				},
																				"nativeSrc": "4486:13:17",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:17"
																		},
																		"nativeSrc": "4466:34:17",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2807,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2791,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2793,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:17",
																"valueSize": 1
															}
														],
														"id": 2809,
														"nodeType": "InlineAssembly",
														"src": "4383:131:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2812,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2810,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2807,
																"src": "4595:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2811,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2818,
														"nodeType": "IfStatement",
														"src": "4591:368:17",
														"trueBody": {
															"id": 2817,
															"nodeType": "Block",
															"src": "4607:352:17",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2815,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2813,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2801,
																			"src": "4925:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2814,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2795,
																			"src": "4933:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2799,
																	"id": 2816,
																	"nodeType": "Return",
																	"src": "4918:26:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2821,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2819,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2795,
																"src": "5065:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2820,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2807,
																"src": "5080:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2826,
														"nodeType": "IfStatement",
														"src": "5061:88:17",
														"trueBody": {
															"id": 2825,
															"nodeType": "Block",
															"src": "5087:62:17",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2822,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2532,
																			"src": "5112:20:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																				"typeString": "function () pure returns (error)"
																			}
																		},
																		"id": 2823,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2824,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:17"
																}
															]
														}
													},
													{
														"assignments": [
															2828
														],
														"declarations": [
															{
																"constant": false,
																"id": 2828,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:17",
																"nodeType": "VariableDeclaration",
																"scope": 2912,
																"src": "5404:17:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2827,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2829,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:17"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:17",
															"nodeType": "YulBlock",
															"src": "5444:291:17",
															"statements": [
																{
																	"nativeSrc": "5513:38:17",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:17"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:17"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:17",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:17"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:17",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:17"
																		},
																		"nativeSrc": "5526:25:17",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:17"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:17",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:17"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:17",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:17",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:17"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:17"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:17",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:17"
																				},
																				"nativeSrc": "5653:20:17",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:17"
																		},
																		"nativeSrc": "5642:32:17",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:17"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:17",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:17"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:17",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:17"
																		},
																		"nativeSrc": "5700:21:17",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2795,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2807,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2807,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2828,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2828,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2828,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2791,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2793,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:17",
																"valueSize": 1
															}
														],
														"id": 2830,
														"nodeType": "InlineAssembly",
														"src": "5435:300:17"
													},
													{
														"assignments": [
															2832
														],
														"declarations": [
															{
																"constant": false,
																"id": 2832,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:17",
																"nodeType": "VariableDeclaration",
																"scope": 2912,
																"src": "5939:12:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2831,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2839,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2833,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2795,
																"src": "5954:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2836,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2834,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2835,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2795,
																			"src": "5973:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2837,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:17"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:17",
															"nodeType": "YulBlock",
															"src": "6008:362:17",
															"statements": [
																{
																	"nativeSrc": "6073:37:17",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:17",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:17"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:17",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:17"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:17"
																		},
																		"nativeSrc": "6088:22:17",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:17"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:17",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:17"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:17",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:17"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:17",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:17"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:17"
																		},
																		"nativeSrc": "6186:16:17",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:17"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:17",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:17",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:17",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:17",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:17"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:17",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:17"
																						},
																						"nativeSrc": "6333:12:17",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:17"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:17",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:17"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:17",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:17"
																				},
																				"nativeSrc": "6329:23:17",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:17"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:17",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:17",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:17"
																		},
																		"nativeSrc": "6325:31:17",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:17"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:17",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2795,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2795,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2801,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2832,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2832,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2832,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2832,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2832,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:17",
																"valueSize": 1
															}
														],
														"id": 2840,
														"nodeType": "InlineAssembly",
														"src": "5999:371:17"
													},
													{
														"expression": {
															"id": 2845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2841,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2801,
																"src": "6436:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2844,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2842,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2807,
																	"src": "6445:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2843,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2832,
																	"src": "6453:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2846,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:17"
													},
													{
														"assignments": [
															2848
														],
														"declarations": [
															{
																"constant": false,
																"id": 2848,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:17",
																"nodeType": "VariableDeclaration",
																"scope": 2912,
																"src": "6775:15:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2847,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2855,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2851,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2849,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2850,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2795,
																			"src": "6798:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2852,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2853,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:17"
													},
													{
														"expression": {
															"id": 2862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2856,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2848,
																"src": "7031:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2857,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2858,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2795,
																		"src": "7046:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2859,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2848,
																		"src": "7060:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2863,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:17"
													},
													{
														"expression": {
															"id": 2870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2864,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2848,
																"src": "7100:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2866,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2795,
																		"src": "7115:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2867,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2848,
																		"src": "7129:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2871,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:17"
													},
													{
														"expression": {
															"id": 2878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2872,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2848,
																"src": "7170:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2873,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2874,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2795,
																		"src": "7185:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2875,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2848,
																		"src": "7199:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2879,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:17"
													},
													{
														"expression": {
															"id": 2886,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2880,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2848,
																"src": "7240:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2885,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2881,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2882,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2795,
																		"src": "7255:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2883,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2848,
																		"src": "7269:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2887,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:17"
													},
													{
														"expression": {
															"id": 2894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2888,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2848,
																"src": "7310:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2893,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2892,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2890,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2795,
																		"src": "7325:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2891,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2848,
																		"src": "7339:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2895,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:17"
													},
													{
														"expression": {
															"id": 2902,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2896,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2848,
																"src": "7381:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2901,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2897,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2898,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2795,
																		"src": "7396:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2899,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2848,
																		"src": "7410:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2903,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:17"
													},
													{
														"expression": {
															"id": 2908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2904,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2798,
																"src": "7851:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2905,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2801,
																	"src": "7860:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2906,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2848,
																	"src": "7868:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2909,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:17"
													},
													{
														"expression": {
															"id": 2910,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2798,
															"src": "7896:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2799,
														"id": 2911,
														"nodeType": "Return",
														"src": "7889:13:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2789,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:17",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2914,
												"src": "3819:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2793,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2914,
												"src": "3830:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2795,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2914,
												"src": "3841:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2794,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:17"
									},
									"returnParameters": {
										"id": 2799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2798,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2914,
												"src": "3885:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2797,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:17"
									},
									"scope": 3580,
									"src": "3803:4116:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2956,
										"nodeType": "Block",
										"src": "8161:192:17",
										"statements": [
											{
												"assignments": [
													2930
												],
												"declarations": [
													{
														"constant": false,
														"id": 2930,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 2956,
														"src": "8171:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2929,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2936,
												"initialValue": {
													"arguments": [
														{
															"id": 2932,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2917,
															"src": "8195:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2933,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2919,
															"src": "8198:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2934,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2921,
															"src": "8201:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2931,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2914,
															2957
														],
														"referencedDeclaration": 2914,
														"src": "8188:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2938,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2924,
																"src": "8244:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2537",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2537",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2937,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3579,
															"src": "8227:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2537_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2946,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2941,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2917,
																	"src": "8264:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2942,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2919,
																	"src": "8267:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2943,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2921,
																	"src": "8270:11:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2940,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2944,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2945,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2953,
												"nodeType": "IfStatement",
												"src": "8223:101:17",
												"trueBody": {
													"id": 2952,
													"nodeType": "Block",
													"src": "8288:36:17",
													"statements": [
														{
															"expression": {
																"id": 2950,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2948,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2930,
																	"src": "8302:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2951,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:17"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2954,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2930,
													"src": "8340:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2928,
												"id": 2955,
												"nodeType": "Return",
												"src": "8333:13:17"
											}
										]
									},
									"documentation": {
										"id": 2915,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:17",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2917,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2957,
												"src": "8067:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2919,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2957,
												"src": "8078:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2921,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2957,
												"src": "8089:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2920,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2924,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2957,
												"src": "8110:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2537",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2923,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2922,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2537,
														"src": "8110:8:17"
													},
													"referencedDeclaration": 2537,
													"src": "8110:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2537",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:17"
									},
									"returnParameters": {
										"id": 2928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2927,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2957,
												"src": "8152:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:17"
									},
									"scope": 3580,
									"src": "8051:302:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3068,
										"nodeType": "Block",
										"src": "8644:1585:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2965,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2960,
														"src": "8658:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2966,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2971,
												"nodeType": "IfStatement",
												"src": "8654:45:17",
												"trueBody": {
													"id": 2970,
													"nodeType": "Block",
													"src": "8666:33:17",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2968,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2964,
															"id": 2969,
															"nodeType": "Return",
															"src": "8680:8:17"
														}
													]
												}
											},
											{
												"assignments": [
													2973
												],
												"declarations": [
													{
														"constant": false,
														"id": 2973,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3068,
														"src": "9378:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2972,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2982,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2974,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2976,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2960,
																			"src": "9406:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2975,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3236,
																			3271
																		],
																		"referencedDeclaration": 3236,
																		"src": "9401:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2980,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:17"
											},
											{
												"id": 3067,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:17",
												"statements": [
													{
														"expression": {
															"id": 2992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2983,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "9839:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2988,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2984,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "9849:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2987,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2985,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "9858:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2986,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "9862:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2989,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2990,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2993,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:17"
													},
													{
														"expression": {
															"id": 3003,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2994,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "9888:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2999,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2995,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "9898:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2998,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2996,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "9907:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2997,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "9911:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3000,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3004,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:17"
													},
													{
														"expression": {
															"id": 3014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3005,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "9937:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3013,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3010,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3006,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "9947:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3009,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3007,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "9956:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3008,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "9960:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3011,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3015,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:17"
													},
													{
														"expression": {
															"id": 3025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3016,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "9986:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3021,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3017,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "9996:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3020,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3018,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "10005:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3019,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "10009:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3022,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3023,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3026,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:17"
													},
													{
														"expression": {
															"id": 3036,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3027,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "10035:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3035,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3032,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3028,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "10045:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3031,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3029,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "10054:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3030,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "10058:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3033,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3034,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3037,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:17"
													},
													{
														"expression": {
															"id": 3047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3038,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "10084:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3046,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3039,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "10094:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3042,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3040,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "10103:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3041,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "10107:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3044,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3045,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3048,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:17"
													},
													{
														"expression": {
															"id": 3058,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3049,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "10133:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3057,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3054,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3050,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "10143:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3053,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3051,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2960,
																					"src": "10152:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3052,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2973,
																					"src": "10156:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3055,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3056,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3059,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:17"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3061,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2973,
																	"src": "10193:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3062,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2960,
																		"src": "10201:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3063,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2973,
																		"src": "10205:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3060,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "10189:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3065,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2964,
														"id": 3066,
														"nodeType": "Return",
														"src": "10182:30:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2958,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:17",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2960,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3069,
												"src": "8601:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:17"
									},
									"returnParameters": {
										"id": 2964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2963,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3069,
												"src": "8635:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:17"
									},
									"scope": 3580,
									"src": "8587:1642:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3103,
										"nodeType": "Block",
										"src": "10405:164:17",
										"statements": [
											{
												"id": 3102,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:17",
												"statements": [
													{
														"assignments": [
															3081
														],
														"declarations": [
															{
																"constant": false,
																"id": 3081,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3102,
																"src": "10439:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3080,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3085,
														"initialValue": {
															"arguments": [
																{
																	"id": 3083,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3072,
																	"src": "10461:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3082,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3069,
																	3104
																],
																"referencedDeclaration": 3069,
																"src": "10456:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3086,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3081,
																"src": "10484:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3095,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3088,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3075,
																						"src": "10511:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3087,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3579,
																					"src": "10494:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2537_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3089,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3094,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3092,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3090,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3081,
																						"src": "10524:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3091,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3081,
																						"src": "10533:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3093,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3072,
																					"src": "10542:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3097,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3098,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3096,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3099,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3079,
														"id": 3101,
														"nodeType": "Return",
														"src": "10477:75:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3070,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:17",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3072,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3104,
												"src": "10343:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3075,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3104,
												"src": "10354:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2537",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3074,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3073,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2537,
														"src": "10354:8:17"
													},
													"referencedDeclaration": 2537,
													"src": "10354:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2537",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:17"
									},
									"returnParameters": {
										"id": 3079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3078,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3104,
												"src": "10396:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:17"
									},
									"scope": 3580,
									"src": "10329:240:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3235,
										"nodeType": "Block",
										"src": "10760:922:17",
										"statements": [
											{
												"assignments": [
													3113
												],
												"declarations": [
													{
														"constant": false,
														"id": 3113,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3235,
														"src": "10770:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3112,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3115,
												"initialValue": {
													"hexValue": "30",
													"id": 3114,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:17"
											},
											{
												"id": 3232,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3116,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "10826:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3130,
														"nodeType": "IfStatement",
														"src": "10822:99:17",
														"trueBody": {
															"id": 3129,
															"nodeType": "Block",
															"src": "10844:77:17",
															"statements": [
																{
																	"expression": {
																		"id": 3123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3121,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "10862:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3124,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:17"
																},
																{
																	"expression": {
																		"id": 3127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3125,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "10893:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3126,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3128,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3131,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "10938:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3145,
														"nodeType": "IfStatement",
														"src": "10934:96:17",
														"trueBody": {
															"id": 3144,
															"nodeType": "Block",
															"src": "10955:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3136,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "10973:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3139,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:17"
																},
																{
																	"expression": {
																		"id": 3142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3140,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11003:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3143,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3148,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3146,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "11047:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3147,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3149,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3160,
														"nodeType": "IfStatement",
														"src": "11043:96:17",
														"trueBody": {
															"id": 3159,
															"nodeType": "Block",
															"src": "11064:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3151,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "11082:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3154,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:17"
																},
																{
																	"expression": {
																		"id": 3157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3155,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11112:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3156,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3158,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3161,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "11156:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3164,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3175,
														"nodeType": "IfStatement",
														"src": "11152:96:17",
														"trueBody": {
															"id": 3174,
															"nodeType": "Block",
															"src": "11173:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3166,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "11191:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3169,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:17"
																},
																{
																	"expression": {
																		"id": 3172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3170,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11221:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3173,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3176,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "11265:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3179,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3190,
														"nodeType": "IfStatement",
														"src": "11261:93:17",
														"trueBody": {
															"id": 3189,
															"nodeType": "Block",
															"src": "11281:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3181,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "11299:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3182,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3184,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:17"
																},
																{
																	"expression": {
																		"id": 3187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3185,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11328:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3188,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3195,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3191,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "11371:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3194,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3205,
														"nodeType": "IfStatement",
														"src": "11367:93:17",
														"trueBody": {
															"id": 3204,
															"nodeType": "Block",
															"src": "11387:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3196,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "11405:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3197,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3199,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:17"
																},
																{
																	"expression": {
																		"id": 3202,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3200,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11434:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3201,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3203,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3208,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3206,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "11477:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3209,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3220,
														"nodeType": "IfStatement",
														"src": "11473:93:17",
														"trueBody": {
															"id": 3219,
															"nodeType": "Block",
															"src": "11493:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3213,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3211,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3107,
																			"src": "11511:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3214,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:17"
																},
																{
																	"expression": {
																		"id": 3217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3215,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11540:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3216,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3218,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3221,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3107,
																	"src": "11583:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3224,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3231,
														"nodeType": "IfStatement",
														"src": "11579:64:17",
														"trueBody": {
															"id": 3230,
															"nodeType": "Block",
															"src": "11599:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3228,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3226,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3113,
																			"src": "11617:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3227,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3229,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3233,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3113,
													"src": "11669:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3111,
												"id": 3234,
												"nodeType": "Return",
												"src": "11662:13:17"
											}
										]
									},
									"documentation": {
										"id": 3105,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:17",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3107,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3236,
												"src": "10713:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:17"
									},
									"returnParameters": {
										"id": 3111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3236,
												"src": "10751:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:17"
									},
									"scope": 3580,
									"src": "10699:983:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3270,
										"nodeType": "Block",
										"src": "11915:168:17",
										"statements": [
											{
												"id": 3269,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:17",
												"statements": [
													{
														"assignments": [
															3248
														],
														"declarations": [
															{
																"constant": false,
																"id": 3248,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3269,
																"src": "11949:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3247,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3252,
														"initialValue": {
															"arguments": [
																{
																	"id": 3250,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3239,
																	"src": "11971:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3249,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3236,
																	3271
																],
																"referencedDeclaration": 3236,
																"src": "11966:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3253,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3248,
																"src": "11998:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3262,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3255,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3242,
																						"src": "12025:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3254,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3579,
																					"src": "12008:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2537_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3256,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3261,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3259,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3257,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3258,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3248,
																						"src": "12043:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3260,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3239,
																					"src": "12052:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3264,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3265,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3266,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3246,
														"id": 3268,
														"nodeType": "Return",
														"src": "11991:75:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3237,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:17",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3239,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3271,
												"src": "11849:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3242,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3271,
												"src": "11864:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2537",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3241,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3240,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2537,
														"src": "11864:8:17"
													},
													"referencedDeclaration": 2537,
													"src": "11864:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2537",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:17"
									},
									"returnParameters": {
										"id": 3246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3271,
												"src": "11906:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:17"
									},
									"scope": 3580,
									"src": "11835:248:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3399,
										"nodeType": "Block",
										"src": "12276:854:17",
										"statements": [
											{
												"assignments": [
													3280
												],
												"declarations": [
													{
														"constant": false,
														"id": 3280,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3399,
														"src": "12286:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3279,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3282,
												"initialValue": {
													"hexValue": "30",
													"id": 3281,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:17"
											},
											{
												"id": 3396,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3283,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "12342:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3286,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3299,
														"nodeType": "IfStatement",
														"src": "12338:103:17",
														"trueBody": {
															"id": 3298,
															"nodeType": "Block",
															"src": "12361:80:17",
															"statements": [
																{
																	"expression": {
																		"id": 3292,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3288,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "12379:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3291,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3289,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3290,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3293,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:17"
																},
																{
																	"expression": {
																		"id": 3296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3294,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "12414:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3295,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3297,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3300,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "12458:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3303,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3316,
														"nodeType": "IfStatement",
														"src": "12454:103:17",
														"trueBody": {
															"id": 3315,
															"nodeType": "Block",
															"src": "12477:80:17",
															"statements": [
																{
																	"expression": {
																		"id": 3309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3305,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "12495:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3306,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3307,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3310,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:17"
																},
																{
																	"expression": {
																		"id": 3313,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3311,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "12530:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3312,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3314,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3317,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "12574:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3320,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3318,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3333,
														"nodeType": "IfStatement",
														"src": "12570:103:17",
														"trueBody": {
															"id": 3332,
															"nodeType": "Block",
															"src": "12593:80:17",
															"statements": [
																{
																	"expression": {
																		"id": 3326,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3322,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "12611:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3323,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3327,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:17"
																},
																{
																	"expression": {
																		"id": 3330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3328,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "12646:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3329,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3331,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3334,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "12690:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3337,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3335,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3350,
														"nodeType": "IfStatement",
														"src": "12686:100:17",
														"trueBody": {
															"id": 3349,
															"nodeType": "Block",
															"src": "12708:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3339,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "12726:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3342,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3340,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3341,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3344,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:17"
																},
																{
																	"expression": {
																		"id": 3347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3345,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "12760:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3348,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3351,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "12803:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3367,
														"nodeType": "IfStatement",
														"src": "12799:100:17",
														"trueBody": {
															"id": 3366,
															"nodeType": "Block",
															"src": "12821:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3360,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3356,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "12839:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3359,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3357,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3358,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3361,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:17"
																},
																{
																	"expression": {
																		"id": 3364,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3362,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "12873:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3363,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3365,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3372,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3368,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "12916:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3371,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3370,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3384,
														"nodeType": "IfStatement",
														"src": "12912:100:17",
														"trueBody": {
															"id": 3383,
															"nodeType": "Block",
															"src": "12934:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3373,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3274,
																			"src": "12952:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3376,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3374,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3375,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3378,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:17"
																},
																{
																	"expression": {
																		"id": 3381,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3379,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "12986:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3380,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3382,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3385,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3274,
																"src": "13029:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3388,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3395,
														"nodeType": "IfStatement",
														"src": "13025:66:17",
														"trueBody": {
															"id": 3394,
															"nodeType": "Block",
															"src": "13047:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3390,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3280,
																			"src": "13065:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3391,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3393,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3397,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3280,
													"src": "13117:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3278,
												"id": 3398,
												"nodeType": "Return",
												"src": "13110:13:17"
											}
										]
									},
									"documentation": {
										"id": 3272,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:17",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3400,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3274,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3400,
												"src": "12229:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:17"
									},
									"returnParameters": {
										"id": 3278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3400,
												"src": "12267:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:17"
									},
									"scope": 3580,
									"src": "12214:916:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3434,
										"nodeType": "Block",
										"src": "13365:170:17",
										"statements": [
											{
												"id": 3433,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:17",
												"statements": [
													{
														"assignments": [
															3412
														],
														"declarations": [
															{
																"constant": false,
																"id": 3412,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3433,
																"src": "13399:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3411,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3416,
														"initialValue": {
															"arguments": [
																{
																	"id": 3414,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3403,
																	"src": "13422:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3413,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3400,
																	3435
																],
																"referencedDeclaration": 3400,
																"src": "13416:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3431,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3417,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3412,
																"src": "13449:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3419,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3406,
																						"src": "13476:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3418,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3579,
																					"src": "13459:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2537_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3420,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3425,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3423,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3421,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3422,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3412,
																						"src": "13495:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3424,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3403,
																					"src": "13504:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3427,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3430,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3410,
														"id": 3432,
														"nodeType": "Return",
														"src": "13442:76:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3401,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:17",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3435,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3403,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3435,
												"src": "13299:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3406,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3435,
												"src": "13314:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2537",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3405,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3404,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2537,
														"src": "13314:8:17"
													},
													"referencedDeclaration": 2537,
													"src": "13314:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2537",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:17"
									},
									"returnParameters": {
										"id": 3410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3409,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3435,
												"src": "13356:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:17"
									},
									"scope": 3580,
									"src": "13284:251:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3521,
										"nodeType": "Block",
										"src": "13855:600:17",
										"statements": [
											{
												"assignments": [
													3444
												],
												"declarations": [
													{
														"constant": false,
														"id": 3444,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3521,
														"src": "13865:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3443,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3446,
												"initialValue": {
													"hexValue": "30",
													"id": 3445,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:17"
											},
											{
												"id": 3518,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3451,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3447,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3438,
																	"src": "13921:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3450,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3461,
														"nodeType": "IfStatement",
														"src": "13917:98:17",
														"trueBody": {
															"id": 3460,
															"nodeType": "Block",
															"src": "13939:76:17",
															"statements": [
																{
																	"expression": {
																		"id": 3454,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3452,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3438,
																			"src": "13957:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3453,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3455,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:17"
																},
																{
																	"expression": {
																		"id": 3458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3456,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3444,
																			"src": "13988:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3459,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3464,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3462,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3438,
																	"src": "14032:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3465,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3476,
														"nodeType": "IfStatement",
														"src": "14028:95:17",
														"trueBody": {
															"id": 3475,
															"nodeType": "Block",
															"src": "14049:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3469,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3467,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3438,
																			"src": "14067:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3468,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3470,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:17"
																},
																{
																	"expression": {
																		"id": 3473,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3471,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3444,
																			"src": "14097:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3472,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3474,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3481,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3479,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3477,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3438,
																	"src": "14140:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3491,
														"nodeType": "IfStatement",
														"src": "14136:95:17",
														"trueBody": {
															"id": 3490,
															"nodeType": "Block",
															"src": "14157:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3482,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3438,
																			"src": "14175:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3483,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3485,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:17"
																},
																{
																	"expression": {
																		"id": 3488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3486,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3444,
																			"src": "14205:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3487,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3489,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3494,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3492,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3438,
																	"src": "14248:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3493,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3506,
														"nodeType": "IfStatement",
														"src": "14244:95:17",
														"trueBody": {
															"id": 3505,
															"nodeType": "Block",
															"src": "14265:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3497,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3438,
																			"src": "14283:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3500,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:17"
																},
																{
																	"expression": {
																		"id": 3503,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3501,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3444,
																			"src": "14313:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3502,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3504,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3507,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3438,
																	"src": "14356:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3517,
														"nodeType": "IfStatement",
														"src": "14352:64:17",
														"trueBody": {
															"id": 3516,
															"nodeType": "Block",
															"src": "14372:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3512,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3444,
																			"src": "14390:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3513,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3515,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3519,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3444,
													"src": "14442:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3442,
												"id": 3520,
												"nodeType": "Return",
												"src": "14435:13:17"
											}
										]
									},
									"documentation": {
										"id": 3436,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:17",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3438,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3522,
												"src": "13808:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:17"
									},
									"returnParameters": {
										"id": 3442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3441,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3522,
												"src": "13846:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:17"
									},
									"scope": 3580,
									"src": "13792:663:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3559,
										"nodeType": "Block",
										"src": "14692:177:17",
										"statements": [
											{
												"id": 3558,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:17",
												"statements": [
													{
														"assignments": [
															3534
														],
														"declarations": [
															{
																"constant": false,
																"id": 3534,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3558,
																"src": "14726:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3533,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3538,
														"initialValue": {
															"arguments": [
																{
																	"id": 3536,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3525,
																	"src": "14750:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3535,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3522,
																	3560
																],
																"referencedDeclaration": 3522,
																"src": "14743:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3539,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3534,
																"src": "14777:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3541,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3528,
																						"src": "14804:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2537",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3540,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3579,
																					"src": "14787:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2537_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3542,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3550,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3548,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3543,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3546,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3544,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3534,
																									"src": "14823:6:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3545,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3547,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3549,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3525,
																					"src": "14838:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3553,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3555,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3532,
														"id": 3557,
														"nodeType": "Return",
														"src": "14770:82:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3523,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:17",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3525,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3560,
												"src": "14626:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3528,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3560,
												"src": "14641:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2537",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3527,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3526,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2537,
														"src": "14641:8:17"
													},
													"referencedDeclaration": 2537,
													"src": "14641:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2537",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:17"
									},
									"returnParameters": {
										"id": 3532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3560,
												"src": "14683:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:17"
									},
									"scope": 3580,
									"src": "14610:259:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3578,
										"nodeType": "Block",
										"src": "15067:48:17",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3571,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3564,
																	"src": "15090:8:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2537",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2537",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3570,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3569,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:17",
																	"typeDescriptions": {}
																}
															},
															"id": 3572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3575,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3568,
												"id": 3577,
												"nodeType": "Return",
												"src": "15077:31:17"
											}
										]
									},
									"documentation": {
										"id": 3561,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:17",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3564,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3579,
												"src": "15019:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2537",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3563,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3562,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2537,
														"src": "15019:8:17"
													},
													"referencedDeclaration": 2537,
													"src": "15019:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2537",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:17"
									},
									"returnParameters": {
										"id": 3568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3579,
												"src": "15061:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3566,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:17"
									},
									"scope": 3580,
									"src": "14993:122:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3581,
							"src": "203:14914:17",
							"usedErrors": [
								2532
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:17"
				},
				"id": 17
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3685
						]
					},
					"id": 3686,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3582,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3583,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:18",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3685,
							"linearizedBaseContracts": [
								3685
							],
							"name": "SignedMath",
							"nameLocation": "224:10:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3600,
										"nodeType": "Block",
										"src": "376:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3593,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3586,
															"src": "393:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3594,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3588,
															"src": "397:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3597,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3588,
														"src": "405:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:18",
													"trueExpression": {
														"id": 3596,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3586,
														"src": "401:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3592,
												"id": 3599,
												"nodeType": "Return",
												"src": "386:20:18"
											}
										]
									},
									"documentation": {
										"id": 3584,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:18",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3586,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "325:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3585,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3588,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "335:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3587,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:18"
									},
									"returnParameters": {
										"id": 3592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3591,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "368:6:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3590,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:18"
									},
									"scope": 3685,
									"src": "312:101:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3618,
										"nodeType": "Block",
										"src": "555:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3613,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3611,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3604,
															"src": "572:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3612,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3606,
															"src": "576:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3615,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3606,
														"src": "584:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:18",
													"trueExpression": {
														"id": 3614,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3604,
														"src": "580:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3610,
												"id": 3617,
												"nodeType": "Return",
												"src": "565:20:18"
											}
										]
									},
									"documentation": {
										"id": 3602,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:18",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3619,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3604,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "504:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3603,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3606,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "514:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3605,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:18"
									},
									"returnParameters": {
										"id": 3610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3609,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3619,
												"src": "547:6:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3608,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:18"
									},
									"scope": 3685,
									"src": "491:101:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3662,
										"nodeType": "Block",
										"src": "797:162:18",
										"statements": [
											{
												"assignments": [
													3630
												],
												"declarations": [
													{
														"constant": false,
														"id": 3630,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:18",
														"nodeType": "VariableDeclaration",
														"scope": 3662,
														"src": "859:8:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3629,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3643,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3633,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3631,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3622,
																	"src": "871:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3632,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3624,
																	"src": "875:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3634,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3640,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3637,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3635,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3622,
																				"src": "882:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3636,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3624,
																				"src": "886:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3638,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3639,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3641,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:18"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3644,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3630,
														"src": "911:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3652,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3649,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3630,
																						"src": "931:1:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3648,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3647,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:18",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3650,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:18",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3651,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3646,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3645,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3653,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3656,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3654,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3622,
																				"src": "945:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3655,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3624,
																				"src": "949:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3657,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3659,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3628,
												"id": 3661,
												"nodeType": "Return",
												"src": "904:48:18"
											}
										]
									},
									"documentation": {
										"id": 3620,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:18",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3622,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3663,
												"src": "746:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3621,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3624,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3663,
												"src": "756:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3623,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:18"
									},
									"returnParameters": {
										"id": 3628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3627,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3663,
												"src": "789:6:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3626,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:18"
									},
									"scope": 3685,
									"src": "729:230:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3683,
										"nodeType": "Block",
										"src": "1103:158:18",
										"statements": [
											{
												"id": 3682,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:18",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3675,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3673,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3666,
																			"src": "1228:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3674,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:18",
																		"subExpression": {
																			"id": 3677,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3666,
																			"src": "1242:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3679,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:18",
																	"trueExpression": {
																		"id": 3676,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3666,
																		"src": "1237:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3672,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3671,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 3680,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3670,
														"id": 3681,
														"nodeType": "Return",
														"src": "1213:31:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3664,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:18",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3684,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3666,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3684,
												"src": "1061:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3665,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:18"
									},
									"returnParameters": {
										"id": 3670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3684,
												"src": "1094:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:18"
									},
									"scope": 3685,
									"src": "1048:213:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3686,
							"src": "216:1047:18",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:18"
				},
				"id": 18
			},
			"contracts/CSDP.sol": {
				"ast": {
					"absolutePath": "contracts/CSDP.sol",
					"exportedSymbols": {
						"CSDP": [
							3875
						],
						"Context": [
							1213
						],
						"ECDSA": [
							2225
						],
						"EIP712": [
							2452
						],
						"ERC20": [
							889
						],
						"ERC20Permit": [
							1121
						],
						"IERC20Permit": [
							1183
						],
						"Nonces": [
							1281
						],
						"Ownable": [
							147
						],
						"ReentrancyGuard": [
							374
						]
					},
					"id": 3876,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3687,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3688,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3876,
							"sourceUnit": 148,
							"src": "61:52:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3689,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3876,
							"sourceUnit": 1122,
							"src": "115:72:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 3690,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3876,
							"sourceUnit": 375,
							"src": "189:62:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3691,
										"name": "ERC20",
										"nameLocations": [
											"272:5:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 889,
										"src": "272:5:19"
									},
									"id": 3692,
									"nodeType": "InheritanceSpecifier",
									"src": "272:5:19"
								},
								{
									"baseName": {
										"id": 3693,
										"name": "ERC20Permit",
										"nameLocations": [
											"279:11:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1121,
										"src": "279:11:19"
									},
									"id": 3694,
									"nodeType": "InheritanceSpecifier",
									"src": "279:11:19"
								},
								{
									"baseName": {
										"id": 3695,
										"name": "Ownable",
										"nameLocations": [
											"292:7:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "292:7:19"
									},
									"id": 3696,
									"nodeType": "InheritanceSpecifier",
									"src": "292:7:19"
								},
								{
									"baseName": {
										"id": 3697,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"301:15:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 374,
										"src": "301:15:19"
									},
									"id": 3698,
									"nodeType": "InheritanceSpecifier",
									"src": "301:15:19"
								}
							],
							"canonicalName": "CSDP",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3875,
							"linearizedBaseContracts": [
								3875,
								374,
								147,
								1121,
								1281,
								2452,
								172,
								1183,
								889,
								214,
								1147,
								967,
								1213
							],
							"name": "CSDP",
							"nameLocation": "264:4:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "7ff9b596",
									"id": 3700,
									"mutability": "mutable",
									"name": "tokenPrice",
									"nameLocation": "339:10:19",
									"nodeType": "VariableDeclaration",
									"scope": 3875,
									"src": "324:25:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3699,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "324:7:19",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 3702,
									"mutability": "mutable",
									"name": "totalTokenSupply",
									"nameLocation": "419:16:19",
									"nodeType": "VariableDeclaration",
									"scope": 3875,
									"src": "403:32:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3701,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "403:7:19",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 3758,
										"nodeType": "Block",
										"src": "588:278:19",
										"statements": [
											{
												"expression": {
													"id": 3726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3716,
														"name": "totalTokenSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3702,
														"src": "599:16:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3725,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "313030303030303030",
															"id": 3717,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "618:9:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000000_by_1",
																"typeString": "int_const 100000000"
															},
															"value": "100000000"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3724,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 3718,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "630:2:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3721,
																			"name": "decimals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 453,
																			"src": "641:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																				"typeString": "function () view returns (uint8)"
																			}
																		},
																		"id": 3722,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "641:10:19",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 3720,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "636:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 3719,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "636:4:19",
																		"typeDescriptions": {}
																	}
																},
																"id": 3723,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "636:16:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "630:22:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "618:34:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "599:53:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3727,
												"nodeType": "ExpressionStatement",
												"src": "599:53:19"
											},
											{
												"expression": {
													"id": 3730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3728,
														"name": "tokenPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3700,
														"src": "691:10:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 3729,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "704:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "691:14:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3731,
												"nodeType": "ExpressionStatement",
												"src": "691:14:19"
											},
											{
												"expression": {
													"id": 3742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3732,
														"name": "totalTokenSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3702,
														"src": "716:16:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "313030303030",
															"id": 3733,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "736:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000_by_1",
																"typeString": "int_const 100000"
															},
															"value": "100000"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 3734,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "745:2:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "**",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3737,
																			"name": "decimals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 453,
																			"src": "756:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																				"typeString": "function () view returns (uint8)"
																			}
																		},
																		"id": 3738,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "756:10:19",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 3736,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "751:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 3735,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "751:4:19",
																		"typeDescriptions": {}
																	}
																},
																"id": 3739,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "751:16:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "745:22:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "736:31:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "716:51:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3743,
												"nodeType": "ExpressionStatement",
												"src": "716:51:19"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3745,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "784:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "788:6:19",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "784:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3755,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "313030303030",
																"id": 3747,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "796:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000_by_1",
																	"typeString": "int_const 100000"
																},
																"value": "100000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3754,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "805:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 3751,
																				"name": "decimals",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 453,
																				"src": "816:8:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																					"typeString": "function () view returns (uint8)"
																				}
																			},
																			"id": 3752,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "816:10:19",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 3750,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "811:4:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 3749,
																			"name": "uint",
																			"nodeType": "ElementaryTypeName",
																			"src": "811:4:19",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3753,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "811:16:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "805:22:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "796:31:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3744,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 729,
														"src": "778:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "778:50:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3757,
												"nodeType": "ExpressionStatement",
												"src": "778:50:19"
											}
										]
									},
									"id": 3759,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "43534450",
													"id": 3705,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "473:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_ceb19e178404a4c234c9f0f291e1c7437c760f0013a6863723ca1255c84b9b13",
														"typeString": "literal_string \"CSDP\""
													},
													"value": "CSDP"
												},
												{
													"hexValue": "43534450",
													"id": 3706,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "481:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_ceb19e178404a4c234c9f0f291e1c7437c760f0013a6863723ca1255c84b9b13",
														"typeString": "literal_string \"CSDP\""
													},
													"value": "CSDP"
												}
											],
											"id": 3707,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3704,
												"name": "ERC20",
												"nameLocations": [
													"467:5:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 889,
												"src": "467:5:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "467:21:19"
										},
										{
											"arguments": [
												{
													"hexValue": "43534450",
													"id": 3709,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "511:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_ceb19e178404a4c234c9f0f291e1c7437c760f0013a6863723ca1255c84b9b13",
														"typeString": "literal_string \"CSDP\""
													},
													"value": "CSDP"
												}
											],
											"id": 3710,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3708,
												"name": "ERC20Permit",
												"nameLocations": [
													"499:11:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1121,
												"src": "499:11:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "499:19:19"
										},
										{
											"arguments": [
												{
													"expression": {
														"id": 3712,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "536:3:19",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 3713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "540:6:19",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "536:10:19",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3714,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3711,
												"name": "Ownable",
												"nameLocations": [
													"528:7:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "528:7:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "528:19:19"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3703,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "455:2:19"
									},
									"returnParameters": {
										"id": 3715,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "588:0:19"
									},
									"scope": 3875,
									"src": "444:422:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3805,
										"nodeType": "Block",
										"src": "1019:484:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3767,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1038:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1042:5:19",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1038:9:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3769,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1038:13:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f75206d7573742073656e6420457468657220746f2067657420746f6b656e73",
															"id": 3771,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1053:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_643d0ad0a6759ec767079411f2fcd4927fb74148bf1e38af28af5a49f8c74a3d",
																"typeString": "literal_string \"You must send Ether to get tokens\""
															},
															"value": "You must send Ether to get tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_643d0ad0a6759ec767079411f2fcd4927fb74148bf1e38af28af5a49f8c74a3d",
																"typeString": "literal_string \"You must send Ether to get tokens\""
															}
														],
														"id": 3766,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1030:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1030:59:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3773,
												"nodeType": "ExpressionStatement",
												"src": "1030:59:19"
											},
											{
												"assignments": [
													3775
												],
												"declarations": [
													{
														"constant": false,
														"id": 3775,
														"mutability": "mutable",
														"name": "amountToMint",
														"nameLocation": "1118:12:19",
														"nodeType": "VariableDeclaration",
														"scope": 3805,
														"src": "1110:20:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3774,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1110:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3782,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 3776,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1133:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1137:5:19",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "1133:9:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 3778,
															"name": "tokenPrice",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3700,
															"src": "1145:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1133:22:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "31303030",
														"id": 3780,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1158:4:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000_by_1",
															"typeString": "int_const 1000"
														},
														"value": "1000"
													},
													"src": "1133:29:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1110:52:19"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3784,
																"name": "totalTokenSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3702,
																"src": "1239:16:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3785,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1258:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1239:20:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f206d6f726520746f6b656e732063616e206265206d696e746564",
															"id": 3787,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1261:30:19",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8bd86920dc231c096a9c82436cd9e1b2dda9765ccd28cdfd3626bd80ee15e43",
																"typeString": "literal_string \"No more tokens can be minted\""
															},
															"value": "No more tokens can be minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8bd86920dc231c096a9c82436cd9e1b2dda9765ccd28cdfd3626bd80ee15e43",
																"typeString": "literal_string \"No more tokens can be minted\""
															}
														],
														"id": 3783,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1231:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1231:61:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3789,
												"nodeType": "ExpressionStatement",
												"src": "1231:61:19"
											},
											{
												"expression": {
													"id": 3792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3790,
														"name": "totalTokenSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3702,
														"src": "1353:16:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 3791,
														"name": "amountToMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3775,
														"src": "1373:12:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1353:32:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3793,
												"nodeType": "ExpressionStatement",
												"src": "1353:32:19"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3795,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1402:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1406:6:19",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1402:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3797,
															"name": "amountToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3775,
															"src": "1414:12:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3794,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 729,
														"src": "1396:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1396:31:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3799,
												"nodeType": "ExpressionStatement",
												"src": "1396:31:19"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3801,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1484:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1488:6:19",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1484:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3800,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 475,
														"src": "1474:9:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 3803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1474:21:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3765,
												"id": 3804,
												"nodeType": "Return",
												"src": "1467:28:19"
											}
										]
									},
									"functionSelector": "b8972db5",
									"id": 3806,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3762,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3761,
												"name": "nonReentrant",
												"nameLocations": [
													"988:12:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 339,
												"src": "988:12:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "988:12:19"
										}
									],
									"name": "sendToken",
									"nameLocation": "959:9:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3760,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "968:2:19"
									},
									"returnParameters": {
										"id": 3765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "1010:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1009:9:19"
									},
									"scope": 3875,
									"src": "950:553:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3826,
										"nodeType": "Block",
										"src": "1561:103:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3821,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1606:4:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_CSDP_$3875",
																			"typeString": "contract CSDP"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_CSDP_$3875",
																			"typeString": "contract CSDP"
																		}
																	],
																	"id": 3820,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1598:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3819,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1598:7:19",
																		"typeDescriptions": {}
																	}
																},
																"id": 3822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1598:13:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 3823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1612:7:19",
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "1598:21:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3815,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 67,
																		"src": "1580:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 3816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1580:7:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3814,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1572:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 3813,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1572:8:19",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 3817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1572:16:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 3818,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1589:8:19",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "1572:25:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 3824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1572:48:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3825,
												"nodeType": "ExpressionStatement",
												"src": "1572:48:19"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 3827,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3809,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3808,
												"name": "nonReentrant",
												"nameLocations": [
													"1538:12:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 339,
												"src": "1538:12:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1538:12:19"
										},
										{
											"id": 3811,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3810,
												"name": "onlyOwner",
												"nameLocations": [
													"1551:9:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1551:9:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1551:9:19"
										}
									],
									"name": "withdraw",
									"nameLocation": "1520:8:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1528:2:19"
									},
									"returnParameters": {
										"id": 3812,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1561:0:19"
									},
									"scope": 3875,
									"src": "1511:153:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3838,
										"nodeType": "Block",
										"src": "1730:66:19",
										"statements": [
											{
												"expression": {
													"id": 3836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3834,
														"name": "tokenPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3700,
														"src": "1741:10:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3835,
														"name": "newPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3829,
														"src": "1754:8:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1741:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3837,
												"nodeType": "ExpressionStatement",
												"src": "1741:21:19"
											}
										]
									},
									"functionSelector": "6a61e5fc",
									"id": 3839,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3832,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3831,
												"name": "onlyOwner",
												"nameLocations": [
													"1720:9:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1720:9:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1720:9:19"
										}
									],
									"name": "setTokenPrice",
									"nameLocation": "1681:13:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3829,
												"mutability": "mutable",
												"name": "newPrice",
												"nameLocation": "1703:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3839,
												"src": "1695:16:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1694:18:19"
									},
									"returnParameters": {
										"id": 3833,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1730:0:19"
									},
									"scope": 3875,
									"src": "1672:124:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										499
									],
									"body": {
										"id": 3873,
										"nodeType": "Block",
										"src": "1898:206:19",
										"statements": [
											{
												"assignments": [
													3852
												],
												"declarations": [
													{
														"constant": false,
														"id": 3852,
														"mutability": "mutable",
														"name": "burnAmount",
														"nameLocation": "1917:10:19",
														"nodeType": "VariableDeclaration",
														"scope": 3873,
														"src": "1909:18:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3851,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1909:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3858,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3855,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3853,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3843,
															"src": "1930:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "32",
															"id": 3854,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1938:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "1930:9:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030303030",
														"id": 3856,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1942:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000_by_1",
															"typeString": "int_const 100000"
														},
														"value": "100000"
													},
													"src": "1930:18:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1909:39:19"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3860,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1976:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1980:6:19",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1976:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3862,
															"name": "burnAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3852,
															"src": "1988:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3859,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 762,
														"src": "1970:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1970:29:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3864,
												"nodeType": "ExpressionStatement",
												"src": "1970:29:19"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3867,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3841,
															"src": "2073:2:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3868,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3843,
																"src": "2077:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3869,
																"name": "burnAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3852,
																"src": "2085:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2077:18:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3865,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2058:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_CSDP_$3875_$",
																"typeString": "type(contract super CSDP)"
															}
														},
														"id": 3866,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2064:8:19",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 499,
														"src": "2058:14:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 3871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2058:38:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3850,
												"id": 3872,
												"nodeType": "Return",
												"src": "2051:45:19"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 3874,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3847,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3846,
												"name": "nonReentrant",
												"nameLocations": [
													"1870:12:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 339,
												"src": "1870:12:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1870:12:19"
										}
									],
									"name": "transfer",
									"nameLocation": "1818:8:19",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3845,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1854:8:19"
									},
									"parameters": {
										"id": 3844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3841,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1835:2:19",
												"nodeType": "VariableDeclaration",
												"scope": 3874,
												"src": "1827:10:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3843,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1847:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3874,
												"src": "1839:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:27:19"
									},
									"returnParameters": {
										"id": 3850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3874,
												"src": "1892:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3848,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1892:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1891:6:19"
									},
									"scope": 3875,
									"src": "1809:295:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3876,
							"src": "255:1852:19",
							"usedErrors": [
								13,
								18,
								184,
								189,
								194,
								203,
								208,
								213,
								998,
								1005,
								1223,
								1295,
								1297,
								1888,
								1893,
								1898
							],
							"usedEvents": [
								24,
								152,
								901,
								910
							]
						}
					],
					"src": "33:2076:19"
				},
				"id": 19
			}
		}
	}
}